/**
 * 五五海淘返利APP新版接口
 * 更新日志<br> 相对于上一build的变更： <br/>Nu 调整搜索模型 
 *
 * OpenAPI spec version: 1.8 build20180202-2
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.swagger.client.api;

import io.swagger.client.ApiInvoker;
import io.swagger.client.ApiException;
import io.swagger.client.Pair;

import io.swagger.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import io.swagger.client.model.ErrorModel;
import io.swagger.client.model.ShowImgVerifyModel;
import io.swagger.client.model.AppWidgetsIfModel;
import io.swagger.client.model.AreasInfoIfModel;
import io.swagger.client.model.ProvincesIfModel;
import io.swagger.client.model.CurrenciesIfModel;
import io.swagger.client.model.ExchangeRateIfModel;
import io.swagger.client.model.ExchangesRatesIfModel;
import io.swagger.client.model.UpdateModel;
import io.swagger.client.model.PopupAdModel;
import io.swagger.client.model.RegionsIfModel;
import io.swagger.client.model.SuccessModel;
import io.swagger.client.model.StaticsIfModel;
import io.swagger.client.model.AppWidgetsStyleIfModel;
import io.swagger.client.model.LinkGeneratorModel;
import io.swagger.client.model.GeetestParamsModel;
import io.swagger.client.model.BanksIfModel;
import io.swagger.client.model.WithdrawingModesModel;
import io.swagger.client.model.DealCategoriesModel;
import io.swagger.client.model.DealsListWithAdsModel;
import io.swagger.client.model.DealDailiesListModel;
import io.swagger.client.model.DealExtraIfModel;
import io.swagger.client.model.CommentSuccessIfModel;
import io.swagger.client.model.DealDetailModel;
import io.swagger.client.model.DealPublicityIfModel;
import io.swagger.client.model.DealsModel;
import io.swagger.client.model.DealIndexModel;
import io.swagger.client.model.In24hDealsListModel;
import io.swagger.client.model.ReachedStoreIfModel;
import io.swagger.client.model.ShoppingJumpingPageIfModel;
import io.swagger.client.model.CommentsListModel;
import io.swagger.client.model.ForumBoardIndexModel;
import io.swagger.client.model.ForumBoardTopicsListModel;
import io.swagger.client.model.AddTopicSuccessModel;
import io.swagger.client.model.ForumBoardsIndexModel;
import io.swagger.client.model.ForumIndexFollowedModel;
import io.swagger.client.model.ForumIndexHotTopicsModel;
import io.swagger.client.model.ForumIndexShowOrdersModel;
import io.swagger.client.model.ForumBoardsModel;
import io.swagger.client.model.TalentsIndexModel;
import io.swagger.client.model.ForumTalentsListModel;
import io.swagger.client.model.TalkTopicsListModel;
import io.swagger.client.model.ForumTopicBriefModel;
import io.swagger.client.model.ForumTopicViewModel;
import io.swagger.client.model.RepliesListModel;
import io.swagger.client.model.AddPostSuccessModel;
import io.swagger.client.model.ForumTopicsListModel;
import io.swagger.client.model.ForumUserIndexModel;
import io.swagger.client.model.KeywordsIfModel;
import io.swagger.client.model.SearchingBoardsModel;
import io.swagger.client.model.CompletingWordsIfModel;
import io.swagger.client.model.DealsListModel;
import io.swagger.client.model.SearchingForumBoardTopicsListModel;
import io.swagger.client.model.FriendsListModel;
import io.swagger.client.model.StoresBriefsListModel;
import io.swagger.client.model.StoresListModel;
import io.swagger.client.model.TopicsListModel;
import io.swagger.client.model.TransshippersListModel;
import io.swagger.client.model.StoresRecordsListModel;
import io.swagger.client.model.SystemSettingsModel;
import io.swagger.client.model.ShippingCountryListModel;
import io.swagger.client.model.CountryShippingListModel;
import io.swagger.client.model.CategoriesIfModel;
import io.swagger.client.model.StoreBriefListModel;
import io.swagger.client.model.StoreCategoryListModel;
import io.swagger.client.model.EnteredStoresListModel;
import io.swagger.client.model.StoreIndexIfModel;
import io.swagger.client.model.OfflineStoreAddressIfModel;
import io.swagger.client.model.OfflineStoreDetailIfModel;
import io.swagger.client.model.StoresBriefsIfModel;
import io.swagger.client.model.StoreHotGoodsListModel;
import io.swagger.client.model.StoreProxyInfoIfModel;
import io.swagger.client.model.StoreDetailIfModel;
import io.swagger.client.model.StoresWithDealsListModel;
import io.swagger.client.model.TagRelatedDealsListModel;
import io.swagger.client.model.TagsListModel;
import io.swagger.client.model.TransshipperIndexIfModel;
import io.swagger.client.model.BindBankCardSuccessModel;
import io.swagger.client.model.SuccessWithStringModel;
import io.swagger.client.model.LoginSuccessModel;
import io.swagger.client.model.UserBriefInfoIfModel;
import io.swagger.client.model.UserInfoIfModel;
import io.swagger.client.model.UserInfoQuickViewIfModel;
import io.swagger.client.model.ErrorWithActionTokenModel;
import io.swagger.client.model.SingedInInfoModel;
import io.swagger.client.model.SigningInSuccessModel;
import io.swagger.client.model.ThirdPartyPlatformsModel;
import io.swagger.client.model.UserWithdrawingIndexIfModel;
import io.swagger.client.model.UserWithdrawingModesModel;
import io.swagger.client.model.BankCardsIfModel;
import io.swagger.client.model.UserCollectionForumBoardsListModel;
import io.swagger.client.model.UserCollectionForumTopicsListModel;
import io.swagger.client.model.CollectionStoresListModel;
import io.swagger.client.model.ActionTokenIfModel;
import io.swagger.client.model.SpiderDealIfModel;
import io.swagger.client.model.FollowingDealsListModel;
import io.swagger.client.model.FriendsSectionsModel;
import io.swagger.client.model.ChatMsgsListModel;
import io.swagger.client.model.InviteIfModel;
import io.swagger.client.model.InvitedFriendsListModel;
import io.swagger.client.model.InvitersListModel;
import io.swagger.client.model.RebateMissedOrderDetailIfModel;
import io.swagger.client.model.MsgNoticesListModel;
import io.swagger.client.model.MsgsListModel;
import io.swagger.client.model.PostDynamicsMsgsListModel;
import io.swagger.client.model.FriendsRequestionsListModel;
import io.swagger.client.model.OrderDetailIfModel;
import io.swagger.client.model.OrdersBriefsListModel;
import io.swagger.client.model.OrdersListModel;
import io.swagger.client.model.RebateDetailIfModel;
import io.swagger.client.model.RebateMissedOrdersListModel;
import io.swagger.client.model.RebatesListModel;
import io.swagger.client.model.MyRepliesListModel;
import io.swagger.client.model.ApplicationsForTrialListModel;
import io.swagger.client.model.SendMsgSuccessModel;
import io.swagger.client.model.VipRebateStoresListModel;
import io.swagger.client.model.StoresRecordsSectionsListModel;
import io.swagger.client.model.WithdrawingSuccessModel;
import io.swagger.client.model.WithdrawingRecordDetailIfModel;
import io.swagger.client.model.WithDrawingRecordsListModel;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class DefaultApi {
  String basePath = "http://api.domain/";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

    /** * 发布帖子
     * 发帖
     *
     * @param boardId     版块ID
     * @param title       标题
     * @param content     内容
     * @param topicTypeId 帖子类别ID
     * @param picList     帖子图片地址
     */
    public void forumBoardBoardIdTopicPost(String boardId, String title, String content, String topicTypeId, ArrayList<String> picList, final Response.Listener<AddTopicSuccessModel> responseListener, final Response.ErrorListener errorListener) {
        Object postBody = null;


        // verify the required parameter 'boardId' is set
        if (boardId == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling forumBoardBoardIdTopicPost",
                    new ApiException(400, "Missing the required parameter 'boardId' when calling forumBoardBoardIdTopicPost"));
        }

        // verify the required parameter 'title' is set
        if (title == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'title' when calling forumBoardBoardIdTopicPost",
                    new ApiException(400, "Missing the required parameter 'title' when calling forumBoardBoardIdTopicPost"));
        }

        // verify the required parameter 'content' is set
        if (content == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'content' when calling forumBoardBoardIdTopicPost",
                    new ApiException(400, "Missing the required parameter 'content' when calling forumBoardBoardIdTopicPost"));
        }


        // create path and map variables
        String path = "/forum/board/{board_id}/topic".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString()));

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        String[] contentTypes = {
                "multipart/form-data"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();

            if (topicTypeId != null) {
                localVarBuilder.addTextBody("topic_type_id", ApiInvoker.parameterToString(topicTypeId), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (title != null) {
                localVarBuilder.addTextBody("title", ApiInvoker.parameterToString(title), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (content != null) {
                localVarBuilder.addTextBody("content", ApiInvoker.parameterToString(content), ApiInvoker.TEXT_PLAIN_UTF8);
            }


            if (null != picList) {
                for (int i = 0; i < picList.size(); i++) {
                    localVarBuilder.addTextBody(String.format("pic%d", i + 1), ApiInvoker.parameterToString(picList.get(i)), ApiInvoker.TEXT_PLAIN_UTF8);
                }
            }

            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
            formParams.put("topic_type_id", ApiInvoker.parameterToString(topicTypeId));
            formParams.put("title", ApiInvoker.parameterToString(title));
            formParams.put("content", ApiInvoker.parameterToString(content));
            if (null != picList) {
                for (int i = 0; i < picList.size(); i++) {
                    formParams.put(String.format("pic%d", i + 1), ApiInvoker.parameterToString(picList.get(i)));
                }
            }
        }

        String[] authNames = new String[]{};

        try {
            apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String localVarResponse) {
                            try {
                                responseListener.onResponse((AddTopicSuccessModel) ApiInvoker.deserialize(localVarResponse, "", AddTopicSuccessModel.class));
                            } catch (ApiException exception) {
                                errorListener.onErrorResponse(new VolleyError(exception));
                            }
                        }
                    }, new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            errorListener.onErrorResponse(error);
                        }
                    });
        } catch (ApiException ex) {
            errorListener.onErrorResponse(new VolleyError(ex));
        }
    }


    /**
     * 回帖
     * 回帖
     *
     * @param topicId   帖子ID   *
     * @param content   回帖内容   *
     * @param sourcePid 回复目标帖子的ID   *
     * @param picList   帖子图片地址   *
     */
    public void forumTopicTopicIdReplyPost(String topicId, String content, String sourcePid, ArrayList<String> picList, final Response.Listener<AddPostSuccessModel> responseListener, final Response.ErrorListener errorListener) {
        Object postBody = null;


        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'topicId' when calling forumTopicTopicIdReplyPost",
                    new ApiException(400, "Missing the required parameter 'topicId' when calling forumTopicTopicIdReplyPost"));
        }

        // verify the required parameter 'content' is set
        if (content == null) {
            VolleyError error = new VolleyError("Missing the required parameter 'content' when calling forumTopicTopicIdReplyPost",
                    new ApiException(400, "Missing the required parameter 'content' when calling forumTopicTopicIdReplyPost"));
        }


        // create path and map variables
        String path = "/forum/topic/{topic_id}/reply".replaceAll("\\{format\\}", "json").replaceAll("\\{" + "topic_id" + "\\}", apiInvoker.escapeString(topicId.toString()));

        // query params
        List<Pair> queryParams = new ArrayList<Pair>();
        // header params
        Map<String, String> headerParams = new HashMap<String, String>();
        // form params
        Map<String, String> formParams = new HashMap<String, String>();


        String[] contentTypes = {
                "multipart/form-data"
        };
        String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

        if (contentType.startsWith("multipart/form-data")) {
            // file uploading
            MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();

            if (sourcePid != null) {
                localVarBuilder.addTextBody("source_pid", ApiInvoker.parameterToString(sourcePid), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (content != null) {
                localVarBuilder.addTextBody("content", ApiInvoker.parameterToString(content), ApiInvoker.TEXT_PLAIN_UTF8);
            }

            if (null != picList) {
                for (int i = 0; i < picList.size(); i++) {
                    localVarBuilder.addTextBody(String.format("pic%d", i + 1), ApiInvoker.parameterToString(picList.get(i)), ApiInvoker.TEXT_PLAIN_UTF8);
                }
            }


            HttpEntity httpEntity = localVarBuilder.build();
            postBody = httpEntity;
        } else {
            // normal form params
            formParams.put("source_pid", ApiInvoker.parameterToString(sourcePid));
            formParams.put("content", ApiInvoker.parameterToString(content));
            if (null != picList) {
                for (int i = 0; i < picList.size(); i++) {
                    formParams.put(String.format("pic%d", i + 1), ApiInvoker.parameterToString(picList.get(i)));
                }
            }
        }

        String[] authNames = new String[]{};

        try {
            apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
                    new Response.Listener<String>() {
                        @Override
                        public void onResponse(String localVarResponse) {
                            try {
                                responseListener.onResponse((AddPostSuccessModel) ApiInvoker.deserialize(localVarResponse, "", AddPostSuccessModel.class));
                            } catch (ApiException exception) {
                                errorListener.onErrorResponse(new VolleyError(exception));
                            }
                        }
                    }, new Response.ErrorListener() {
                        @Override
                        public void onErrorResponse(VolleyError error) {
                            errorListener.onErrorResponse(error);
                        }
                    });
        } catch (ApiException ex) {
            errorListener.onErrorResponse(new VolleyError(ex));
        }
    }

    /**
  * 检查是否需要验证码
  * 检查是否需要验证码 
   * @param account 需要检测的账号名
   * @return ShowImgVerifyModel
  */
  public ShowImgVerifyModel commonAccountAccountImgVerifyCodeShowGet (String account) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'account' is set
      if (account == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'account' when calling commonAccountAccountImgVerifyCodeShowGet",
      new ApiException(400, "Missing the required parameter 'account' when calling commonAccountAccountImgVerifyCodeShowGet"));
      }
  

  // create path and map variables
  String path = "/common/account/{account}/img_verify_code_show".replaceAll("\\{format\\}","json").replaceAll("\\{" + "account" + "\\}", apiInvoker.escapeString(account.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ShowImgVerifyModel) ApiInvoker.deserialize(localVarResponse, "", ShowImgVerifyModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 检查是否需要验证码
   * 检查是否需要验证码 
   * @param account 需要检测的账号名
  */
  public void commonAccountAccountImgVerifyCodeShowGet (String account, final Response.Listener<ShowImgVerifyModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'account' is set
    if (account == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'account' when calling commonAccountAccountImgVerifyCodeShowGet",
         new ApiException(400, "Missing the required parameter 'account' when calling commonAccountAccountImgVerifyCodeShowGet"));
    }
    

    // create path and map variables
    String path = "/common/account/{account}/img_verify_code_show".replaceAll("\\{format\\}","json").replaceAll("\\{" + "account" + "\\}", apiInvoker.escapeString(account.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ShowImgVerifyModel) ApiInvoker.deserialize(localVarResponse,  "", ShowImgVerifyModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * APP TAB
  * APP TAB 
   * @return AppWidgetsIfModel
  */
  public AppWidgetsIfModel commonAppTabGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/common/app_tab".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (AppWidgetsIfModel) ApiInvoker.deserialize(localVarResponse, "", AppWidgetsIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * APP TAB
   * APP TAB 

  */
  public void commonAppTabGet (final Response.Listener<AppWidgetsIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/common/app_tab".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AppWidgetsIfModel) ApiInvoker.deserialize(localVarResponse,  "", AppWidgetsIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 地区信息列表
  * 地区信息列表 
   * @return AreasInfoIfModel
  */
  public AreasInfoIfModel commonAreasInfoGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/common/areas_info".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (AreasInfoIfModel) ApiInvoker.deserialize(localVarResponse, "", AreasInfoIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 地区信息列表
   * 地区信息列表 

  */
  public void commonAreasInfoGet (final Response.Listener<AreasInfoIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/common/areas_info".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AreasInfoIfModel) ApiInvoker.deserialize(localVarResponse,  "", AreasInfoIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 根据国家获取省份列表
  * 根据国家获取省份列表 
   * @param countryId 国家id 为0则列出所有
   * @return ProvincesIfModel
  */
  public ProvincesIfModel commonCountryIdProvinceGet (String countryId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'countryId' is set
      if (countryId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'countryId' when calling commonCountryIdProvinceGet",
      new ApiException(400, "Missing the required parameter 'countryId' when calling commonCountryIdProvinceGet"));
      }
  

  // create path and map variables
  String path = "/common/{country_id}/province".replaceAll("\\{format\\}","json").replaceAll("\\{" + "country_id" + "\\}", apiInvoker.escapeString(countryId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ProvincesIfModel) ApiInvoker.deserialize(localVarResponse, "", ProvincesIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 根据国家获取省份列表
   * 根据国家获取省份列表 
   * @param countryId 国家id 为0则列出所有
  */
  public void commonCountryIdProvinceGet (String countryId, final Response.Listener<ProvincesIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'countryId' is set
    if (countryId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'countryId' when calling commonCountryIdProvinceGet",
         new ApiException(400, "Missing the required parameter 'countryId' when calling commonCountryIdProvinceGet"));
    }
    

    // create path and map variables
    String path = "/common/{country_id}/province".replaceAll("\\{format\\}","json").replaceAll("\\{" + "country_id" + "\\}", apiInvoker.escapeString(countryId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProvincesIfModel) ApiInvoker.deserialize(localVarResponse,  "", ProvincesIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 货币列表
  * 货币列表 
   * @return CurrenciesIfModel
  */
  public CurrenciesIfModel commonCurrenciesGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/common/currencies".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (CurrenciesIfModel) ApiInvoker.deserialize(localVarResponse, "", CurrenciesIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 货币列表
   * 货币列表 

  */
  public void commonCurrenciesGet (final Response.Listener<CurrenciesIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/common/currencies".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CurrenciesIfModel) ApiInvoker.deserialize(localVarResponse,  "", CurrenciesIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 一对一汇率
  * 一对一汇率，一个原始币种对应一个兑换币种的汇率 
   * @param from 原始币种缩写
   * @param to 兑换币种缩写
   * @return ExchangeRateIfModel
  */
  public ExchangeRateIfModel commonExchangeRateGet (String from, String to) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'from' is set
      if (from == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'from' when calling commonExchangeRateGet",
      new ApiException(400, "Missing the required parameter 'from' when calling commonExchangeRateGet"));
      }
  
      // verify the required parameter 'to' is set
      if (to == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'to' when calling commonExchangeRateGet",
      new ApiException(400, "Missing the required parameter 'to' when calling commonExchangeRateGet"));
      }
  

  // create path and map variables
  String path = "/common/exchange_rate".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "from", from));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "to", to));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ExchangeRateIfModel) ApiInvoker.deserialize(localVarResponse, "", ExchangeRateIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 一对一汇率
   * 一对一汇率，一个原始币种对应一个兑换币种的汇率 
   * @param from 原始币种缩写   * @param to 兑换币种缩写
  */
  public void commonExchangeRateGet (String from, String to, final Response.Listener<ExchangeRateIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'from' is set
    if (from == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'from' when calling commonExchangeRateGet",
         new ApiException(400, "Missing the required parameter 'from' when calling commonExchangeRateGet"));
    }
    
    // verify the required parameter 'to' is set
    if (to == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'to' when calling commonExchangeRateGet",
         new ApiException(400, "Missing the required parameter 'to' when calling commonExchangeRateGet"));
    }
    

    // create path and map variables
    String path = "/common/exchange_rate".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "from", from));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "to", to));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ExchangeRateIfModel) ApiInvoker.deserialize(localVarResponse,  "", ExchangeRateIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 多对多汇率
  * 多对多汇率，可用于一次查询一个原始币种对应多个兑换币种的汇率，或者多个原始币种对应一个兑换币种的汇率 
   * @param from 原始币种缩写, 多个用半角逗号隔开, 不管是否是一对一汇率返回的都是数组
   * @param to 兑换币种缩写, 多个用半角逗号隔开, 不管是否是一对一汇率返回的都是数组
   * @return ExchangesRatesIfModel
  */
  public ExchangesRatesIfModel commonExchangesRatesGet (String from, String to) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'from' is set
      if (from == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'from' when calling commonExchangesRatesGet",
      new ApiException(400, "Missing the required parameter 'from' when calling commonExchangesRatesGet"));
      }
  
      // verify the required parameter 'to' is set
      if (to == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'to' when calling commonExchangesRatesGet",
      new ApiException(400, "Missing the required parameter 'to' when calling commonExchangesRatesGet"));
      }
  

  // create path and map variables
  String path = "/common/exchanges_rates".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "from", from));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "to", to));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ExchangesRatesIfModel) ApiInvoker.deserialize(localVarResponse, "", ExchangesRatesIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 多对多汇率
   * 多对多汇率，可用于一次查询一个原始币种对应多个兑换币种的汇率，或者多个原始币种对应一个兑换币种的汇率 
   * @param from 原始币种缩写, 多个用半角逗号隔开, 不管是否是一对一汇率返回的都是数组   * @param to 兑换币种缩写, 多个用半角逗号隔开, 不管是否是一对一汇率返回的都是数组
  */
  public void commonExchangesRatesGet (String from, String to, final Response.Listener<ExchangesRatesIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'from' is set
    if (from == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'from' when calling commonExchangesRatesGet",
         new ApiException(400, "Missing the required parameter 'from' when calling commonExchangesRatesGet"));
    }
    
    // verify the required parameter 'to' is set
    if (to == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'to' when calling commonExchangesRatesGet",
         new ApiException(400, "Missing the required parameter 'to' when calling commonExchangesRatesGet"));
    }
    

    // create path and map variables
    String path = "/common/exchanges_rates".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "from", from));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "to", to));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ExchangesRatesIfModel) ApiInvoker.deserialize(localVarResponse,  "", ExchangesRatesIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 检查APP是否有新版本
  * 检查APP是否有新版本 
   * @return UpdateModel
  */
  public UpdateModel commonNewVersionCheckingGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/common/new_version_checking".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (UpdateModel) ApiInvoker.deserialize(localVarResponse, "", UpdateModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 检查APP是否有新版本
   * 检查APP是否有新版本 

  */
  public void commonNewVersionCheckingGet (final Response.Listener<UpdateModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/common/new_version_checking".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UpdateModel) ApiInvoker.deserialize(localVarResponse,  "", UpdateModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 弹窗广告
  * 弹窗广告 
   * @return PopupAdModel
  */
  public PopupAdModel commonPopupAdGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/common/popup_ad".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (PopupAdModel) ApiInvoker.deserialize(localVarResponse, "", PopupAdModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 弹窗广告
   * 弹窗广告 

  */
  public void commonPopupAdGet (final Response.Listener<PopupAdModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/common/popup_ad".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PopupAdModel) ApiInvoker.deserialize(localVarResponse,  "", PopupAdModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 获取地区
  * 获取地区 
   * @param regionId 地区ID 0参数列出省和直辖市
   * @return RegionsIfModel
  */
  public RegionsIfModel commonRegionRegionIdSubRegionsGet (String regionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'regionId' is set
      if (regionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'regionId' when calling commonRegionRegionIdSubRegionsGet",
      new ApiException(400, "Missing the required parameter 'regionId' when calling commonRegionRegionIdSubRegionsGet"));
      }
  

  // create path and map variables
  String path = "/common/region/{region_id}/sub_regions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "region_id" + "\\}", apiInvoker.escapeString(regionId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (RegionsIfModel) ApiInvoker.deserialize(localVarResponse, "", RegionsIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 获取地区
   * 获取地区 
   * @param regionId 地区ID 0参数列出省和直辖市
  */
  public void commonRegionRegionIdSubRegionsGet (String regionId, final Response.Listener<RegionsIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'regionId' is set
    if (regionId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'regionId' when calling commonRegionRegionIdSubRegionsGet",
         new ApiException(400, "Missing the required parameter 'regionId' when calling commonRegionRegionIdSubRegionsGet"));
    }
    

    // create path and map variables
    String path = "/common/region/{region_id}/sub_regions".replaceAll("\\{format\\}","json").replaceAll("\\{" + "region_id" + "\\}", apiInvoker.escapeString(regionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RegionsIfModel) ApiInvoker.deserialize(localVarResponse,  "", RegionsIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 搜索结果点击日志
  * 闪屏广告 
   * @param types deal-ios-searchclick,deal-ios-click,deal-andriod-searchclick,deal-andriod-click bbs-ios-searchclick,bbs-ios-click,bbs-andriod-searchclick,bbs-andriod-click
   * @param usrid 用户id
   * @param did deal或者帖子的id
   * @param title 标题
   * @param timestamp 时间戳
   * @param query 用户搜索词
   * @return SuccessModel
  */
  public SuccessModel commonSearchingClickingLoggingPost (String types, String usrid, String did, String title, String timestamp, String query) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'types' is set
      if (types == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'types' when calling commonSearchingClickingLoggingPost",
      new ApiException(400, "Missing the required parameter 'types' when calling commonSearchingClickingLoggingPost"));
      }
  
      // verify the required parameter 'usrid' is set
      if (usrid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'usrid' when calling commonSearchingClickingLoggingPost",
      new ApiException(400, "Missing the required parameter 'usrid' when calling commonSearchingClickingLoggingPost"));
      }
  
      // verify the required parameter 'did' is set
      if (did == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'did' when calling commonSearchingClickingLoggingPost",
      new ApiException(400, "Missing the required parameter 'did' when calling commonSearchingClickingLoggingPost"));
      }
  
      // verify the required parameter 'title' is set
      if (title == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'title' when calling commonSearchingClickingLoggingPost",
      new ApiException(400, "Missing the required parameter 'title' when calling commonSearchingClickingLoggingPost"));
      }
  
      // verify the required parameter 'timestamp' is set
      if (timestamp == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'timestamp' when calling commonSearchingClickingLoggingPost",
      new ApiException(400, "Missing the required parameter 'timestamp' when calling commonSearchingClickingLoggingPost"));
      }
  
      // verify the required parameter 'query' is set
      if (query == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'query' when calling commonSearchingClickingLoggingPost",
      new ApiException(400, "Missing the required parameter 'query' when calling commonSearchingClickingLoggingPost"));
      }
  

  // create path and map variables
  String path = "/common/searching_clicking_logging".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (types != null) {
          localVarBuilder.addTextBody("types", ApiInvoker.parameterToString(types), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (usrid != null) {
          localVarBuilder.addTextBody("usrid", ApiInvoker.parameterToString(usrid), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (did != null) {
          localVarBuilder.addTextBody("did", ApiInvoker.parameterToString(did), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (title != null) {
          localVarBuilder.addTextBody("title", ApiInvoker.parameterToString(title), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (timestamp != null) {
          localVarBuilder.addTextBody("timestamp", ApiInvoker.parameterToString(timestamp), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (query != null) {
          localVarBuilder.addTextBody("query", ApiInvoker.parameterToString(query), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("types", ApiInvoker.parameterToString(types));
formParams.put("usrid", ApiInvoker.parameterToString(usrid));
formParams.put("did", ApiInvoker.parameterToString(did));
formParams.put("title", ApiInvoker.parameterToString(title));
formParams.put("timestamp", ApiInvoker.parameterToString(timestamp));
formParams.put("query", ApiInvoker.parameterToString(query));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 搜索结果点击日志
   * 闪屏广告 
   * @param types deal-ios-searchclick,deal-ios-click,deal-andriod-searchclick,deal-andriod-click bbs-ios-searchclick,bbs-ios-click,bbs-andriod-searchclick,bbs-andriod-click   * @param usrid 用户id   * @param did deal或者帖子的id   * @param title 标题   * @param timestamp 时间戳   * @param query 用户搜索词
  */
  public void commonSearchingClickingLoggingPost (String types, String usrid, String did, String title, String timestamp, String query, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'types' is set
    if (types == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'types' when calling commonSearchingClickingLoggingPost",
         new ApiException(400, "Missing the required parameter 'types' when calling commonSearchingClickingLoggingPost"));
    }
    
    // verify the required parameter 'usrid' is set
    if (usrid == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'usrid' when calling commonSearchingClickingLoggingPost",
         new ApiException(400, "Missing the required parameter 'usrid' when calling commonSearchingClickingLoggingPost"));
    }
    
    // verify the required parameter 'did' is set
    if (did == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'did' when calling commonSearchingClickingLoggingPost",
         new ApiException(400, "Missing the required parameter 'did' when calling commonSearchingClickingLoggingPost"));
    }
    
    // verify the required parameter 'title' is set
    if (title == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'title' when calling commonSearchingClickingLoggingPost",
         new ApiException(400, "Missing the required parameter 'title' when calling commonSearchingClickingLoggingPost"));
    }
    
    // verify the required parameter 'timestamp' is set
    if (timestamp == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'timestamp' when calling commonSearchingClickingLoggingPost",
         new ApiException(400, "Missing the required parameter 'timestamp' when calling commonSearchingClickingLoggingPost"));
    }
    
    // verify the required parameter 'query' is set
    if (query == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'query' when calling commonSearchingClickingLoggingPost",
         new ApiException(400, "Missing the required parameter 'query' when calling commonSearchingClickingLoggingPost"));
    }
    

    // create path and map variables
    String path = "/common/searching_clicking_logging".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (types != null) {
        localVarBuilder.addTextBody("types", ApiInvoker.parameterToString(types), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (usrid != null) {
        localVarBuilder.addTextBody("usrid", ApiInvoker.parameterToString(usrid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (did != null) {
        localVarBuilder.addTextBody("did", ApiInvoker.parameterToString(did), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (title != null) {
        localVarBuilder.addTextBody("title", ApiInvoker.parameterToString(title), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (timestamp != null) {
        localVarBuilder.addTextBody("timestamp", ApiInvoker.parameterToString(timestamp), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (query != null) {
        localVarBuilder.addTextBody("query", ApiInvoker.parameterToString(query), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("types", ApiInvoker.parameterToString(types));
formParams.put("usrid", ApiInvoker.parameterToString(usrid));
formParams.put("did", ApiInvoker.parameterToString(did));
formParams.put("title", ApiInvoker.parameterToString(title));
formParams.put("timestamp", ApiInvoker.parameterToString(timestamp));
formParams.put("query", ApiInvoker.parameterToString(query));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 搜索日志
  * 闪屏广告 
   * @param types ios-bbs-search, ios-deal-search, andriod-bbs-search, andriod-deal-search
   * @param usrid 用户id
   * @param query 搜索关键词
   * @param timestamp 时间戳
   * @param isFilter 是否筛选 - 0:否 1：是
   * @param isSort 是否筛选 - 0:否 1：是
   * @param page 搜索结果页码
   * @param resNum 返回结果数
   * @return SuccessModel
  */
  public SuccessModel commonSearchingLoggingPost (String types, String usrid, String query, String timestamp, String isFilter, String isSort, String page, String resNum) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'types' is set
      if (types == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'types' when calling commonSearchingLoggingPost",
      new ApiException(400, "Missing the required parameter 'types' when calling commonSearchingLoggingPost"));
      }
  
      // verify the required parameter 'usrid' is set
      if (usrid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'usrid' when calling commonSearchingLoggingPost",
      new ApiException(400, "Missing the required parameter 'usrid' when calling commonSearchingLoggingPost"));
      }
  
      // verify the required parameter 'query' is set
      if (query == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'query' when calling commonSearchingLoggingPost",
      new ApiException(400, "Missing the required parameter 'query' when calling commonSearchingLoggingPost"));
      }
  
      // verify the required parameter 'timestamp' is set
      if (timestamp == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'timestamp' when calling commonSearchingLoggingPost",
      new ApiException(400, "Missing the required parameter 'timestamp' when calling commonSearchingLoggingPost"));
      }
  
      // verify the required parameter 'isFilter' is set
      if (isFilter == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'isFilter' when calling commonSearchingLoggingPost",
      new ApiException(400, "Missing the required parameter 'isFilter' when calling commonSearchingLoggingPost"));
      }
  
      // verify the required parameter 'isSort' is set
      if (isSort == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'isSort' when calling commonSearchingLoggingPost",
      new ApiException(400, "Missing the required parameter 'isSort' when calling commonSearchingLoggingPost"));
      }
  
      // verify the required parameter 'page' is set
      if (page == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'page' when calling commonSearchingLoggingPost",
      new ApiException(400, "Missing the required parameter 'page' when calling commonSearchingLoggingPost"));
      }
  
      // verify the required parameter 'resNum' is set
      if (resNum == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'resNum' when calling commonSearchingLoggingPost",
      new ApiException(400, "Missing the required parameter 'resNum' when calling commonSearchingLoggingPost"));
      }
  

  // create path and map variables
  String path = "/common/searching_logging".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (types != null) {
          localVarBuilder.addTextBody("types", ApiInvoker.parameterToString(types), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (usrid != null) {
          localVarBuilder.addTextBody("usrid", ApiInvoker.parameterToString(usrid), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (query != null) {
          localVarBuilder.addTextBody("query", ApiInvoker.parameterToString(query), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (timestamp != null) {
          localVarBuilder.addTextBody("timestamp", ApiInvoker.parameterToString(timestamp), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (isFilter != null) {
          localVarBuilder.addTextBody("isFilter", ApiInvoker.parameterToString(isFilter), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (isSort != null) {
          localVarBuilder.addTextBody("isSort", ApiInvoker.parameterToString(isSort), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (page != null) {
          localVarBuilder.addTextBody("page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (resNum != null) {
          localVarBuilder.addTextBody("resNum", ApiInvoker.parameterToString(resNum), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("types", ApiInvoker.parameterToString(types));
formParams.put("usrid", ApiInvoker.parameterToString(usrid));
formParams.put("query", ApiInvoker.parameterToString(query));
formParams.put("timestamp", ApiInvoker.parameterToString(timestamp));
formParams.put("isFilter", ApiInvoker.parameterToString(isFilter));
formParams.put("isSort", ApiInvoker.parameterToString(isSort));
formParams.put("page", ApiInvoker.parameterToString(page));
formParams.put("resNum", ApiInvoker.parameterToString(resNum));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 搜索日志
   * 闪屏广告 
   * @param types ios-bbs-search, ios-deal-search, andriod-bbs-search, andriod-deal-search   * @param usrid 用户id   * @param query 搜索关键词   * @param timestamp 时间戳   * @param isFilter 是否筛选 - 0:否 1：是   * @param isSort 是否筛选 - 0:否 1：是   * @param page 搜索结果页码   * @param resNum 返回结果数
  */
  public void commonSearchingLoggingPost (String types, String usrid, String query, String timestamp, String isFilter, String isSort, String page, String resNum, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'types' is set
    if (types == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'types' when calling commonSearchingLoggingPost",
         new ApiException(400, "Missing the required parameter 'types' when calling commonSearchingLoggingPost"));
    }
    
    // verify the required parameter 'usrid' is set
    if (usrid == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'usrid' when calling commonSearchingLoggingPost",
         new ApiException(400, "Missing the required parameter 'usrid' when calling commonSearchingLoggingPost"));
    }
    
    // verify the required parameter 'query' is set
    if (query == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'query' when calling commonSearchingLoggingPost",
         new ApiException(400, "Missing the required parameter 'query' when calling commonSearchingLoggingPost"));
    }
    
    // verify the required parameter 'timestamp' is set
    if (timestamp == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'timestamp' when calling commonSearchingLoggingPost",
         new ApiException(400, "Missing the required parameter 'timestamp' when calling commonSearchingLoggingPost"));
    }
    
    // verify the required parameter 'isFilter' is set
    if (isFilter == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'isFilter' when calling commonSearchingLoggingPost",
         new ApiException(400, "Missing the required parameter 'isFilter' when calling commonSearchingLoggingPost"));
    }
    
    // verify the required parameter 'isSort' is set
    if (isSort == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'isSort' when calling commonSearchingLoggingPost",
         new ApiException(400, "Missing the required parameter 'isSort' when calling commonSearchingLoggingPost"));
    }
    
    // verify the required parameter 'page' is set
    if (page == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'page' when calling commonSearchingLoggingPost",
         new ApiException(400, "Missing the required parameter 'page' when calling commonSearchingLoggingPost"));
    }
    
    // verify the required parameter 'resNum' is set
    if (resNum == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'resNum' when calling commonSearchingLoggingPost",
         new ApiException(400, "Missing the required parameter 'resNum' when calling commonSearchingLoggingPost"));
    }
    

    // create path and map variables
    String path = "/common/searching_logging".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (types != null) {
        localVarBuilder.addTextBody("types", ApiInvoker.parameterToString(types), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (usrid != null) {
        localVarBuilder.addTextBody("usrid", ApiInvoker.parameterToString(usrid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (query != null) {
        localVarBuilder.addTextBody("query", ApiInvoker.parameterToString(query), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (timestamp != null) {
        localVarBuilder.addTextBody("timestamp", ApiInvoker.parameterToString(timestamp), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (isFilter != null) {
        localVarBuilder.addTextBody("isFilter", ApiInvoker.parameterToString(isFilter), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (isSort != null) {
        localVarBuilder.addTextBody("isSort", ApiInvoker.parameterToString(isSort), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (page != null) {
        localVarBuilder.addTextBody("page", ApiInvoker.parameterToString(page), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (resNum != null) {
        localVarBuilder.addTextBody("resNum", ApiInvoker.parameterToString(resNum), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("types", ApiInvoker.parameterToString(types));
formParams.put("usrid", ApiInvoker.parameterToString(usrid));
formParams.put("query", ApiInvoker.parameterToString(query));
formParams.put("timestamp", ApiInvoker.parameterToString(timestamp));
formParams.put("isFilter", ApiInvoker.parameterToString(isFilter));
formParams.put("isSort", ApiInvoker.parameterToString(isSort));
formParams.put("page", ApiInvoker.parameterToString(page));
formParams.put("resNum", ApiInvoker.parameterToString(resNum));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 闪屏广告
  * 闪屏广告 
   * @param width 宽度
   * @param height 高度
   * @return PopupAdModel
  */
  public PopupAdModel commonSplashScreenAdGet (String width, String height) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/common/splash_screen_ad".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "width", width));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "height", height));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (PopupAdModel) ApiInvoker.deserialize(localVarResponse, "", PopupAdModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 闪屏广告
   * 闪屏广告 
   * @param width 宽度   * @param height 高度
  */
  public void commonSplashScreenAdGet (String width, String height, final Response.Listener<PopupAdModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/common/splash_screen_ad".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "width", width));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "height", height));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PopupAdModel) ApiInvoker.deserialize(localVarResponse,  "", PopupAdModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 静态资源文件
  * 静态资源文件 
   * @return StaticsIfModel
  */
  public StaticsIfModel commonStaticsGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/common/statics".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (StaticsIfModel) ApiInvoker.deserialize(localVarResponse, "", StaticsIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 静态资源文件
   * 静态资源文件 

  */
  public void commonStaticsGet (final Response.Listener<StaticsIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/common/statics".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StaticsIfModel) ApiInvoker.deserialize(localVarResponse,  "", StaticsIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 菜单样式
  * 菜单样式 
   * @return AppWidgetsStyleIfModel
  */
  public AppWidgetsStyleIfModel commonStyleGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/common/style".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (AppWidgetsStyleIfModel) ApiInvoker.deserialize(localVarResponse, "", AppWidgetsStyleIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 菜单样式
   * 菜单样式 

  */
  public void commonStyleGet (final Response.Listener<AppWidgetsStyleIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/common/style".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AppWidgetsStyleIfModel) ApiInvoker.deserialize(localVarResponse,  "", AppWidgetsStyleIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 刷新token
  * 刷新token 
   * @param token token
   * @param refreshToken refresh_token
   * @return SuccessModel
  */
  public SuccessModel commonTokenRefreshingGet (String token, String refreshToken) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'token' is set
      if (token == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'token' when calling commonTokenRefreshingGet",
      new ApiException(400, "Missing the required parameter 'token' when calling commonTokenRefreshingGet"));
      }
  
      // verify the required parameter 'refreshToken' is set
      if (refreshToken == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'refreshToken' when calling commonTokenRefreshingGet",
      new ApiException(400, "Missing the required parameter 'refreshToken' when calling commonTokenRefreshingGet"));
      }
  

  // create path and map variables
  String path = "/common/token_refreshing".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "token", token));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "refresh_token", refreshToken));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 刷新token
   * 刷新token 
   * @param token token   * @param refreshToken refresh_token
  */
  public void commonTokenRefreshingGet (String token, String refreshToken, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'token' is set
    if (token == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'token' when calling commonTokenRefreshingGet",
         new ApiException(400, "Missing the required parameter 'token' when calling commonTokenRefreshingGet"));
    }
    
    // verify the required parameter 'refreshToken' is set
    if (refreshToken == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'refreshToken' when calling commonTokenRefreshingGet",
         new ApiException(400, "Missing the required parameter 'refreshToken' when calling commonTokenRefreshingGet"));
    }
    

    // create path and map variables
    String path = "/common/token_refreshing".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "token", token));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "refresh_token", refreshToken));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 生成追踪链接
  * 生成追踪链接 
   * @param url 原始Url地址
   * @param affiliate 联盟id
   * @param storeCode 商家在联盟的唯一码
   * @param linkPrefix 联盟跟踪地址前缀
   * @param storeId 商家ID
   * @param website 商家官网
   * @param dealUsername 优惠编辑用户名
   * @return LinkGeneratorModel
  */
  public LinkGeneratorModel commonTrackLinkGeneratingPost (String url, String affiliate, String storeCode, String linkPrefix, String storeId, String website, String dealUsername) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'url' is set
      if (url == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'url' when calling commonTrackLinkGeneratingPost",
      new ApiException(400, "Missing the required parameter 'url' when calling commonTrackLinkGeneratingPost"));
      }
  
      // verify the required parameter 'affiliate' is set
      if (affiliate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'affiliate' when calling commonTrackLinkGeneratingPost",
      new ApiException(400, "Missing the required parameter 'affiliate' when calling commonTrackLinkGeneratingPost"));
      }
  
      // verify the required parameter 'storeCode' is set
      if (storeCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'storeCode' when calling commonTrackLinkGeneratingPost",
      new ApiException(400, "Missing the required parameter 'storeCode' when calling commonTrackLinkGeneratingPost"));
      }
  
      // verify the required parameter 'linkPrefix' is set
      if (linkPrefix == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'linkPrefix' when calling commonTrackLinkGeneratingPost",
      new ApiException(400, "Missing the required parameter 'linkPrefix' when calling commonTrackLinkGeneratingPost"));
      }
  
      // verify the required parameter 'storeId' is set
      if (storeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling commonTrackLinkGeneratingPost",
      new ApiException(400, "Missing the required parameter 'storeId' when calling commonTrackLinkGeneratingPost"));
      }
  
      // verify the required parameter 'website' is set
      if (website == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'website' when calling commonTrackLinkGeneratingPost",
      new ApiException(400, "Missing the required parameter 'website' when calling commonTrackLinkGeneratingPost"));
      }
  

  // create path and map variables
  String path = "/common/track_link/generating".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (url != null) {
          localVarBuilder.addTextBody("url", ApiInvoker.parameterToString(url), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (affiliate != null) {
          localVarBuilder.addTextBody("affiliate", ApiInvoker.parameterToString(affiliate), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (storeCode != null) {
          localVarBuilder.addTextBody("store_code", ApiInvoker.parameterToString(storeCode), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (linkPrefix != null) {
          localVarBuilder.addTextBody("link_prefix", ApiInvoker.parameterToString(linkPrefix), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (storeId != null) {
          localVarBuilder.addTextBody("store_id", ApiInvoker.parameterToString(storeId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (website != null) {
          localVarBuilder.addTextBody("website", ApiInvoker.parameterToString(website), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (dealUsername != null) {
          localVarBuilder.addTextBody("deal_username", ApiInvoker.parameterToString(dealUsername), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("url", ApiInvoker.parameterToString(url));
formParams.put("affiliate", ApiInvoker.parameterToString(affiliate));
formParams.put("store_code", ApiInvoker.parameterToString(storeCode));
formParams.put("link_prefix", ApiInvoker.parameterToString(linkPrefix));
formParams.put("store_id", ApiInvoker.parameterToString(storeId));
formParams.put("website", ApiInvoker.parameterToString(website));
formParams.put("deal_username", ApiInvoker.parameterToString(dealUsername));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (LinkGeneratorModel) ApiInvoker.deserialize(localVarResponse, "", LinkGeneratorModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 生成追踪链接
   * 生成追踪链接 
   * @param url 原始Url地址   * @param affiliate 联盟id   * @param storeCode 商家在联盟的唯一码   * @param linkPrefix 联盟跟踪地址前缀   * @param storeId 商家ID   * @param website 商家官网   * @param dealUsername 优惠编辑用户名
  */
  public void commonTrackLinkGeneratingPost (String url, String affiliate, String storeCode, String linkPrefix, String storeId, String website, String dealUsername, final Response.Listener<LinkGeneratorModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'url' is set
    if (url == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'url' when calling commonTrackLinkGeneratingPost",
         new ApiException(400, "Missing the required parameter 'url' when calling commonTrackLinkGeneratingPost"));
    }
    
    // verify the required parameter 'affiliate' is set
    if (affiliate == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'affiliate' when calling commonTrackLinkGeneratingPost",
         new ApiException(400, "Missing the required parameter 'affiliate' when calling commonTrackLinkGeneratingPost"));
    }
    
    // verify the required parameter 'storeCode' is set
    if (storeCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'storeCode' when calling commonTrackLinkGeneratingPost",
         new ApiException(400, "Missing the required parameter 'storeCode' when calling commonTrackLinkGeneratingPost"));
    }
    
    // verify the required parameter 'linkPrefix' is set
    if (linkPrefix == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'linkPrefix' when calling commonTrackLinkGeneratingPost",
         new ApiException(400, "Missing the required parameter 'linkPrefix' when calling commonTrackLinkGeneratingPost"));
    }
    
    // verify the required parameter 'storeId' is set
    if (storeId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling commonTrackLinkGeneratingPost",
         new ApiException(400, "Missing the required parameter 'storeId' when calling commonTrackLinkGeneratingPost"));
    }
    
    // verify the required parameter 'website' is set
    if (website == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'website' when calling commonTrackLinkGeneratingPost",
         new ApiException(400, "Missing the required parameter 'website' when calling commonTrackLinkGeneratingPost"));
    }
    

    // create path and map variables
    String path = "/common/track_link/generating".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (url != null) {
        localVarBuilder.addTextBody("url", ApiInvoker.parameterToString(url), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (affiliate != null) {
        localVarBuilder.addTextBody("affiliate", ApiInvoker.parameterToString(affiliate), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (storeCode != null) {
        localVarBuilder.addTextBody("store_code", ApiInvoker.parameterToString(storeCode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (linkPrefix != null) {
        localVarBuilder.addTextBody("link_prefix", ApiInvoker.parameterToString(linkPrefix), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (storeId != null) {
        localVarBuilder.addTextBody("store_id", ApiInvoker.parameterToString(storeId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (website != null) {
        localVarBuilder.addTextBody("website", ApiInvoker.parameterToString(website), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (dealUsername != null) {
        localVarBuilder.addTextBody("deal_username", ApiInvoker.parameterToString(dealUsername), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("url", ApiInvoker.parameterToString(url));
formParams.put("affiliate", ApiInvoker.parameterToString(affiliate));
formParams.put("store_code", ApiInvoker.parameterToString(storeCode));
formParams.put("link_prefix", ApiInvoker.parameterToString(linkPrefix));
formParams.put("store_id", ApiInvoker.parameterToString(storeId));
formParams.put("website", ApiInvoker.parameterToString(website));
formParams.put("deal_username", ApiInvoker.parameterToString(dealUsername));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((LinkGeneratorModel) ApiInvoker.deserialize(localVarResponse,  "", LinkGeneratorModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 获取极验初始化参数
  * 图片验证码 
   * @return GeetestParamsModel
  */
  public GeetestParamsModel commonVerifyingCodeGeetestParamsGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/common/verifying_code/geetest/params".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (GeetestParamsModel) ApiInvoker.deserialize(localVarResponse, "", GeetestParamsModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 获取极验初始化参数
   * 图片验证码 

  */
  public void commonVerifyingCodeGeetestParamsGet (final Response.Listener<GeetestParamsModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/common/verifying_code/geetest/params".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((GeetestParamsModel) ApiInvoker.deserialize(localVarResponse,  "", GeetestParamsModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 图片验证码
  * 图片验证码 
   * @param deviceId 设备号
   * @return String
  */
  public String commonVerifyingCodeImageGet (String deviceId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'deviceId' is set
      if (deviceId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'deviceId' when calling commonVerifyingCodeImageGet",
      new ApiException(400, "Missing the required parameter 'deviceId' when calling commonVerifyingCodeImageGet"));
      }
  

  // create path and map variables
  String path = "/common/verifying_code/image".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "device_id", deviceId));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (String) ApiInvoker.deserialize(localVarResponse, "", String.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 图片验证码
   * 图片验证码 
   * @param deviceId 设备号
  */
  public void commonVerifyingCodeImageGet (String deviceId, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'deviceId' is set
    if (deviceId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'deviceId' when calling commonVerifyingCodeImageGet",
         new ApiException(400, "Missing the required parameter 'deviceId' when calling commonVerifyingCodeImageGet"));
    }
    

    // create path and map variables
    String path = "/common/verifying_code/image".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "device_id", deviceId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((String) ApiInvoker.deserialize(localVarResponse,  "", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 发送短信验证码
  * 发送短信验证码 
   * @param areaCode 国际区号
   * @param phoneNumber 电话号码
   * @param type 验证码类型 - 0：绑定手机；1：找回密码；2：修改提现密码；3：申请提现
   * @param geetestChallenge geetest参数
   * @param geetestValidate geetest参数
   * @param geetestSeccode geetest参数
   * @return SuccessModel
  */
  public SuccessModel commonVerifyingCodeMobileSmsPost (String areaCode, String phoneNumber, String type, String geetestChallenge, String geetestValidate, String geetestSeccode) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'areaCode' is set
      if (areaCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'areaCode' when calling commonVerifyingCodeMobileSmsPost",
      new ApiException(400, "Missing the required parameter 'areaCode' when calling commonVerifyingCodeMobileSmsPost"));
      }
  
      // verify the required parameter 'phoneNumber' is set
      if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling commonVerifyingCodeMobileSmsPost",
      new ApiException(400, "Missing the required parameter 'phoneNumber' when calling commonVerifyingCodeMobileSmsPost"));
      }
  

  // create path and map variables
  String path = "/common/verifying_code/mobile/sms".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (areaCode != null) {
          localVarBuilder.addTextBody("area_code", ApiInvoker.parameterToString(areaCode), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (phoneNumber != null) {
          localVarBuilder.addTextBody("phone_number", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (type != null) {
          localVarBuilder.addTextBody("type", ApiInvoker.parameterToString(type), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (geetestChallenge != null) {
          localVarBuilder.addTextBody("geetest_challenge", ApiInvoker.parameterToString(geetestChallenge), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (geetestValidate != null) {
          localVarBuilder.addTextBody("geetest_validate", ApiInvoker.parameterToString(geetestValidate), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (geetestSeccode != null) {
          localVarBuilder.addTextBody("geetest_seccode", ApiInvoker.parameterToString(geetestSeccode), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("area_code", ApiInvoker.parameterToString(areaCode));
formParams.put("phone_number", ApiInvoker.parameterToString(phoneNumber));
formParams.put("type", ApiInvoker.parameterToString(type));
formParams.put("geetest_challenge", ApiInvoker.parameterToString(geetestChallenge));
formParams.put("geetest_validate", ApiInvoker.parameterToString(geetestValidate));
formParams.put("geetest_seccode", ApiInvoker.parameterToString(geetestSeccode));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 发送短信验证码
   * 发送短信验证码 
   * @param areaCode 国际区号   * @param phoneNumber 电话号码   * @param type 验证码类型 - 0：绑定手机；1：找回密码；2：修改提现密码；3：申请提现   * @param geetestChallenge geetest参数   * @param geetestValidate geetest参数   * @param geetestSeccode geetest参数
  */
  public void commonVerifyingCodeMobileSmsPost (String areaCode, String phoneNumber, String type, String geetestChallenge, String geetestValidate, String geetestSeccode, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'areaCode' is set
    if (areaCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'areaCode' when calling commonVerifyingCodeMobileSmsPost",
         new ApiException(400, "Missing the required parameter 'areaCode' when calling commonVerifyingCodeMobileSmsPost"));
    }
    
    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling commonVerifyingCodeMobileSmsPost",
         new ApiException(400, "Missing the required parameter 'phoneNumber' when calling commonVerifyingCodeMobileSmsPost"));
    }
    

    // create path and map variables
    String path = "/common/verifying_code/mobile/sms".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (areaCode != null) {
        localVarBuilder.addTextBody("area_code", ApiInvoker.parameterToString(areaCode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (phoneNumber != null) {
        localVarBuilder.addTextBody("phone_number", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (type != null) {
        localVarBuilder.addTextBody("type", ApiInvoker.parameterToString(type), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (geetestChallenge != null) {
        localVarBuilder.addTextBody("geetest_challenge", ApiInvoker.parameterToString(geetestChallenge), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (geetestValidate != null) {
        localVarBuilder.addTextBody("geetest_validate", ApiInvoker.parameterToString(geetestValidate), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (geetestSeccode != null) {
        localVarBuilder.addTextBody("geetest_seccode", ApiInvoker.parameterToString(geetestSeccode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("area_code", ApiInvoker.parameterToString(areaCode));
formParams.put("phone_number", ApiInvoker.parameterToString(phoneNumber));
formParams.put("type", ApiInvoker.parameterToString(type));
formParams.put("geetest_challenge", ApiInvoker.parameterToString(geetestChallenge));
formParams.put("geetest_validate", ApiInvoker.parameterToString(geetestValidate));
formParams.put("geetest_seccode", ApiInvoker.parameterToString(geetestSeccode));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 提现支持开户行列表
  * 提现支持开户行列表 
   * @return BanksIfModel
  */
  public BanksIfModel commonWithdrawingCooperativeBanksGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/common/withdrawing/cooperative_banks".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (BanksIfModel) ApiInvoker.deserialize(localVarResponse, "", BanksIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 提现支持开户行列表
   * 提现支持开户行列表 

  */
  public void commonWithdrawingCooperativeBanksGet (final Response.Listener<BanksIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/common/withdrawing/cooperative_banks".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BanksIfModel) ApiInvoker.deserialize(localVarResponse,  "", BanksIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 提现方式列表
  * 提现方式列表 
   * @return WithdrawingModesModel
  */
  public WithdrawingModesModel commonWithdrawingModesGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/common/withdrawing/modes".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (WithdrawingModesModel) ApiInvoker.deserialize(localVarResponse, "", WithdrawingModesModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 提现方式列表
   * 提现方式列表 

  */
  public void commonWithdrawingModesGet (final Response.Listener<WithdrawingModesModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/common/withdrawing/modes".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((WithdrawingModesModel) ApiInvoker.deserialize(localVarResponse,  "", WithdrawingModesModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 优惠分类
  * 优惠分类 
   * @return DealCategoriesModel
  */
  public DealCategoriesModel dealCategoriesGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/deal/categories".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (DealCategoriesModel) ApiInvoker.deserialize(localVarResponse, "", DealCategoriesModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 优惠分类
   * 优惠分类 

  */
  public void dealCategoriesGet (final Response.Listener<DealCategoriesModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/deal/categories".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DealCategoriesModel) ApiInvoker.deserialize(localVarResponse,  "", DealCategoriesModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 分类优惠列表（分页）
  * 分类优惠列表 
   * @param categoryId 分类ID 10001：单品优惠 10002：最新优惠 10003：优惠排行 或者其它从数据库里获取的分类ID
   * @param excludedIds 排除的优惠id 用,号分隔（去重用）
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return DealsListWithAdsModel
  */
  public DealsListWithAdsModel dealCategoryCategoryIdListGet (String categoryId, String excludedIds, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'categoryId' is set
      if (categoryId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'categoryId' when calling dealCategoryCategoryIdListGet",
      new ApiException(400, "Missing the required parameter 'categoryId' when calling dealCategoryCategoryIdListGet"));
      }
  

  // create path and map variables
  String path = "/deal/category/{category_id}/list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "category_id" + "\\}", apiInvoker.escapeString(categoryId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "excluded_ids", excludedIds));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (DealsListWithAdsModel) ApiInvoker.deserialize(localVarResponse, "", DealsListWithAdsModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 分类优惠列表（分页）
   * 分类优惠列表 
   * @param categoryId 分类ID 10001：单品优惠 10002：最新优惠 10003：优惠排行 或者其它从数据库里获取的分类ID   * @param excludedIds 排除的优惠id 用,号分隔（去重用）   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void dealCategoryCategoryIdListGet (String categoryId, String excludedIds, String pageNum, String pageSize, final Response.Listener<DealsListWithAdsModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'categoryId' is set
    if (categoryId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'categoryId' when calling dealCategoryCategoryIdListGet",
         new ApiException(400, "Missing the required parameter 'categoryId' when calling dealCategoryCategoryIdListGet"));
    }
    

    // create path and map variables
    String path = "/deal/category/{category_id}/list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "category_id" + "\\}", apiInvoker.escapeString(categoryId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "excluded_ids", excludedIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DealsListWithAdsModel) ApiInvoker.deserialize(localVarResponse,  "", DealsListWithAdsModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 优惠日报列表
  * 优惠日报列表 
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return DealDailiesListModel
  */
  public DealDailiesListModel dealDailiesListGet (String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/deal/dailies_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (DealDailiesListModel) ApiInvoker.deserialize(localVarResponse, "", DealDailiesListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 优惠日报列表
   * 优惠日报列表 
   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void dealDailiesListGet (String pageNum, String pageSize, final Response.Listener<DealDailiesListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/deal/dailies_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DealDailiesListModel) ApiInvoker.deserialize(localVarResponse,  "", DealDailiesListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 累加优惠购买次数
  * 累加优惠购买次数 
   * @param dealId 优惠ID
   * @return SuccessModel
  */
  public SuccessModel dealDealIdAccumBuyCountGet (String dealId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'dealId' is set
      if (dealId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dealId' when calling dealDealIdAccumBuyCountGet",
      new ApiException(400, "Missing the required parameter 'dealId' when calling dealDealIdAccumBuyCountGet"));
      }
  

  // create path and map variables
  String path = "/deal/{deal_id}/accum_buy_count".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deal_id" + "\\}", apiInvoker.escapeString(dealId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 累加优惠购买次数
   * 累加优惠购买次数 
   * @param dealId 优惠ID
  */
  public void dealDealIdAccumBuyCountGet (String dealId, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'dealId' is set
    if (dealId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'dealId' when calling dealDealIdAccumBuyCountGet",
         new ApiException(400, "Missing the required parameter 'dealId' when calling dealDealIdAccumBuyCountGet"));
    }
    

    // create path and map variables
    String path = "/deal/{deal_id}/accum_buy_count".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deal_id" + "\\}", apiInvoker.escapeString(dealId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 优惠简要信息
  * 优惠简要信息 
   * @param dealId 优惠ID
   * @param recommendedDealsCount 推荐的优惠数
   * @return DealExtraIfModel
  */
  public DealExtraIfModel dealDealIdBriefGet (String dealId, String recommendedDealsCount) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'dealId' is set
      if (dealId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dealId' when calling dealDealIdBriefGet",
      new ApiException(400, "Missing the required parameter 'dealId' when calling dealDealIdBriefGet"));
      }
  

  // create path and map variables
  String path = "/deal/{deal_id}/brief".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deal_id" + "\\}", apiInvoker.escapeString(dealId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "recommended_deals_count", recommendedDealsCount));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (DealExtraIfModel) ApiInvoker.deserialize(localVarResponse, "", DealExtraIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 优惠简要信息
   * 优惠简要信息 
   * @param dealId 优惠ID   * @param recommendedDealsCount 推荐的优惠数
  */
  public void dealDealIdBriefGet (String dealId, String recommendedDealsCount, final Response.Listener<DealExtraIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'dealId' is set
    if (dealId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'dealId' when calling dealDealIdBriefGet",
         new ApiException(400, "Missing the required parameter 'dealId' when calling dealDealIdBriefGet"));
    }
    

    // create path and map variables
    String path = "/deal/{deal_id}/brief".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deal_id" + "\\}", apiInvoker.escapeString(dealId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "recommended_deals_count", recommendedDealsCount));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DealExtraIfModel) ApiInvoker.deserialize(localVarResponse,  "", DealExtraIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 新增优惠评论
  * 优惠评论 
   * @param dealId 优惠ID
   * @param content 评论内容
   * @param replyCommentId 回复评论的ID
   * @return CommentSuccessIfModel
  */
  public CommentSuccessIfModel dealDealIdCommentPost (String dealId, String content, String replyCommentId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'dealId' is set
      if (dealId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dealId' when calling dealDealIdCommentPost",
      new ApiException(400, "Missing the required parameter 'dealId' when calling dealDealIdCommentPost"));
      }
  
      // verify the required parameter 'content' is set
      if (content == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'content' when calling dealDealIdCommentPost",
      new ApiException(400, "Missing the required parameter 'content' when calling dealDealIdCommentPost"));
      }
  

  // create path and map variables
  String path = "/deal/{deal_id}/comment".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deal_id" + "\\}", apiInvoker.escapeString(dealId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (replyCommentId != null) {
          localVarBuilder.addTextBody("reply_comment_id", ApiInvoker.parameterToString(replyCommentId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (content != null) {
          localVarBuilder.addTextBody("content", ApiInvoker.parameterToString(content), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("reply_comment_id", ApiInvoker.parameterToString(replyCommentId));
formParams.put("content", ApiInvoker.parameterToString(content));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (CommentSuccessIfModel) ApiInvoker.deserialize(localVarResponse, "", CommentSuccessIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 新增优惠评论
   * 优惠评论 
   * @param dealId 优惠ID   * @param content 评论内容   * @param replyCommentId 回复评论的ID
  */
  public void dealDealIdCommentPost (String dealId, String content, String replyCommentId, final Response.Listener<CommentSuccessIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'dealId' is set
    if (dealId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'dealId' when calling dealDealIdCommentPost",
         new ApiException(400, "Missing the required parameter 'dealId' when calling dealDealIdCommentPost"));
    }
    
    // verify the required parameter 'content' is set
    if (content == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'content' when calling dealDealIdCommentPost",
         new ApiException(400, "Missing the required parameter 'content' when calling dealDealIdCommentPost"));
    }
    

    // create path and map variables
    String path = "/deal/{deal_id}/comment".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deal_id" + "\\}", apiInvoker.escapeString(dealId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (replyCommentId != null) {
        localVarBuilder.addTextBody("reply_comment_id", ApiInvoker.parameterToString(replyCommentId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (content != null) {
        localVarBuilder.addTextBody("content", ApiInvoker.parameterToString(content), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("reply_comment_id", ApiInvoker.parameterToString(replyCommentId));
formParams.put("content", ApiInvoker.parameterToString(content));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CommentSuccessIfModel) ApiInvoker.deserialize(localVarResponse,  "", CommentSuccessIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 优惠详情接口
  * 优惠详情、九宫格、相关标签数据 
   * @param dealId 优惠id
   * @return DealDetailModel
  */
  public DealDetailModel dealDealIdDealdetailGet (String dealId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'dealId' is set
      if (dealId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dealId' when calling dealDealIdDealdetailGet",
      new ApiException(400, "Missing the required parameter 'dealId' when calling dealDealIdDealdetailGet"));
      }
  

  // create path and map variables
  String path = "/deal/{deal_id}/dealdetail".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deal_id" + "\\}", apiInvoker.escapeString(dealId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (DealDetailModel) ApiInvoker.deserialize(localVarResponse, "", DealDetailModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 优惠详情接口
   * 优惠详情、九宫格、相关标签数据 
   * @param dealId 优惠id
  */
  public void dealDealIdDealdetailGet (String dealId, final Response.Listener<DealDetailModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'dealId' is set
    if (dealId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'dealId' when calling dealDealIdDealdetailGet",
         new ApiException(400, "Missing the required parameter 'dealId' when calling dealDealIdDealdetailGet"));
    }
    

    // create path and map variables
    String path = "/deal/{deal_id}/dealdetail".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deal_id" + "\\}", apiInvoker.escapeString(dealId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DealDetailModel) ApiInvoker.deserialize(localVarResponse,  "", DealDetailModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 优惠推广信息接口
  * 优惠推广信息接口 
   * @param dealId 优惠id
   * @return DealPublicityIfModel
  */
  public DealPublicityIfModel dealDealIdPublicityGet (String dealId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'dealId' is set
      if (dealId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dealId' when calling dealDealIdPublicityGet",
      new ApiException(400, "Missing the required parameter 'dealId' when calling dealDealIdPublicityGet"));
      }
  

  // create path and map variables
  String path = "/deal/{deal_id}/publicity".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deal_id" + "\\}", apiInvoker.escapeString(dealId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (DealPublicityIfModel) ApiInvoker.deserialize(localVarResponse, "", DealPublicityIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 优惠推广信息接口
   * 优惠推广信息接口 
   * @param dealId 优惠id
  */
  public void dealDealIdPublicityGet (String dealId, final Response.Listener<DealPublicityIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'dealId' is set
    if (dealId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'dealId' when calling dealDealIdPublicityGet",
         new ApiException(400, "Missing the required parameter 'dealId' when calling dealDealIdPublicityGet"));
    }
    

    // create path and map variables
    String path = "/deal/{deal_id}/publicity".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deal_id" + "\\}", apiInvoker.escapeString(dealId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DealPublicityIfModel) ApiInvoker.deserialize(localVarResponse,  "", DealPublicityIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 相关优惠
  * 相关优惠列表 
   * @param dealId 优惠id
   * @return DealsModel
  */
  public DealsModel dealDealIdRelatedDealsGet (String dealId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'dealId' is set
      if (dealId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dealId' when calling dealDealIdRelatedDealsGet",
      new ApiException(400, "Missing the required parameter 'dealId' when calling dealDealIdRelatedDealsGet"));
      }
  

  // create path and map variables
  String path = "/deal/{deal_id}/related/deals".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deal_id" + "\\}", apiInvoker.escapeString(dealId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (DealsModel) ApiInvoker.deserialize(localVarResponse, "", DealsModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 相关优惠
   * 相关优惠列表 
   * @param dealId 优惠id
  */
  public void dealDealIdRelatedDealsGet (String dealId, final Response.Listener<DealsModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'dealId' is set
    if (dealId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'dealId' when calling dealDealIdRelatedDealsGet",
         new ApiException(400, "Missing the required parameter 'dealId' when calling dealDealIdRelatedDealsGet"));
    }
    

    // create path and map variables
    String path = "/deal/{deal_id}/related/deals".replaceAll("\\{format\\}","json").replaceAll("\\{" + "deal_id" + "\\}", apiInvoker.escapeString(dealId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DealsModel) ApiInvoker.deserialize(localVarResponse,  "", DealsModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 最新优惠
  * 最新优惠 
   * @param newestDealsCount 优惠 - 最新优惠类别 - 下方显示的最新优惠的条目数
   * @param specialsCount 优惠 - 最新优惠类别 - 获取多少个专题
   * @param topDealsCount 优惠 - 获取置顶优惠条目数
   * @return DealIndexModel
  */
  public DealIndexModel dealIndexGet (String newestDealsCount, String specialsCount, String topDealsCount) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/deal/index".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "newest_deals_count", newestDealsCount));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "specials_count", specialsCount));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "top_deals_count", topDealsCount));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (DealIndexModel) ApiInvoker.deserialize(localVarResponse, "", DealIndexModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 最新优惠
   * 最新优惠 
   * @param newestDealsCount 优惠 - 最新优惠类别 - 下方显示的最新优惠的条目数   * @param specialsCount 优惠 - 最新优惠类别 - 获取多少个专题   * @param topDealsCount 优惠 - 获取置顶优惠条目数
  */
  public void dealIndexGet (String newestDealsCount, String specialsCount, String topDealsCount, final Response.Listener<DealIndexModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/deal/index".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "newest_deals_count", newestDealsCount));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "specials_count", specialsCount));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "top_deals_count", topDealsCount));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DealIndexModel) ApiInvoker.deserialize(localVarResponse,  "", DealIndexModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 24小时优惠排行分页
  * 24小时优惠排行分页 
   * @param almostExpire 过滤参数：即将过期 1表示选中 0或留空表示未选中
   * @param transshippingSupported 过滤参数：支持转运 1表示选中 0或留空表示未选中
   * @param alipaySupported 过滤参数：支持支付宝 1表示选中 0或留空表示未选中
   * @param categoryId 分类ID
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return In24hDealsListModel
  */
  public In24hDealsListModel dealMostPopularIn24hDealsListGet (String almostExpire, String transshippingSupported, String alipaySupported, String categoryId, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/deal/most_popular_in24h_deals_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "almost_expire", almostExpire));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "transshipping_supported", transshippingSupported));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "alipay_supported", alipaySupported));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "category_id", categoryId));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (In24hDealsListModel) ApiInvoker.deserialize(localVarResponse, "", In24hDealsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 24小时优惠排行分页
   * 24小时优惠排行分页 
   * @param almostExpire 过滤参数：即将过期 1表示选中 0或留空表示未选中   * @param transshippingSupported 过滤参数：支持转运 1表示选中 0或留空表示未选中   * @param alipaySupported 过滤参数：支持支付宝 1表示选中 0或留空表示未选中   * @param categoryId 分类ID   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void dealMostPopularIn24hDealsListGet (String almostExpire, String transshippingSupported, String alipaySupported, String categoryId, String pageNum, String pageSize, final Response.Listener<In24hDealsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/deal/most_popular_in24h_deals_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "almost_expire", almostExpire));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "transshipping_supported", transshippingSupported));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "alipay_supported", alipaySupported));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "category_id", categoryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((In24hDealsListModel) ApiInvoker.deserialize(localVarResponse,  "", In24hDealsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 优惠落地页信息接口
  * 优惠落地页信息接口 
   * @param id ID
   * @param type 跳转类型 - 1：从优惠跳转 2：从商家跳转
   * @return ReachedStoreIfModel
  */
  public ReachedStoreIfModel dealReachedStoreInfoGet (String id, String type) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'id' is set
      if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling dealReachedStoreInfoGet",
      new ApiException(400, "Missing the required parameter 'id' when calling dealReachedStoreInfoGet"));
      }
  
      // verify the required parameter 'type' is set
      if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling dealReachedStoreInfoGet",
      new ApiException(400, "Missing the required parameter 'type' when calling dealReachedStoreInfoGet"));
      }
  

  // create path and map variables
  String path = "/deal/reached_store_info".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ReachedStoreIfModel) ApiInvoker.deserialize(localVarResponse, "", ReachedStoreIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 优惠落地页信息接口
   * 优惠落地页信息接口 
   * @param id ID   * @param type 跳转类型 - 1：从优惠跳转 2：从商家跳转
  */
  public void dealReachedStoreInfoGet (String id, String type, final Response.Listener<ReachedStoreIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling dealReachedStoreInfoGet",
         new ApiException(400, "Missing the required parameter 'id' when calling dealReachedStoreInfoGet"));
    }
    
    // verify the required parameter 'type' is set
    if (type == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'type' when calling dealReachedStoreInfoGet",
         new ApiException(400, "Missing the required parameter 'type' when calling dealReachedStoreInfoGet"));
    }
    

    // create path and map variables
    String path = "/deal/reached_store_info".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ReachedStoreIfModel) ApiInvoker.deserialize(localVarResponse,  "", ReachedStoreIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 优惠或商家跳转页
  * 优惠或商家跳转页 
   * @param type 跳转类型 - 1：优惠跳转 2:商家跳转
   * @param id 跳转目标数据ID
   * @return ShoppingJumpingPageIfModel
  */
  public ShoppingJumpingPageIfModel dealShoppingJumpingPageGet (String type, String id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'type' is set
      if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling dealShoppingJumpingPageGet",
      new ApiException(400, "Missing the required parameter 'type' when calling dealShoppingJumpingPageGet"));
      }
  
      // verify the required parameter 'id' is set
      if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling dealShoppingJumpingPageGet",
      new ApiException(400, "Missing the required parameter 'id' when calling dealShoppingJumpingPageGet"));
      }
  

  // create path and map variables
  String path = "/deal/shopping_jumping_page".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ShoppingJumpingPageIfModel) ApiInvoker.deserialize(localVarResponse, "", ShoppingJumpingPageIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 优惠或商家跳转页
   * 优惠或商家跳转页 
   * @param type 跳转类型 - 1：优惠跳转 2:商家跳转   * @param id 跳转目标数据ID
  */
  public void dealShoppingJumpingPageGet (String type, String id, final Response.Listener<ShoppingJumpingPageIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'type' is set
    if (type == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'type' when calling dealShoppingJumpingPageGet",
         new ApiException(400, "Missing the required parameter 'type' when calling dealShoppingJumpingPageGet"));
    }
    
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling dealShoppingJumpingPageGet",
         new ApiException(400, "Missing the required parameter 'id' when calling dealShoppingJumpingPageGet"));
    }
    

    // create path and map variables
    String path = "/deal/shopping_jumping_page".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ShoppingJumpingPageIfModel) ApiInvoker.deserialize(localVarResponse,  "", ShoppingJumpingPageIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 优惠或商家评论列表
  * 评论列表 
   * @param id 优惠或商家的id
   * @param type 类型：d 优惠 s 商家 t 转运
   * @param order 排序: new 按最新排序 hot 按最热排序
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return CommentsListModel
  */
  public CommentsListModel dealStoreCommentsListGet (String id, String type, String order, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'id' is set
      if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling dealStoreCommentsListGet",
      new ApiException(400, "Missing the required parameter 'id' when calling dealStoreCommentsListGet"));
      }
  
      // verify the required parameter 'type' is set
      if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling dealStoreCommentsListGet",
      new ApiException(400, "Missing the required parameter 'type' when calling dealStoreCommentsListGet"));
      }
  

  // create path and map variables
  String path = "/deal/store/comments_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (CommentsListModel) ApiInvoker.deserialize(localVarResponse, "", CommentsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 优惠或商家评论列表
   * 评论列表 
   * @param id 优惠或商家的id   * @param type 类型：d 优惠 s 商家 t 转运   * @param order 排序: new 按最新排序 hot 按最热排序   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void dealStoreCommentsListGet (String id, String type, String order, String pageNum, String pageSize, final Response.Listener<CommentsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling dealStoreCommentsListGet",
         new ApiException(400, "Missing the required parameter 'id' when calling dealStoreCommentsListGet"));
    }
    
    // verify the required parameter 'type' is set
    if (type == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'type' when calling dealStoreCommentsListGet",
         new ApiException(400, "Missing the required parameter 'type' when calling dealStoreCommentsListGet"));
    }
    

    // create path and map variables
    String path = "/deal/store/comments_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order", order));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CommentsListModel) ApiInvoker.deserialize(localVarResponse,  "", CommentsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 优惠错误反馈
  * 优惠错误反馈 
   * @param dealId 优惠ID
   * @param type 错误类型1链接错误2价格不正确3商品缺货4其他
   * @param description 问题描述
   * @return SuccessModel
  */
  public SuccessModel dealUserFeedbackPost (String dealId, String type, String description) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'dealId' is set
      if (dealId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dealId' when calling dealUserFeedbackPost",
      new ApiException(400, "Missing the required parameter 'dealId' when calling dealUserFeedbackPost"));
      }
  
      // verify the required parameter 'type' is set
      if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling dealUserFeedbackPost",
      new ApiException(400, "Missing the required parameter 'type' when calling dealUserFeedbackPost"));
      }
  

  // create path and map variables
  String path = "/deal/user_feedback".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (dealId != null) {
          localVarBuilder.addTextBody("deal_id", ApiInvoker.parameterToString(dealId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (type != null) {
          localVarBuilder.addTextBody("type", ApiInvoker.parameterToString(type), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (description != null) {
          localVarBuilder.addTextBody("description", ApiInvoker.parameterToString(description), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("deal_id", ApiInvoker.parameterToString(dealId));
formParams.put("type", ApiInvoker.parameterToString(type));
formParams.put("description", ApiInvoker.parameterToString(description));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 优惠错误反馈
   * 优惠错误反馈 
   * @param dealId 优惠ID   * @param type 错误类型1链接错误2价格不正确3商品缺货4其他   * @param description 问题描述
  */
  public void dealUserFeedbackPost (String dealId, String type, String description, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'dealId' is set
    if (dealId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'dealId' when calling dealUserFeedbackPost",
         new ApiException(400, "Missing the required parameter 'dealId' when calling dealUserFeedbackPost"));
    }
    
    // verify the required parameter 'type' is set
    if (type == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'type' when calling dealUserFeedbackPost",
         new ApiException(400, "Missing the required parameter 'type' when calling dealUserFeedbackPost"));
    }
    

    // create path and map variables
    String path = "/deal/user_feedback".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (dealId != null) {
        localVarBuilder.addTextBody("deal_id", ApiInvoker.parameterToString(dealId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (type != null) {
        localVarBuilder.addTextBody("type", ApiInvoker.parameterToString(type), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (description != null) {
        localVarBuilder.addTextBody("description", ApiInvoker.parameterToString(description), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("deal_id", ApiInvoker.parameterToString(dealId));
formParams.put("type", ApiInvoker.parameterToString(type));
formParams.put("description", ApiInvoker.parameterToString(description));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 论坛版块首页
  * 版块详情 
   * @param boardId 版块ID
   * @param topTopicsCount 显示置顶帖数
   * @return ForumBoardIndexModel
  */
  public ForumBoardIndexModel forumBoardBoardIdIndexGet (String boardId, String topTopicsCount) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'boardId' is set
      if (boardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling forumBoardBoardIdIndexGet",
      new ApiException(400, "Missing the required parameter 'boardId' when calling forumBoardBoardIdIndexGet"));
      }
  

  // create path and map variables
  String path = "/forum/board/{board_id}/index".replaceAll("\\{format\\}","json").replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "top_topics_count", topTopicsCount));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ForumBoardIndexModel) ApiInvoker.deserialize(localVarResponse, "", ForumBoardIndexModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 论坛版块首页
   * 版块详情 
   * @param boardId 版块ID   * @param topTopicsCount 显示置顶帖数
  */
  public void forumBoardBoardIdIndexGet (String boardId, String topTopicsCount, final Response.Listener<ForumBoardIndexModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'boardId' is set
    if (boardId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling forumBoardBoardIdIndexGet",
         new ApiException(400, "Missing the required parameter 'boardId' when calling forumBoardBoardIdIndexGet"));
    }
    

    // create path and map variables
    String path = "/forum/board/{board_id}/index".replaceAll("\\{format\\}","json").replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "top_topics_count", topTopicsCount));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ForumBoardIndexModel) ApiInvoker.deserialize(localVarResponse,  "", ForumBoardIndexModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 获取论坛子版块帖子列表（分页）
  * 获取论坛子版块帖子列表 
   * @param boardId 版块ID
   * @param subBoardId 子版块ID
   * @param topicOrder 主题排序方式 - 格式：field order 允许的字段名lastpost dateline，依据发帖时间排序：dateline desc, 依据最新回复排序lastpost desc 当格式不合法时以默认条件排序
   * @param pageNum 版块主题页码
   * @param pageSize 版块主题每页记录数
   * @return ForumBoardTopicsListModel
  */
  public ForumBoardTopicsListModel forumBoardBoardIdSubBoardSubBoardIdTopicsListGet (String boardId, String subBoardId, String topicOrder, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'boardId' is set
      if (boardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling forumBoardBoardIdSubBoardSubBoardIdTopicsListGet",
      new ApiException(400, "Missing the required parameter 'boardId' when calling forumBoardBoardIdSubBoardSubBoardIdTopicsListGet"));
      }
  
      // verify the required parameter 'subBoardId' is set
      if (subBoardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'subBoardId' when calling forumBoardBoardIdSubBoardSubBoardIdTopicsListGet",
      new ApiException(400, "Missing the required parameter 'subBoardId' when calling forumBoardBoardIdSubBoardSubBoardIdTopicsListGet"));
      }
  

  // create path and map variables
  String path = "/forum/board/{board_id}/sub_board/{sub_board_id}/topics_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString())).replaceAll("\\{" + "sub_board_id" + "\\}", apiInvoker.escapeString(subBoardId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "topic_order", topicOrder));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ForumBoardTopicsListModel) ApiInvoker.deserialize(localVarResponse, "", ForumBoardTopicsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 获取论坛子版块帖子列表（分页）
   * 获取论坛子版块帖子列表 
   * @param boardId 版块ID   * @param subBoardId 子版块ID   * @param topicOrder 主题排序方式 - 格式：field order 允许的字段名lastpost dateline，依据发帖时间排序：dateline desc, 依据最新回复排序lastpost desc 当格式不合法时以默认条件排序   * @param pageNum 版块主题页码   * @param pageSize 版块主题每页记录数
  */
  public void forumBoardBoardIdSubBoardSubBoardIdTopicsListGet (String boardId, String subBoardId, String topicOrder, String pageNum, String pageSize, final Response.Listener<ForumBoardTopicsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'boardId' is set
    if (boardId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling forumBoardBoardIdSubBoardSubBoardIdTopicsListGet",
         new ApiException(400, "Missing the required parameter 'boardId' when calling forumBoardBoardIdSubBoardSubBoardIdTopicsListGet"));
    }
    
    // verify the required parameter 'subBoardId' is set
    if (subBoardId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'subBoardId' when calling forumBoardBoardIdSubBoardSubBoardIdTopicsListGet",
         new ApiException(400, "Missing the required parameter 'subBoardId' when calling forumBoardBoardIdSubBoardSubBoardIdTopicsListGet"));
    }
    

    // create path and map variables
    String path = "/forum/board/{board_id}/sub_board/{sub_board_id}/topics_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString())).replaceAll("\\{" + "sub_board_id" + "\\}", apiInvoker.escapeString(subBoardId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "topic_order", topicOrder));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ForumBoardTopicsListModel) ApiInvoker.deserialize(localVarResponse,  "", ForumBoardTopicsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 发布帖子
  * 发帖 
   * @param boardId 版块ID
   * @param title 标题
   * @param content 内容
   * @param topicTypeId 帖子类别ID
   * @param pic1 帖子图片地址
   * @param pic2 帖子图片地址
   * @param pic3 帖子图片地址
   * @param pic4 帖子图片地址
   * @param pic5 帖子图片地址
   * @param pic6 帖子图片地址
   * @param pic7 帖子图片地址
   * @param pic8 帖子图片地址
   * @param pic9 帖子图片地址
   * @return AddTopicSuccessModel
  */
  public AddTopicSuccessModel forumBoardBoardIdTopicPost (String boardId, String title, String content, String topicTypeId, String pic1, String pic2, String pic3, String pic4, String pic5, String pic6, String pic7, String pic8, String pic9) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'boardId' is set
      if (boardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling forumBoardBoardIdTopicPost",
      new ApiException(400, "Missing the required parameter 'boardId' when calling forumBoardBoardIdTopicPost"));
      }
  
      // verify the required parameter 'title' is set
      if (title == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'title' when calling forumBoardBoardIdTopicPost",
      new ApiException(400, "Missing the required parameter 'title' when calling forumBoardBoardIdTopicPost"));
      }
  
      // verify the required parameter 'content' is set
      if (content == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'content' when calling forumBoardBoardIdTopicPost",
      new ApiException(400, "Missing the required parameter 'content' when calling forumBoardBoardIdTopicPost"));
      }
  

  // create path and map variables
  String path = "/forum/board/{board_id}/topic".replaceAll("\\{format\\}","json").replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (topicTypeId != null) {
          localVarBuilder.addTextBody("topic_type_id", ApiInvoker.parameterToString(topicTypeId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (title != null) {
          localVarBuilder.addTextBody("title", ApiInvoker.parameterToString(title), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (content != null) {
          localVarBuilder.addTextBody("content", ApiInvoker.parameterToString(content), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (pic1 != null) {
          localVarBuilder.addTextBody("pic1", ApiInvoker.parameterToString(pic1), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (pic2 != null) {
          localVarBuilder.addTextBody("pic2", ApiInvoker.parameterToString(pic2), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (pic3 != null) {
          localVarBuilder.addTextBody("pic3", ApiInvoker.parameterToString(pic3), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (pic4 != null) {
          localVarBuilder.addTextBody("pic4", ApiInvoker.parameterToString(pic4), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (pic5 != null) {
          localVarBuilder.addTextBody("pic5", ApiInvoker.parameterToString(pic5), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (pic6 != null) {
          localVarBuilder.addTextBody("pic6", ApiInvoker.parameterToString(pic6), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (pic7 != null) {
          localVarBuilder.addTextBody("pic7", ApiInvoker.parameterToString(pic7), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (pic8 != null) {
          localVarBuilder.addTextBody("pic8", ApiInvoker.parameterToString(pic8), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (pic9 != null) {
          localVarBuilder.addTextBody("pic9", ApiInvoker.parameterToString(pic9), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("topic_type_id", ApiInvoker.parameterToString(topicTypeId));
formParams.put("title", ApiInvoker.parameterToString(title));
formParams.put("content", ApiInvoker.parameterToString(content));
formParams.put("pic1", ApiInvoker.parameterToString(pic1));
formParams.put("pic2", ApiInvoker.parameterToString(pic2));
formParams.put("pic3", ApiInvoker.parameterToString(pic3));
formParams.put("pic4", ApiInvoker.parameterToString(pic4));
formParams.put("pic5", ApiInvoker.parameterToString(pic5));
formParams.put("pic6", ApiInvoker.parameterToString(pic6));
formParams.put("pic7", ApiInvoker.parameterToString(pic7));
formParams.put("pic8", ApiInvoker.parameterToString(pic8));
formParams.put("pic9", ApiInvoker.parameterToString(pic9));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (AddTopicSuccessModel) ApiInvoker.deserialize(localVarResponse, "", AddTopicSuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 发布帖子
   * 发帖 
   * @param boardId 版块ID   * @param title 标题   * @param content 内容   * @param topicTypeId 帖子类别ID   * @param pic1 帖子图片地址   * @param pic2 帖子图片地址   * @param pic3 帖子图片地址   * @param pic4 帖子图片地址   * @param pic5 帖子图片地址   * @param pic6 帖子图片地址   * @param pic7 帖子图片地址   * @param pic8 帖子图片地址   * @param pic9 帖子图片地址
  */
  public void forumBoardBoardIdTopicPost (String boardId, String title, String content, String topicTypeId, String pic1, String pic2, String pic3, String pic4, String pic5, String pic6, String pic7, String pic8, String pic9, final Response.Listener<AddTopicSuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'boardId' is set
    if (boardId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling forumBoardBoardIdTopicPost",
         new ApiException(400, "Missing the required parameter 'boardId' when calling forumBoardBoardIdTopicPost"));
    }
    
    // verify the required parameter 'title' is set
    if (title == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'title' when calling forumBoardBoardIdTopicPost",
         new ApiException(400, "Missing the required parameter 'title' when calling forumBoardBoardIdTopicPost"));
    }
    
    // verify the required parameter 'content' is set
    if (content == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'content' when calling forumBoardBoardIdTopicPost",
         new ApiException(400, "Missing the required parameter 'content' when calling forumBoardBoardIdTopicPost"));
    }
    

    // create path and map variables
    String path = "/forum/board/{board_id}/topic".replaceAll("\\{format\\}","json").replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (topicTypeId != null) {
        localVarBuilder.addTextBody("topic_type_id", ApiInvoker.parameterToString(topicTypeId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (title != null) {
        localVarBuilder.addTextBody("title", ApiInvoker.parameterToString(title), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (content != null) {
        localVarBuilder.addTextBody("content", ApiInvoker.parameterToString(content), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pic1 != null) {
        localVarBuilder.addTextBody("pic1", ApiInvoker.parameterToString(pic1), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pic2 != null) {
        localVarBuilder.addTextBody("pic2", ApiInvoker.parameterToString(pic2), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pic3 != null) {
        localVarBuilder.addTextBody("pic3", ApiInvoker.parameterToString(pic3), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pic4 != null) {
        localVarBuilder.addTextBody("pic4", ApiInvoker.parameterToString(pic4), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pic5 != null) {
        localVarBuilder.addTextBody("pic5", ApiInvoker.parameterToString(pic5), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pic6 != null) {
        localVarBuilder.addTextBody("pic6", ApiInvoker.parameterToString(pic6), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pic7 != null) {
        localVarBuilder.addTextBody("pic7", ApiInvoker.parameterToString(pic7), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pic8 != null) {
        localVarBuilder.addTextBody("pic8", ApiInvoker.parameterToString(pic8), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pic9 != null) {
        localVarBuilder.addTextBody("pic9", ApiInvoker.parameterToString(pic9), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("topic_type_id", ApiInvoker.parameterToString(topicTypeId));
formParams.put("title", ApiInvoker.parameterToString(title));
formParams.put("content", ApiInvoker.parameterToString(content));
formParams.put("pic1", ApiInvoker.parameterToString(pic1));
formParams.put("pic2", ApiInvoker.parameterToString(pic2));
formParams.put("pic3", ApiInvoker.parameterToString(pic3));
formParams.put("pic4", ApiInvoker.parameterToString(pic4));
formParams.put("pic5", ApiInvoker.parameterToString(pic5));
formParams.put("pic6", ApiInvoker.parameterToString(pic6));
formParams.put("pic7", ApiInvoker.parameterToString(pic7));
formParams.put("pic8", ApiInvoker.parameterToString(pic8));
formParams.put("pic9", ApiInvoker.parameterToString(pic9));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AddTopicSuccessModel) ApiInvoker.deserialize(localVarResponse,  "", AddTopicSuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 获取论坛版块帖子列表（分页）
  * 获取论坛版块帖子列表 
   * @param boardId 版块ID
   * @param topicOrder 主题排序方式 - 格式：field order 允许的字段名lastpost dateline，依据发帖时间排序：dateline desc, 依据最新回复排序lastpost desc 当格式不合法时以默认条件排序
   * @param pageNum 版块主题页码
   * @param pageSize 版块主题每页记录数
   * @return ForumBoardTopicsListModel
  */
  public ForumBoardTopicsListModel forumBoardBoardIdTopicsListGet (String boardId, String topicOrder, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'boardId' is set
      if (boardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling forumBoardBoardIdTopicsListGet",
      new ApiException(400, "Missing the required parameter 'boardId' when calling forumBoardBoardIdTopicsListGet"));
      }
  

  // create path and map variables
  String path = "/forum/board/{board_id}/topics_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "topic_order", topicOrder));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ForumBoardTopicsListModel) ApiInvoker.deserialize(localVarResponse, "", ForumBoardTopicsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 获取论坛版块帖子列表（分页）
   * 获取论坛版块帖子列表 
   * @param boardId 版块ID   * @param topicOrder 主题排序方式 - 格式：field order 允许的字段名lastpost dateline，依据发帖时间排序：dateline desc, 依据最新回复排序lastpost desc 当格式不合法时以默认条件排序   * @param pageNum 版块主题页码   * @param pageSize 版块主题每页记录数
  */
  public void forumBoardBoardIdTopicsListGet (String boardId, String topicOrder, String pageNum, String pageSize, final Response.Listener<ForumBoardTopicsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'boardId' is set
    if (boardId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling forumBoardBoardIdTopicsListGet",
         new ApiException(400, "Missing the required parameter 'boardId' when calling forumBoardBoardIdTopicsListGet"));
    }
    

    // create path and map variables
    String path = "/forum/board/{board_id}/topics_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "topic_order", topicOrder));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ForumBoardTopicsListModel) ApiInvoker.deserialize(localVarResponse,  "", ForumBoardTopicsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 全部版块
  * 获取论坛分区信息 
   * @param sectionId 分区ID 显示该分区下的版块
   * @return ForumBoardsIndexModel
  */
  public ForumBoardsIndexModel forumBoardsIndexGet (String sectionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/forum/boards/index".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "section_id", sectionId));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ForumBoardsIndexModel) ApiInvoker.deserialize(localVarResponse, "", ForumBoardsIndexModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 全部版块
   * 获取论坛分区信息 
   * @param sectionId 分区ID 显示该分区下的版块
  */
  public void forumBoardsIndexGet (String sectionId, final Response.Listener<ForumBoardsIndexModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/forum/boards/index".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "section_id", sectionId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ForumBoardsIndexModel) ApiInvoker.deserialize(localVarResponse,  "", ForumBoardsIndexModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 论坛首页 - 关注
  * 论坛首页 - 关注 
   * @param boardsCount 显示版块数
   * @param talentsCount 显示达人数
   * @param topicsCount 显示帖子数
   * @return ForumIndexFollowedModel
  */
  public ForumIndexFollowedModel forumIndexFollowedGet (String boardsCount, String talentsCount, String topicsCount) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/forum/index/followed".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "boards_count", boardsCount));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "talents_count", talentsCount));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "topics_count", topicsCount));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ForumIndexFollowedModel) ApiInvoker.deserialize(localVarResponse, "", ForumIndexFollowedModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 论坛首页 - 关注
   * 论坛首页 - 关注 
   * @param boardsCount 显示版块数   * @param talentsCount 显示达人数   * @param topicsCount 显示帖子数
  */
  public void forumIndexFollowedGet (String boardsCount, String talentsCount, String topicsCount, final Response.Listener<ForumIndexFollowedModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/forum/index/followed".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "boards_count", boardsCount));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "talents_count", talentsCount));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "topics_count", topicsCount));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ForumIndexFollowedModel) ApiInvoker.deserialize(localVarResponse,  "", ForumIndexFollowedModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 论坛首页 - 热帖
  * 论坛首页 - 热帖 
   * @param topTopicsCount 置顶帖数
   * @param talkTopicsCount 显示话题数
   * @param hotTopicsCount 显示热帖数
   * @return ForumIndexHotTopicsModel
  */
  public ForumIndexHotTopicsModel forumIndexHotTopicsGet (String topTopicsCount, String talkTopicsCount, String hotTopicsCount) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/forum/index/hot_topics".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "top_topics_count", topTopicsCount));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "talk_topics_count", talkTopicsCount));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "hot_topics_count", hotTopicsCount));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ForumIndexHotTopicsModel) ApiInvoker.deserialize(localVarResponse, "", ForumIndexHotTopicsModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 论坛首页 - 热帖
   * 论坛首页 - 热帖 
   * @param topTopicsCount 置顶帖数   * @param talkTopicsCount 显示话题数   * @param hotTopicsCount 显示热帖数
  */
  public void forumIndexHotTopicsGet (String topTopicsCount, String talkTopicsCount, String hotTopicsCount, final Response.Listener<ForumIndexHotTopicsModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/forum/index/hot_topics".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "top_topics_count", topTopicsCount));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "talk_topics_count", talkTopicsCount));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hot_topics_count", hotTopicsCount));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ForumIndexHotTopicsModel) ApiInvoker.deserialize(localVarResponse,  "", ForumIndexHotTopicsModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 论坛首页 - 晒单
  * 论坛首页 - 晒单帖 
   * @param tagsCount 显示标签数
   * @param topicsCount 显示帖子数
   * @return ForumIndexShowOrdersModel
  */
  public ForumIndexShowOrdersModel forumIndexShowOrdersGet (String tagsCount, String topicsCount) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/forum/index/show_orders".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "tags_count", tagsCount));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "topics_count", topicsCount));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ForumIndexShowOrdersModel) ApiInvoker.deserialize(localVarResponse, "", ForumIndexShowOrdersModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 论坛首页 - 晒单
   * 论坛首页 - 晒单帖 
   * @param tagsCount 显示标签数   * @param topicsCount 显示帖子数
  */
  public void forumIndexShowOrdersGet (String tagsCount, String topicsCount, final Response.Listener<ForumIndexShowOrdersModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/forum/index/show_orders".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "tags_count", tagsCount));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "topics_count", topicsCount));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ForumIndexShowOrdersModel) ApiInvoker.deserialize(localVarResponse,  "", ForumIndexShowOrdersModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 获取分区下的版块信息
  * 获取分区下的版块信息 
   * @param sectionId 分区ID
   * @return ForumBoardsModel
  */
  public ForumBoardsModel forumSectionSectionIdBoardsGet (String sectionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'sectionId' is set
      if (sectionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'sectionId' when calling forumSectionSectionIdBoardsGet",
      new ApiException(400, "Missing the required parameter 'sectionId' when calling forumSectionSectionIdBoardsGet"));
      }
  

  // create path and map variables
  String path = "/forum/section/{section_id}/boards".replaceAll("\\{format\\}","json").replaceAll("\\{" + "section_id" + "\\}", apiInvoker.escapeString(sectionId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ForumBoardsModel) ApiInvoker.deserialize(localVarResponse, "", ForumBoardsModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 获取分区下的版块信息
   * 获取分区下的版块信息 
   * @param sectionId 分区ID
  */
  public void forumSectionSectionIdBoardsGet (String sectionId, final Response.Listener<ForumBoardsModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'sectionId' is set
    if (sectionId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'sectionId' when calling forumSectionSectionIdBoardsGet",
         new ApiException(400, "Missing the required parameter 'sectionId' when calling forumSectionSectionIdBoardsGet"));
    }
    

    // create path and map variables
    String path = "/forum/section/{section_id}/boards".replaceAll("\\{format\\}","json").replaceAll("\\{" + "section_id" + "\\}", apiInvoker.escapeString(sectionId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ForumBoardsModel) ApiInvoker.deserialize(localVarResponse,  "", ForumBoardsModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 全部达人
  * 论坛 - 达人首页 
   * @param talentsCount 首页取多少个达人
   * @return TalentsIndexModel
  */
  public TalentsIndexModel forumTalentsIndexGet (String talentsCount) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/forum/talents/index".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "talents_count", talentsCount));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (TalentsIndexModel) ApiInvoker.deserialize(localVarResponse, "", TalentsIndexModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 全部达人
   * 论坛 - 达人首页 
   * @param talentsCount 首页取多少个达人
  */
  public void forumTalentsIndexGet (String talentsCount, final Response.Listener<TalentsIndexModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/forum/talents/index".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "talents_count", talentsCount));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TalentsIndexModel) ApiInvoker.deserialize(localVarResponse,  "", TalentsIndexModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 达人列表（分页）
  * 论坛 - 海淘达人列表 
   * @param pageNum 页码
   * @param pageSize 每页显示几条记录
   * @return ForumTalentsListModel
  */
  public ForumTalentsListModel forumTalentsListGet (String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/forum/talents/list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ForumTalentsListModel) ApiInvoker.deserialize(localVarResponse, "", ForumTalentsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 达人列表（分页）
   * 论坛 - 海淘达人列表 
   * @param pageNum 页码   * @param pageSize 每页显示几条记录
  */
  public void forumTalentsListGet (String pageNum, String pageSize, final Response.Listener<ForumTalentsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/forum/talents/list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ForumTalentsListModel) ApiInvoker.deserialize(localVarResponse,  "", ForumTalentsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 话题列表（分页）
  * 话题列表 
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return TalkTopicsListModel
  */
  public TalkTopicsListModel forumTalkTopicsListGet (String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/forum/talk_topics_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (TalkTopicsListModel) ApiInvoker.deserialize(localVarResponse, "", TalkTopicsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 话题列表（分页）
   * 话题列表 
   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void forumTalkTopicsListGet (String pageNum, String pageSize, final Response.Listener<TalkTopicsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/forum/talk_topics_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TalkTopicsListModel) ApiInvoker.deserialize(localVarResponse,  "", TalkTopicsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 帖子简要信息
  * 帖子简要信息 
   * @param topicId 用户ID
   * @return ForumTopicBriefModel
  */
  public ForumTopicBriefModel forumTopicTopicIdBriefGet (String topicId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'topicId' is set
      if (topicId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'topicId' when calling forumTopicTopicIdBriefGet",
      new ApiException(400, "Missing the required parameter 'topicId' when calling forumTopicTopicIdBriefGet"));
      }
  

  // create path and map variables
  String path = "/forum/topic/{topic_id}/brief".replaceAll("\\{format\\}","json").replaceAll("\\{" + "topic_id" + "\\}", apiInvoker.escapeString(topicId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ForumTopicBriefModel) ApiInvoker.deserialize(localVarResponse, "", ForumTopicBriefModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 帖子简要信息
   * 帖子简要信息 
   * @param topicId 用户ID
  */
  public void forumTopicTopicIdBriefGet (String topicId, final Response.Listener<ForumTopicBriefModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'topicId' is set
    if (topicId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'topicId' when calling forumTopicTopicIdBriefGet",
         new ApiException(400, "Missing the required parameter 'topicId' when calling forumTopicTopicIdBriefGet"));
    }
    

    // create path and map variables
    String path = "/forum/topic/{topic_id}/brief".replaceAll("\\{format\\}","json").replaceAll("\\{" + "topic_id" + "\\}", apiInvoker.escapeString(topicId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ForumTopicBriefModel) ApiInvoker.deserialize(localVarResponse,  "", ForumTopicBriefModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 查看帖子
  * 获取帖子详情 
   * @param topicId 帖子ID
   * @param pageNum 回复列表页码
   * @param pageSize 回复列表每页记录数
   * @return ForumTopicViewModel
  */
  public ForumTopicViewModel forumTopicTopicIdGet (String topicId, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'topicId' is set
      if (topicId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'topicId' when calling forumTopicTopicIdGet",
      new ApiException(400, "Missing the required parameter 'topicId' when calling forumTopicTopicIdGet"));
      }
  

  // create path and map variables
  String path = "/forum/topic/{topic_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "topic_id" + "\\}", apiInvoker.escapeString(topicId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ForumTopicViewModel) ApiInvoker.deserialize(localVarResponse, "", ForumTopicViewModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 查看帖子
   * 获取帖子详情 
   * @param topicId 帖子ID   * @param pageNum 回复列表页码   * @param pageSize 回复列表每页记录数
  */
  public void forumTopicTopicIdGet (String topicId, String pageNum, String pageSize, final Response.Listener<ForumTopicViewModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'topicId' is set
    if (topicId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'topicId' when calling forumTopicTopicIdGet",
         new ApiException(400, "Missing the required parameter 'topicId' when calling forumTopicTopicIdGet"));
    }
    

    // create path and map variables
    String path = "/forum/topic/{topic_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "topic_id" + "\\}", apiInvoker.escapeString(topicId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ForumTopicViewModel) ApiInvoker.deserialize(localVarResponse,  "", ForumTopicViewModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 帖子相关优惠
  * 帖子相关优惠列表 
   * @param topicId 帖子id
   * @return DealsModel
  */
  public DealsModel forumTopicTopicIdRelatedDealsGet (String topicId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'topicId' is set
      if (topicId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'topicId' when calling forumTopicTopicIdRelatedDealsGet",
      new ApiException(400, "Missing the required parameter 'topicId' when calling forumTopicTopicIdRelatedDealsGet"));
      }
  

  // create path and map variables
  String path = "/forum/topic/{topic_id}/related/deals".replaceAll("\\{format\\}","json").replaceAll("\\{" + "topic_id" + "\\}", apiInvoker.escapeString(topicId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (DealsModel) ApiInvoker.deserialize(localVarResponse, "", DealsModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 帖子相关优惠
   * 帖子相关优惠列表 
   * @param topicId 帖子id
  */
  public void forumTopicTopicIdRelatedDealsGet (String topicId, final Response.Listener<DealsModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'topicId' is set
    if (topicId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'topicId' when calling forumTopicTopicIdRelatedDealsGet",
         new ApiException(400, "Missing the required parameter 'topicId' when calling forumTopicTopicIdRelatedDealsGet"));
    }
    

    // create path and map variables
    String path = "/forum/topic/{topic_id}/related/deals".replaceAll("\\{format\\}","json").replaceAll("\\{" + "topic_id" + "\\}", apiInvoker.escapeString(topicId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DealsModel) ApiInvoker.deserialize(localVarResponse,  "", DealsModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 帖子回复列表（分页）
  * 帖子回复列表 
   * @param topicId 用户ID
   * @param pageNum 回复列表页码
   * @param pageSize 回复列表每页记录数
   * @return RepliesListModel
  */
  public RepliesListModel forumTopicTopicIdRepliesListGet (String topicId, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'topicId' is set
      if (topicId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'topicId' when calling forumTopicTopicIdRepliesListGet",
      new ApiException(400, "Missing the required parameter 'topicId' when calling forumTopicTopicIdRepliesListGet"));
      }
  

  // create path and map variables
  String path = "/forum/topic/{topic_id}/replies_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "topic_id" + "\\}", apiInvoker.escapeString(topicId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (RepliesListModel) ApiInvoker.deserialize(localVarResponse, "", RepliesListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 帖子回复列表（分页）
   * 帖子回复列表 
   * @param topicId 用户ID   * @param pageNum 回复列表页码   * @param pageSize 回复列表每页记录数
  */
  public void forumTopicTopicIdRepliesListGet (String topicId, String pageNum, String pageSize, final Response.Listener<RepliesListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'topicId' is set
    if (topicId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'topicId' when calling forumTopicTopicIdRepliesListGet",
         new ApiException(400, "Missing the required parameter 'topicId' when calling forumTopicTopicIdRepliesListGet"));
    }
    

    // create path and map variables
    String path = "/forum/topic/{topic_id}/replies_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "topic_id" + "\\}", apiInvoker.escapeString(topicId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RepliesListModel) ApiInvoker.deserialize(localVarResponse,  "", RepliesListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 回帖
  * 回帖 
   * @param topicId 帖子ID
   * @param content 回帖内容
   * @param sourcePid 回复目标帖子的ID
   * @param pic1 帖子图片地址
   * @param pic2 帖子图片地址
   * @param pic3 帖子图片地址
   * @param pic4 帖子图片地址
   * @param pic5 帖子图片地址
   * @param pic6 帖子图片地址
   * @param pic7 帖子图片地址
   * @param pic8 帖子图片地址
   * @param pic9 帖子图片地址
   * @return AddPostSuccessModel
  */
  public AddPostSuccessModel forumTopicTopicIdReplyPost (String topicId, String content, String sourcePid, String pic1, String pic2, String pic3, String pic4, String pic5, String pic6, String pic7, String pic8, String pic9) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'topicId' is set
      if (topicId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'topicId' when calling forumTopicTopicIdReplyPost",
      new ApiException(400, "Missing the required parameter 'topicId' when calling forumTopicTopicIdReplyPost"));
      }
  
      // verify the required parameter 'content' is set
      if (content == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'content' when calling forumTopicTopicIdReplyPost",
      new ApiException(400, "Missing the required parameter 'content' when calling forumTopicTopicIdReplyPost"));
      }
  

  // create path and map variables
  String path = "/forum/topic/{topic_id}/reply".replaceAll("\\{format\\}","json").replaceAll("\\{" + "topic_id" + "\\}", apiInvoker.escapeString(topicId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (sourcePid != null) {
          localVarBuilder.addTextBody("source_pid", ApiInvoker.parameterToString(sourcePid), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (content != null) {
          localVarBuilder.addTextBody("content", ApiInvoker.parameterToString(content), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (pic1 != null) {
          localVarBuilder.addTextBody("pic1", ApiInvoker.parameterToString(pic1), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (pic2 != null) {
          localVarBuilder.addTextBody("pic2", ApiInvoker.parameterToString(pic2), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (pic3 != null) {
          localVarBuilder.addTextBody("pic3", ApiInvoker.parameterToString(pic3), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (pic4 != null) {
          localVarBuilder.addTextBody("pic4", ApiInvoker.parameterToString(pic4), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (pic5 != null) {
          localVarBuilder.addTextBody("pic5", ApiInvoker.parameterToString(pic5), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (pic6 != null) {
          localVarBuilder.addTextBody("pic6", ApiInvoker.parameterToString(pic6), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (pic7 != null) {
          localVarBuilder.addTextBody("pic7", ApiInvoker.parameterToString(pic7), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (pic8 != null) {
          localVarBuilder.addTextBody("pic8", ApiInvoker.parameterToString(pic8), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (pic9 != null) {
          localVarBuilder.addTextBody("pic9", ApiInvoker.parameterToString(pic9), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("source_pid", ApiInvoker.parameterToString(sourcePid));
formParams.put("content", ApiInvoker.parameterToString(content));
formParams.put("pic1", ApiInvoker.parameterToString(pic1));
formParams.put("pic2", ApiInvoker.parameterToString(pic2));
formParams.put("pic3", ApiInvoker.parameterToString(pic3));
formParams.put("pic4", ApiInvoker.parameterToString(pic4));
formParams.put("pic5", ApiInvoker.parameterToString(pic5));
formParams.put("pic6", ApiInvoker.parameterToString(pic6));
formParams.put("pic7", ApiInvoker.parameterToString(pic7));
formParams.put("pic8", ApiInvoker.parameterToString(pic8));
formParams.put("pic9", ApiInvoker.parameterToString(pic9));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (AddPostSuccessModel) ApiInvoker.deserialize(localVarResponse, "", AddPostSuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 回帖
   * 回帖 
   * @param topicId 帖子ID   * @param content 回帖内容   * @param sourcePid 回复目标帖子的ID   * @param pic1 帖子图片地址   * @param pic2 帖子图片地址   * @param pic3 帖子图片地址   * @param pic4 帖子图片地址   * @param pic5 帖子图片地址   * @param pic6 帖子图片地址   * @param pic7 帖子图片地址   * @param pic8 帖子图片地址   * @param pic9 帖子图片地址
  */
  public void forumTopicTopicIdReplyPost (String topicId, String content, String sourcePid, String pic1, String pic2, String pic3, String pic4, String pic5, String pic6, String pic7, String pic8, String pic9, final Response.Listener<AddPostSuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'topicId' is set
    if (topicId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'topicId' when calling forumTopicTopicIdReplyPost",
         new ApiException(400, "Missing the required parameter 'topicId' when calling forumTopicTopicIdReplyPost"));
    }
    
    // verify the required parameter 'content' is set
    if (content == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'content' when calling forumTopicTopicIdReplyPost",
         new ApiException(400, "Missing the required parameter 'content' when calling forumTopicTopicIdReplyPost"));
    }
    

    // create path and map variables
    String path = "/forum/topic/{topic_id}/reply".replaceAll("\\{format\\}","json").replaceAll("\\{" + "topic_id" + "\\}", apiInvoker.escapeString(topicId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (sourcePid != null) {
        localVarBuilder.addTextBody("source_pid", ApiInvoker.parameterToString(sourcePid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (content != null) {
        localVarBuilder.addTextBody("content", ApiInvoker.parameterToString(content), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pic1 != null) {
        localVarBuilder.addTextBody("pic1", ApiInvoker.parameterToString(pic1), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pic2 != null) {
        localVarBuilder.addTextBody("pic2", ApiInvoker.parameterToString(pic2), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pic3 != null) {
        localVarBuilder.addTextBody("pic3", ApiInvoker.parameterToString(pic3), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pic4 != null) {
        localVarBuilder.addTextBody("pic4", ApiInvoker.parameterToString(pic4), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pic5 != null) {
        localVarBuilder.addTextBody("pic5", ApiInvoker.parameterToString(pic5), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pic6 != null) {
        localVarBuilder.addTextBody("pic6", ApiInvoker.parameterToString(pic6), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pic7 != null) {
        localVarBuilder.addTextBody("pic7", ApiInvoker.parameterToString(pic7), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pic8 != null) {
        localVarBuilder.addTextBody("pic8", ApiInvoker.parameterToString(pic8), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pic9 != null) {
        localVarBuilder.addTextBody("pic9", ApiInvoker.parameterToString(pic9), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("source_pid", ApiInvoker.parameterToString(sourcePid));
formParams.put("content", ApiInvoker.parameterToString(content));
formParams.put("pic1", ApiInvoker.parameterToString(pic1));
formParams.put("pic2", ApiInvoker.parameterToString(pic2));
formParams.put("pic3", ApiInvoker.parameterToString(pic3));
formParams.put("pic4", ApiInvoker.parameterToString(pic4));
formParams.put("pic5", ApiInvoker.parameterToString(pic5));
formParams.put("pic6", ApiInvoker.parameterToString(pic6));
formParams.put("pic7", ApiInvoker.parameterToString(pic7));
formParams.put("pic8", ApiInvoker.parameterToString(pic8));
formParams.put("pic9", ApiInvoker.parameterToString(pic9));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AddPostSuccessModel) ApiInvoker.deserialize(localVarResponse,  "", AddPostSuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 回帖点赞
  * 回帖 
   * @param topicId 主题
   * @param postId 回复ID
   * @return SuccessModel
  */
  public SuccessModel forumTopicTopicIdReplyPostIdPraisingPost (String topicId, String postId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'topicId' is set
      if (topicId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'topicId' when calling forumTopicTopicIdReplyPostIdPraisingPost",
      new ApiException(400, "Missing the required parameter 'topicId' when calling forumTopicTopicIdReplyPostIdPraisingPost"));
      }
  
      // verify the required parameter 'postId' is set
      if (postId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postId' when calling forumTopicTopicIdReplyPostIdPraisingPost",
      new ApiException(400, "Missing the required parameter 'postId' when calling forumTopicTopicIdReplyPostIdPraisingPost"));
      }
  

  // create path and map variables
  String path = "/forum/topic/{topic_id}/reply/{post_id}/praising".replaceAll("\\{format\\}","json").replaceAll("\\{" + "topic_id" + "\\}", apiInvoker.escapeString(topicId.toString())).replaceAll("\\{" + "post_id" + "\\}", apiInvoker.escapeString(postId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 回帖点赞
   * 回帖 
   * @param topicId 主题   * @param postId 回复ID
  */
  public void forumTopicTopicIdReplyPostIdPraisingPost (String topicId, String postId, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'topicId' is set
    if (topicId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'topicId' when calling forumTopicTopicIdReplyPostIdPraisingPost",
         new ApiException(400, "Missing the required parameter 'topicId' when calling forumTopicTopicIdReplyPostIdPraisingPost"));
    }
    
    // verify the required parameter 'postId' is set
    if (postId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'postId' when calling forumTopicTopicIdReplyPostIdPraisingPost",
         new ApiException(400, "Missing the required parameter 'postId' when calling forumTopicTopicIdReplyPostIdPraisingPost"));
    }
    

    // create path and map variables
    String path = "/forum/topic/{topic_id}/reply/{post_id}/praising".replaceAll("\\{format\\}","json").replaceAll("\\{" + "topic_id" + "\\}", apiInvoker.escapeString(topicId.toString())).replaceAll("\\{" + "post_id" + "\\}", apiInvoker.escapeString(postId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 论坛帖子列表（分页）
  * 获取帖子列表 
   * @param type 类型 - 1：晒单帖 2：热帖 3：好友和达人发布的帖子
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return ForumTopicsListModel
  */
  public ForumTopicsListModel forumTopicsListGet (String type, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'type' is set
      if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling forumTopicsListGet",
      new ApiException(400, "Missing the required parameter 'type' when calling forumTopicsListGet"));
      }
  

  // create path and map variables
  String path = "/forum/topics_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ForumTopicsListModel) ApiInvoker.deserialize(localVarResponse, "", ForumTopicsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 论坛帖子列表（分页）
   * 获取帖子列表 
   * @param type 类型 - 1：晒单帖 2：热帖 3：好友和达人发布的帖子   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void forumTopicsListGet (String type, String pageNum, String pageSize, final Response.Listener<ForumTopicsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'type' is set
    if (type == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'type' when calling forumTopicsListGet",
         new ApiException(400, "Missing the required parameter 'type' when calling forumTopicsListGet"));
    }
    

    // create path and map variables
    String path = "/forum/topics_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ForumTopicsListModel) ApiInvoker.deserialize(localVarResponse,  "", ForumTopicsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户详情
  * 用户详情 
   * @param userId 用户ID
   * @param topicsCount 首页加载时获取的帖子数量
   * @return ForumUserIndexModel
  */
  public ForumUserIndexModel forumUserUserIdIndexGet (String userId, String topicsCount) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'userId' is set
      if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling forumUserUserIdIndexGet",
      new ApiException(400, "Missing the required parameter 'userId' when calling forumUserUserIdIndexGet"));
      }
  
      // verify the required parameter 'topicsCount' is set
      if (topicsCount == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'topicsCount' when calling forumUserUserIdIndexGet",
      new ApiException(400, "Missing the required parameter 'topicsCount' when calling forumUserUserIdIndexGet"));
      }
  

  // create path and map variables
  String path = "/forum/user/{user_id}/index".replaceAll("\\{format\\}","json").replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "topics_count", topicsCount));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ForumUserIndexModel) ApiInvoker.deserialize(localVarResponse, "", ForumUserIndexModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户详情
   * 用户详情 
   * @param userId 用户ID   * @param topicsCount 首页加载时获取的帖子数量
  */
  public void forumUserUserIdIndexGet (String userId, String topicsCount, final Response.Listener<ForumUserIndexModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'userId' is set
    if (userId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling forumUserUserIdIndexGet",
         new ApiException(400, "Missing the required parameter 'userId' when calling forumUserUserIdIndexGet"));
    }
    
    // verify the required parameter 'topicsCount' is set
    if (topicsCount == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'topicsCount' when calling forumUserUserIdIndexGet",
         new ApiException(400, "Missing the required parameter 'topicsCount' when calling forumUserUserIdIndexGet"));
    }
    

    // create path and map variables
    String path = "/forum/user/{user_id}/index".replaceAll("\\{format\\}","json").replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "topics_count", topicsCount));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ForumUserIndexModel) ApiInvoker.deserialize(localVarResponse,  "", ForumUserIndexModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户发表的帖子列表（分页）
  * 用户发表的帖子列表 
   * @param userId 用户ID
   * @param type 类型 1：帖子 2：晒单
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return ForumBoardTopicsListModel
  */
  public ForumBoardTopicsListModel forumUserUserIdTopicsListGet (String userId, String type, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'userId' is set
      if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling forumUserUserIdTopicsListGet",
      new ApiException(400, "Missing the required parameter 'userId' when calling forumUserUserIdTopicsListGet"));
      }
  

  // create path and map variables
  String path = "/forum/user/{user_id}/topics_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ForumBoardTopicsListModel) ApiInvoker.deserialize(localVarResponse, "", ForumBoardTopicsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户发表的帖子列表（分页）
   * 用户发表的帖子列表 
   * @param userId 用户ID   * @param type 类型 1：帖子 2：晒单   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void forumUserUserIdTopicsListGet (String userId, String type, String pageNum, String pageSize, final Response.Listener<ForumBoardTopicsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'userId' is set
    if (userId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling forumUserUserIdTopicsListGet",
         new ApiException(400, "Missing the required parameter 'userId' when calling forumUserUserIdTopicsListGet"));
    }
    

    // create path and map variables
    String path = "/forum/user/{user_id}/topics_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ForumBoardTopicsListModel) ApiInvoker.deserialize(localVarResponse,  "", ForumBoardTopicsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 搜索 - 热门关键词
  * 搜索 - 热门关键词 
   * @return KeywordsIfModel
  */
  public KeywordsIfModel searchingHotKeywordsGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/searching/hot_keywords".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (KeywordsIfModel) ApiInvoker.deserialize(localVarResponse, "", KeywordsIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 搜索 - 热门关键词
   * 搜索 - 热门关键词 

  */
  public void searchingHotKeywordsGet (final Response.Listener<KeywordsIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/searching/hot_keywords".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((KeywordsIfModel) ApiInvoker.deserialize(localVarResponse,  "", KeywordsIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 搜索论坛版块结果
  * 获取版块列表 
   * @param keywords 关键词
   * @return SearchingBoardsModel
  */
  public SearchingBoardsModel searchingKeywordsBoardsGet (String keywords) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'keywords' is set
      if (keywords == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'keywords' when calling searchingKeywordsBoardsGet",
      new ApiException(400, "Missing the required parameter 'keywords' when calling searchingKeywordsBoardsGet"));
      }
  

  // create path and map variables
  String path = "/searching/{keywords}/boards".replaceAll("\\{format\\}","json").replaceAll("\\{" + "keywords" + "\\}", apiInvoker.escapeString(keywords.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SearchingBoardsModel) ApiInvoker.deserialize(localVarResponse, "", SearchingBoardsModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 搜索论坛版块结果
   * 获取版块列表 
   * @param keywords 关键词
  */
  public void searchingKeywordsBoardsGet (String keywords, final Response.Listener<SearchingBoardsModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'keywords' is set
    if (keywords == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'keywords' when calling searchingKeywordsBoardsGet",
         new ApiException(400, "Missing the required parameter 'keywords' when calling searchingKeywordsBoardsGet"));
    }
    

    // create path and map variables
    String path = "/searching/{keywords}/boards".replaceAll("\\{format\\}","json").replaceAll("\\{" + "keywords" + "\\}", apiInvoker.escapeString(keywords.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SearchingBoardsModel) ApiInvoker.deserialize(localVarResponse,  "", SearchingBoardsModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 搜索 - 自动完成关键词
  * 搜索 - 自动完成关键词 
   * @param keywords 关键词
   * @return CompletingWordsIfModel
  */
  public CompletingWordsIfModel searchingKeywordsCompletingWordsGet (String keywords) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'keywords' is set
      if (keywords == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'keywords' when calling searchingKeywordsCompletingWordsGet",
      new ApiException(400, "Missing the required parameter 'keywords' when calling searchingKeywordsCompletingWordsGet"));
      }
  

  // create path and map variables
  String path = "/searching/{keywords}/completing_words".replaceAll("\\{format\\}","json").replaceAll("\\{" + "keywords" + "\\}", apiInvoker.escapeString(keywords.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (CompletingWordsIfModel) ApiInvoker.deserialize(localVarResponse, "", CompletingWordsIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 搜索 - 自动完成关键词
   * 搜索 - 自动完成关键词 
   * @param keywords 关键词
  */
  public void searchingKeywordsCompletingWordsGet (String keywords, final Response.Listener<CompletingWordsIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'keywords' is set
    if (keywords == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'keywords' when calling searchingKeywordsCompletingWordsGet",
         new ApiException(400, "Missing the required parameter 'keywords' when calling searchingKeywordsCompletingWordsGet"));
    }
    

    // create path and map variables
    String path = "/searching/{keywords}/completing_words".replaceAll("\\{format\\}","json").replaceAll("\\{" + "keywords" + "\\}", apiInvoker.escapeString(keywords.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CompletingWordsIfModel) ApiInvoker.deserialize(localVarResponse,  "", CompletingWordsIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 搜索 - 优惠列表
  * 搜索 - 优惠列表 
   * @param keywords 搜索关键词
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return DealsListModel
  */
  public DealsListModel searchingKeywordsDealsListGet (String keywords, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'keywords' is set
      if (keywords == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'keywords' when calling searchingKeywordsDealsListGet",
      new ApiException(400, "Missing the required parameter 'keywords' when calling searchingKeywordsDealsListGet"));
      }
  

  // create path and map variables
  String path = "/searching/{keywords}/deals_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "keywords" + "\\}", apiInvoker.escapeString(keywords.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (DealsListModel) ApiInvoker.deserialize(localVarResponse, "", DealsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 搜索 - 优惠列表
   * 搜索 - 优惠列表 
   * @param keywords 搜索关键词   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void searchingKeywordsDealsListGet (String keywords, String pageNum, String pageSize, final Response.Listener<DealsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'keywords' is set
    if (keywords == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'keywords' when calling searchingKeywordsDealsListGet",
         new ApiException(400, "Missing the required parameter 'keywords' when calling searchingKeywordsDealsListGet"));
    }
    

    // create path and map variables
    String path = "/searching/{keywords}/deals_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "keywords" + "\\}", apiInvoker.escapeString(keywords.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DealsListModel) ApiInvoker.deserialize(localVarResponse,  "", DealsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 版块内搜索帖子结果（分页）
  * 版块内搜索帖子 
   * @param keywords 关键词
   * @param boardId 版块ID
   * @param subBoardId 子版块ID
   * @param pageNum 页码
   * @param pageSize 每页记录行数
   * @return SearchingForumBoardTopicsListModel
  */
  public SearchingForumBoardTopicsListModel searchingKeywordsForumBoardBoardIdTopicsListGet (String keywords, String boardId, String subBoardId, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'keywords' is set
      if (keywords == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'keywords' when calling searchingKeywordsForumBoardBoardIdTopicsListGet",
      new ApiException(400, "Missing the required parameter 'keywords' when calling searchingKeywordsForumBoardBoardIdTopicsListGet"));
      }
  
      // verify the required parameter 'boardId' is set
      if (boardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling searchingKeywordsForumBoardBoardIdTopicsListGet",
      new ApiException(400, "Missing the required parameter 'boardId' when calling searchingKeywordsForumBoardBoardIdTopicsListGet"));
      }
  

  // create path and map variables
  String path = "/searching/{keywords}/forum/board/{board_id}/topics_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "keywords" + "\\}", apiInvoker.escapeString(keywords.toString())).replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "sub_board_id", subBoardId));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SearchingForumBoardTopicsListModel) ApiInvoker.deserialize(localVarResponse, "", SearchingForumBoardTopicsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 版块内搜索帖子结果（分页）
   * 版块内搜索帖子 
   * @param keywords 关键词   * @param boardId 版块ID   * @param subBoardId 子版块ID   * @param pageNum 页码   * @param pageSize 每页记录行数
  */
  public void searchingKeywordsForumBoardBoardIdTopicsListGet (String keywords, String boardId, String subBoardId, String pageNum, String pageSize, final Response.Listener<SearchingForumBoardTopicsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'keywords' is set
    if (keywords == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'keywords' when calling searchingKeywordsForumBoardBoardIdTopicsListGet",
         new ApiException(400, "Missing the required parameter 'keywords' when calling searchingKeywordsForumBoardBoardIdTopicsListGet"));
    }
    
    // verify the required parameter 'boardId' is set
    if (boardId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'boardId' when calling searchingKeywordsForumBoardBoardIdTopicsListGet",
         new ApiException(400, "Missing the required parameter 'boardId' when calling searchingKeywordsForumBoardBoardIdTopicsListGet"));
    }
    

    // create path and map variables
    String path = "/searching/{keywords}/forum/board/{board_id}/topics_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "keywords" + "\\}", apiInvoker.escapeString(keywords.toString())).replaceAll("\\{" + "board_id" + "\\}", apiInvoker.escapeString(boardId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "sub_board_id", subBoardId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SearchingForumBoardTopicsListModel) ApiInvoker.deserialize(localVarResponse,  "", SearchingForumBoardTopicsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 搜索好友(分页)
  * 搜索好友 
   * @param keywords 关键词
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return FriendsListModel
  */
  public FriendsListModel searchingKeywordsFriendsListGet (String keywords, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'keywords' is set
      if (keywords == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'keywords' when calling searchingKeywordsFriendsListGet",
      new ApiException(400, "Missing the required parameter 'keywords' when calling searchingKeywordsFriendsListGet"));
      }
  

  // create path and map variables
  String path = "/searching/{keywords}/friends_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "keywords" + "\\}", apiInvoker.escapeString(keywords.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (FriendsListModel) ApiInvoker.deserialize(localVarResponse, "", FriendsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 搜索好友(分页)
   * 搜索好友 
   * @param keywords 关键词   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void searchingKeywordsFriendsListGet (String keywords, String pageNum, String pageSize, final Response.Listener<FriendsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'keywords' is set
    if (keywords == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'keywords' when calling searchingKeywordsFriendsListGet",
         new ApiException(400, "Missing the required parameter 'keywords' when calling searchingKeywordsFriendsListGet"));
    }
    

    // create path and map variables
    String path = "/searching/{keywords}/friends_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "keywords" + "\\}", apiInvoker.escapeString(keywords.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((FriendsListModel) ApiInvoker.deserialize(localVarResponse,  "", FriendsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 搜索 - 商家简要信息列表
  * 搜索 - 商家简要信息列表 
   * @param keywords 搜索关键词
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return StoresBriefsListModel
  */
  public StoresBriefsListModel searchingKeywordsStoresBriefsListGet (String keywords, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'keywords' is set
      if (keywords == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'keywords' when calling searchingKeywordsStoresBriefsListGet",
      new ApiException(400, "Missing the required parameter 'keywords' when calling searchingKeywordsStoresBriefsListGet"));
      }
  

  // create path and map variables
  String path = "/searching/{keywords}/stores_briefs_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "keywords" + "\\}", apiInvoker.escapeString(keywords.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (StoresBriefsListModel) ApiInvoker.deserialize(localVarResponse, "", StoresBriefsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 搜索 - 商家简要信息列表
   * 搜索 - 商家简要信息列表 
   * @param keywords 搜索关键词   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void searchingKeywordsStoresBriefsListGet (String keywords, String pageNum, String pageSize, final Response.Listener<StoresBriefsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'keywords' is set
    if (keywords == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'keywords' when calling searchingKeywordsStoresBriefsListGet",
         new ApiException(400, "Missing the required parameter 'keywords' when calling searchingKeywordsStoresBriefsListGet"));
    }
    

    // create path and map variables
    String path = "/searching/{keywords}/stores_briefs_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "keywords" + "\\}", apiInvoker.escapeString(keywords.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StoresBriefsListModel) ApiInvoker.deserialize(localVarResponse,  "", StoresBriefsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 搜索 - 商家信息列表
  * 搜索 - 商家信息列表 
   * @param keywords 搜索关键词
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return StoresListModel
  */
  public StoresListModel searchingKeywordsStoresListGet (String keywords, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'keywords' is set
      if (keywords == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'keywords' when calling searchingKeywordsStoresListGet",
      new ApiException(400, "Missing the required parameter 'keywords' when calling searchingKeywordsStoresListGet"));
      }
  

  // create path and map variables
  String path = "/searching/{keywords}/stores_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "keywords" + "\\}", apiInvoker.escapeString(keywords.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (StoresListModel) ApiInvoker.deserialize(localVarResponse, "", StoresListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 搜索 - 商家信息列表
   * 搜索 - 商家信息列表 
   * @param keywords 搜索关键词   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void searchingKeywordsStoresListGet (String keywords, String pageNum, String pageSize, final Response.Listener<StoresListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'keywords' is set
    if (keywords == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'keywords' when calling searchingKeywordsStoresListGet",
         new ApiException(400, "Missing the required parameter 'keywords' when calling searchingKeywordsStoresListGet"));
    }
    

    // create path and map variables
    String path = "/searching/{keywords}/stores_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "keywords" + "\\}", apiInvoker.escapeString(keywords.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StoresListModel) ApiInvoker.deserialize(localVarResponse,  "", StoresListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 搜索帖子（分页）
  * 搜索帖子 
   * @param keywords 关键词
   * @param type 帖子类型 不指定表示所有帖子 - 1：所有帖子 2：晒单
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return TopicsListModel
  */
  public TopicsListModel searchingKeywordsTopicsListGet (String keywords, String type, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'keywords' is set
      if (keywords == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'keywords' when calling searchingKeywordsTopicsListGet",
      new ApiException(400, "Missing the required parameter 'keywords' when calling searchingKeywordsTopicsListGet"));
      }
  

  // create path and map variables
  String path = "/searching/{keywords}/topics_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "keywords" + "\\}", apiInvoker.escapeString(keywords.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (TopicsListModel) ApiInvoker.deserialize(localVarResponse, "", TopicsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 搜索帖子（分页）
   * 搜索帖子 
   * @param keywords 关键词   * @param type 帖子类型 不指定表示所有帖子 - 1：所有帖子 2：晒单   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void searchingKeywordsTopicsListGet (String keywords, String type, String pageNum, String pageSize, final Response.Listener<TopicsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'keywords' is set
    if (keywords == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'keywords' when calling searchingKeywordsTopicsListGet",
         new ApiException(400, "Missing the required parameter 'keywords' when calling searchingKeywordsTopicsListGet"));
    }
    

    // create path and map variables
    String path = "/searching/{keywords}/topics_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "keywords" + "\\}", apiInvoker.escapeString(keywords.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TopicsListModel) ApiInvoker.deserialize(localVarResponse,  "", TopicsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 搜索 - 转运列表
  * 搜索 - 转运列表 
   * @param keywords 搜索关键词
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return TransshippersListModel
  */
  public TransshippersListModel searchingKeywordsTransshippersListGet (String keywords, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'keywords' is set
      if (keywords == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'keywords' when calling searchingKeywordsTransshippersListGet",
      new ApiException(400, "Missing the required parameter 'keywords' when calling searchingKeywordsTransshippersListGet"));
      }
  

  // create path and map variables
  String path = "/searching/{keywords}/transshippers_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "keywords" + "\\}", apiInvoker.escapeString(keywords.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (TransshippersListModel) ApiInvoker.deserialize(localVarResponse, "", TransshippersListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 搜索 - 转运列表
   * 搜索 - 转运列表 
   * @param keywords 搜索关键词   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void searchingKeywordsTransshippersListGet (String keywords, String pageNum, String pageSize, final Response.Listener<TransshippersListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'keywords' is set
    if (keywords == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'keywords' when calling searchingKeywordsTransshippersListGet",
         new ApiException(400, "Missing the required parameter 'keywords' when calling searchingKeywordsTransshippersListGet"));
    }
    

    // create path and map variables
    String path = "/searching/{keywords}/transshippers_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "keywords" + "\\}", apiInvoker.escapeString(keywords.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransshippersListModel) ApiInvoker.deserialize(localVarResponse,  "", TransshippersListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 搜索 - 浏览过的商家列表
  * 搜索 - 浏览过的商家列表 
   * @param keywords 搜索关键词
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return StoresRecordsListModel
  */
  public StoresRecordsListModel searchingKeywordsVisitedStoresListGet (String keywords, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'keywords' is set
      if (keywords == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'keywords' when calling searchingKeywordsVisitedStoresListGet",
      new ApiException(400, "Missing the required parameter 'keywords' when calling searchingKeywordsVisitedStoresListGet"));
      }
  

  // create path and map variables
  String path = "/searching/{keywords}/visited_stores_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "keywords" + "\\}", apiInvoker.escapeString(keywords.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (StoresRecordsListModel) ApiInvoker.deserialize(localVarResponse, "", StoresRecordsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 搜索 - 浏览过的商家列表
   * 搜索 - 浏览过的商家列表 
   * @param keywords 搜索关键词   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void searchingKeywordsVisitedStoresListGet (String keywords, String pageNum, String pageSize, final Response.Listener<StoresRecordsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'keywords' is set
    if (keywords == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'keywords' when calling searchingKeywordsVisitedStoresListGet",
         new ApiException(400, "Missing the required parameter 'keywords' when calling searchingKeywordsVisitedStoresListGet"));
    }
    

    // create path and map variables
    String path = "/searching/{keywords}/visited_stores_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "keywords" + "\\}", apiInvoker.escapeString(keywords.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StoresRecordsListModel) ApiInvoker.deserialize(localVarResponse,  "", StoresRecordsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 获取接口配置
  * 获取接口配置 
   * @return SystemSettingsModel
  */
  public SystemSettingsModel settingsSystemGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/settings/system".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SystemSettingsModel) ApiInvoker.deserialize(localVarResponse, "", SystemSettingsModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 获取接口配置
   * 获取接口配置 

  */
  public void settingsSystemGet (final Response.Listener<SystemSettingsModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/settings/system".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SystemSettingsModel) ApiInvoker.deserialize(localVarResponse,  "", SystemSettingsModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 转运线路列表
  * 转运线路列表 
   * @return ShippingCountryListModel
  */
  public ShippingCountryListModel shippingCountryGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/shipping/country".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ShippingCountryListModel) ApiInvoker.deserialize(localVarResponse, "", ShippingCountryListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 转运线路列表
   * 转运线路列表 

  */
  public void shippingCountryGet (final Response.Listener<ShippingCountryListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/shipping/country".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ShippingCountryListModel) ApiInvoker.deserialize(localVarResponse,  "", ShippingCountryListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 获取线路内转运公司列表
  * 获取线路内转运公司列表 
   * @param countryId 线路id
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return CountryShippingListModel
  */
  public CountryShippingListModel shippingCountryIdShippingListGet (String countryId, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'countryId' is set
      if (countryId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'countryId' when calling shippingCountryIdShippingListGet",
      new ApiException(400, "Missing the required parameter 'countryId' when calling shippingCountryIdShippingListGet"));
      }
  

  // create path and map variables
  String path = "/shipping/{country_id}/shipping_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "country_id" + "\\}", apiInvoker.escapeString(countryId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (CountryShippingListModel) ApiInvoker.deserialize(localVarResponse, "", CountryShippingListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 获取线路内转运公司列表
   * 获取线路内转运公司列表 
   * @param countryId 线路id   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void shippingCountryIdShippingListGet (String countryId, String pageNum, String pageSize, final Response.Listener<CountryShippingListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'countryId' is set
    if (countryId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'countryId' when calling shippingCountryIdShippingListGet",
         new ApiException(400, "Missing the required parameter 'countryId' when calling shippingCountryIdShippingListGet"));
    }
    

    // create path and map variables
    String path = "/shipping/{country_id}/shipping_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "country_id" + "\\}", apiInvoker.escapeString(countryId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CountryShippingListModel) ApiInvoker.deserialize(localVarResponse,  "", CountryShippingListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 商家分类
  * 商家分类 
   * @param type 类型 - 1：商家分类 2：线下商家分类
   * @return CategoriesIfModel
  */
  public CategoriesIfModel storeCategoriesGet (String type) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'type' is set
      if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling storeCategoriesGet",
      new ApiException(400, "Missing the required parameter 'type' when calling storeCategoriesGet"));
      }
  

  // create path and map variables
  String path = "/store/categories".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (CategoriesIfModel) ApiInvoker.deserialize(localVarResponse, "", CategoriesIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 商家分类
   * 商家分类 
   * @param type 类型 - 1：商家分类 2：线下商家分类
  */
  public void storeCategoriesGet (String type, final Response.Listener<CategoriesIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'type' is set
    if (type == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'type' when calling storeCategoriesGet",
         new ApiException(400, "Missing the required parameter 'type' when calling storeCategoriesGet"));
    }
    

    // create path and map variables
    String path = "/store/categories".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CategoriesIfModel) ApiInvoker.deserialize(localVarResponse,  "", CategoriesIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 全部商家（分页）
  * 分类商家列表 
   * @param cateId 分类ID
   * @param pageNum 页码
   * @param pageSize 每页记录数(默认10)
   * @return StoreBriefListModel
  */
  public StoreBriefListModel storeCategoryCateIdStoreListGet (String cateId, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'cateId' is set
      if (cateId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cateId' when calling storeCategoryCateIdStoreListGet",
      new ApiException(400, "Missing the required parameter 'cateId' when calling storeCategoryCateIdStoreListGet"));
      }
  

  // create path and map variables
  String path = "/store/category/{cate_id}/store_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "cate_id" + "\\}", apiInvoker.escapeString(cateId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (StoreBriefListModel) ApiInvoker.deserialize(localVarResponse, "", StoreBriefListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 全部商家（分页）
   * 分类商家列表 
   * @param cateId 分类ID   * @param pageNum 页码   * @param pageSize 每页记录数(默认10)
  */
  public void storeCategoryCateIdStoreListGet (String cateId, String pageNum, String pageSize, final Response.Listener<StoreBriefListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'cateId' is set
    if (cateId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'cateId' when calling storeCategoryCateIdStoreListGet",
         new ApiException(400, "Missing the required parameter 'cateId' when calling storeCategoryCateIdStoreListGet"));
    }
    

    // create path and map variables
    String path = "/store/category/{cate_id}/store_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "cate_id" + "\\}", apiInvoker.escapeString(cateId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StoreBriefListModel) ApiInvoker.deserialize(localVarResponse,  "", StoreBriefListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 获取商家分类
  * 商家分类 
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return StoreCategoryListModel
  */
  public StoreCategoryListModel storeCategoryCategoryListGet (String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/store/category/category_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (StoreCategoryListModel) ApiInvoker.deserialize(localVarResponse, "", StoreCategoryListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 获取商家分类
   * 商家分类 
   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void storeCategoryCategoryListGet (String pageNum, String pageSize, final Response.Listener<StoreCategoryListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/store/category/category_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StoreCategoryListModel) ApiInvoker.deserialize(localVarResponse,  "", StoreCategoryListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 由商家首页入口跳转至的列表页
  * 由商家首页入口跳转至的列表页 
   * @param pageId 页面类别 - 1：直邮中国商家 2：收藏的商家 3：收藏的某个国家的商家
   * @param propertyId 过滤参数 - 筛选类别参数 商家属性ID
   * @param countryId 过滤参数 - 筛选类别参数 国家ID
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @param excludedIds 排除的优惠id 用,号分隔（去重用）
   * @return EnteredStoresListModel
  */
  public EnteredStoresListModel storeIndexEnteredStoresListGet (String pageId, String propertyId, String countryId, String pageNum, String pageSize, String excludedIds) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'pageId' is set
      if (pageId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'pageId' when calling storeIndexEnteredStoresListGet",
      new ApiException(400, "Missing the required parameter 'pageId' when calling storeIndexEnteredStoresListGet"));
      }
  

  // create path and map variables
  String path = "/store/index/entered/stores_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_id", pageId));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "property_id", propertyId));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "country_id", countryId));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "excluded_ids", excludedIds));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (EnteredStoresListModel) ApiInvoker.deserialize(localVarResponse, "", EnteredStoresListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 由商家首页入口跳转至的列表页
   * 由商家首页入口跳转至的列表页 
   * @param pageId 页面类别 - 1：直邮中国商家 2：收藏的商家 3：收藏的某个国家的商家   * @param propertyId 过滤参数 - 筛选类别参数 商家属性ID   * @param countryId 过滤参数 - 筛选类别参数 国家ID   * @param pageNum 页码   * @param pageSize 每页记录数   * @param excludedIds 排除的优惠id 用,号分隔（去重用）
  */
  public void storeIndexEnteredStoresListGet (String pageId, String propertyId, String countryId, String pageNum, String pageSize, String excludedIds, final Response.Listener<EnteredStoresListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'pageId' is set
    if (pageId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'pageId' when calling storeIndexEnteredStoresListGet",
         new ApiException(400, "Missing the required parameter 'pageId' when calling storeIndexEnteredStoresListGet"));
    }
    

    // create path and map variables
    String path = "/store/index/entered/stores_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_id", pageId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "property_id", propertyId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "country_id", countryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "excluded_ids", excludedIds));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnteredStoresListModel) ApiInvoker.deserialize(localVarResponse,  "", EnteredStoresListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 商家首页
  * 商家首页 
   * @param storesCount 最多显示多少个普通商家
   * @return StoreIndexIfModel
  */
  public StoreIndexIfModel storeIndexGet (String storesCount) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/store/index".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "stores_count", storesCount));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (StoreIndexIfModel) ApiInvoker.deserialize(localVarResponse, "", StoreIndexIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 商家首页
   * 商家首页 
   * @param storesCount 最多显示多少个普通商家
  */
  public void storeIndexGet (String storesCount, final Response.Listener<StoreIndexIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/store/index".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "stores_count", storesCount));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StoreIndexIfModel) ApiInvoker.deserialize(localVarResponse,  "", StoreIndexIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 线下返利商家 - 商家店铺地址列表
  * 线下返利商家 - 商家店铺地址列表 
   * @param storeId 商家ID
   * @return OfflineStoreAddressIfModel
  */
  public OfflineStoreAddressIfModel storeOfflineStoreIdStoreaddresslistGet (String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'storeId' is set
      if (storeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling storeOfflineStoreIdStoreaddresslistGet",
      new ApiException(400, "Missing the required parameter 'storeId' when calling storeOfflineStoreIdStoreaddresslistGet"));
      }
  

  // create path and map variables
  String path = "/store/offline/{store_id}/storeaddresslist".replaceAll("\\{format\\}","json").replaceAll("\\{" + "store_id" + "\\}", apiInvoker.escapeString(storeId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (OfflineStoreAddressIfModel) ApiInvoker.deserialize(localVarResponse, "", OfflineStoreAddressIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 线下返利商家 - 商家店铺地址列表
   * 线下返利商家 - 商家店铺地址列表 
   * @param storeId 商家ID
  */
  public void storeOfflineStoreIdStoreaddresslistGet (String storeId, final Response.Listener<OfflineStoreAddressIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'storeId' is set
    if (storeId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling storeOfflineStoreIdStoreaddresslistGet",
         new ApiException(400, "Missing the required parameter 'storeId' when calling storeOfflineStoreIdStoreaddresslistGet"));
    }
    

    // create path and map variables
    String path = "/store/offline/{store_id}/storeaddresslist".replaceAll("\\{format\\}","json").replaceAll("\\{" + "store_id" + "\\}", apiInvoker.escapeString(storeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OfflineStoreAddressIfModel) ApiInvoker.deserialize(localVarResponse,  "", OfflineStoreAddressIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 线下返商家详情接口
  * 线下返商家详情接口 
   * @param storeId 商家ID
   * @return OfflineStoreDetailIfModel
  */
  public OfflineStoreDetailIfModel storeOfflineStoreIdStoredetailGet (String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'storeId' is set
      if (storeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling storeOfflineStoreIdStoredetailGet",
      new ApiException(400, "Missing the required parameter 'storeId' when calling storeOfflineStoreIdStoredetailGet"));
      }
  

  // create path and map variables
  String path = "/store/offline/{store_id}/storedetail".replaceAll("\\{format\\}","json").replaceAll("\\{" + "store_id" + "\\}", apiInvoker.escapeString(storeId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (OfflineStoreDetailIfModel) ApiInvoker.deserialize(localVarResponse, "", OfflineStoreDetailIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 线下返商家详情接口
   * 线下返商家详情接口 
   * @param storeId 商家ID
  */
  public void storeOfflineStoreIdStoredetailGet (String storeId, final Response.Listener<OfflineStoreDetailIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'storeId' is set
    if (storeId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling storeOfflineStoreIdStoredetailGet",
         new ApiException(400, "Missing the required parameter 'storeId' when calling storeOfflineStoreIdStoredetailGet"));
    }
    

    // create path and map variables
    String path = "/store/offline/{store_id}/storedetail".replaceAll("\\{format\\}","json").replaceAll("\\{" + "store_id" + "\\}", apiInvoker.escapeString(storeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OfflineStoreDetailIfModel) ApiInvoker.deserialize(localVarResponse,  "", OfflineStoreDetailIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 线下返利商家列表
  * 线下返利商家列表 
   * @param excludedIds 排除的优惠id 用,号分隔（去重用）
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return EnteredStoresListModel
  */
  public EnteredStoresListModel storeOfflineStoresListGet (String excludedIds, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/store/offline/stores_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "excluded_ids", excludedIds));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (EnteredStoresListModel) ApiInvoker.deserialize(localVarResponse, "", EnteredStoresListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 线下返利商家列表
   * 线下返利商家列表 
   * @param excludedIds 排除的优惠id 用,号分隔（去重用）   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void storeOfflineStoresListGet (String excludedIds, String pageNum, String pageSize, final Response.Listener<EnteredStoresListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/store/offline/stores_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "excluded_ids", excludedIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((EnteredStoresListModel) ApiInvoker.deserialize(localVarResponse,  "", EnteredStoresListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 线下返利商家九宫格
  * 线下返利商家九宫格 
   * @return StoresBriefsIfModel
  */
  public StoresBriefsIfModel storeSquaredStoresGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/store/squared_stores".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (StoresBriefsIfModel) ApiInvoker.deserialize(localVarResponse, "", StoresBriefsIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 线下返利商家九宫格
   * 线下返利商家九宫格 

  */
  public void storeSquaredStoresGet (final Response.Listener<StoresBriefsIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/store/squared_stores".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StoresBriefsIfModel) ApiInvoker.deserialize(localVarResponse,  "", StoresBriefsIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 新增商家评论
  * 新增商家评论 
   * @param storeId 商家ID
   * @param content 评论内容
   * @param replyCommentId 回复评论的ID
   * @return CommentSuccessIfModel
  */
  public CommentSuccessIfModel storeStoreIdCommentPost (String storeId, String content, String replyCommentId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'storeId' is set
      if (storeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling storeStoreIdCommentPost",
      new ApiException(400, "Missing the required parameter 'storeId' when calling storeStoreIdCommentPost"));
      }
  
      // verify the required parameter 'content' is set
      if (content == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'content' when calling storeStoreIdCommentPost",
      new ApiException(400, "Missing the required parameter 'content' when calling storeStoreIdCommentPost"));
      }
  

  // create path and map variables
  String path = "/store/{store_id}/comment".replaceAll("\\{format\\}","json").replaceAll("\\{" + "store_id" + "\\}", apiInvoker.escapeString(storeId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (replyCommentId != null) {
          localVarBuilder.addTextBody("reply_comment_id", ApiInvoker.parameterToString(replyCommentId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (content != null) {
          localVarBuilder.addTextBody("content", ApiInvoker.parameterToString(content), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("reply_comment_id", ApiInvoker.parameterToString(replyCommentId));
formParams.put("content", ApiInvoker.parameterToString(content));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (CommentSuccessIfModel) ApiInvoker.deserialize(localVarResponse, "", CommentSuccessIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 新增商家评论
   * 新增商家评论 
   * @param storeId 商家ID   * @param content 评论内容   * @param replyCommentId 回复评论的ID
  */
  public void storeStoreIdCommentPost (String storeId, String content, String replyCommentId, final Response.Listener<CommentSuccessIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'storeId' is set
    if (storeId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling storeStoreIdCommentPost",
         new ApiException(400, "Missing the required parameter 'storeId' when calling storeStoreIdCommentPost"));
    }
    
    // verify the required parameter 'content' is set
    if (content == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'content' when calling storeStoreIdCommentPost",
         new ApiException(400, "Missing the required parameter 'content' when calling storeStoreIdCommentPost"));
    }
    

    // create path and map variables
    String path = "/store/{store_id}/comment".replaceAll("\\{format\\}","json").replaceAll("\\{" + "store_id" + "\\}", apiInvoker.escapeString(storeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (replyCommentId != null) {
        localVarBuilder.addTextBody("reply_comment_id", ApiInvoker.parameterToString(replyCommentId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (content != null) {
        localVarBuilder.addTextBody("content", ApiInvoker.parameterToString(content), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("reply_comment_id", ApiInvoker.parameterToString(replyCommentId));
formParams.put("content", ApiInvoker.parameterToString(content));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CommentSuccessIfModel) ApiInvoker.deserialize(localVarResponse,  "", CommentSuccessIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 热品库
  * 热品库 
   * @param storeId 商家ID
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return StoreHotGoodsListModel
  */
  public StoreHotGoodsListModel storeStoreIdHotGoodsListGet (String storeId, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'storeId' is set
      if (storeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling storeStoreIdHotGoodsListGet",
      new ApiException(400, "Missing the required parameter 'storeId' when calling storeStoreIdHotGoodsListGet"));
      }
  

  // create path and map variables
  String path = "/store/{store_id}/hot_goods/list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "store_id" + "\\}", apiInvoker.escapeString(storeId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (StoreHotGoodsListModel) ApiInvoker.deserialize(localVarResponse, "", StoreHotGoodsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 热品库
   * 热品库 
   * @param storeId 商家ID   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void storeStoreIdHotGoodsListGet (String storeId, String pageNum, String pageSize, final Response.Listener<StoreHotGoodsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'storeId' is set
    if (storeId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling storeStoreIdHotGoodsListGet",
         new ApiException(400, "Missing the required parameter 'storeId' when calling storeStoreIdHotGoodsListGet"));
    }
    

    // create path and map variables
    String path = "/store/{store_id}/hot_goods/list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "store_id" + "\\}", apiInvoker.escapeString(storeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StoreHotGoodsListModel) ApiInvoker.deserialize(localVarResponse,  "", StoreHotGoodsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 商家所处的行政省列表
  * 商家所处的行政省列表 
   * @param storeId 商家ID
   * @return ProvincesIfModel
  */
  public ProvincesIfModel storeStoreIdLocatedProvincesGet (String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'storeId' is set
      if (storeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling storeStoreIdLocatedProvincesGet",
      new ApiException(400, "Missing the required parameter 'storeId' when calling storeStoreIdLocatedProvincesGet"));
      }
  

  // create path and map variables
  String path = "/store/{store_id}/located_provinces".replaceAll("\\{format\\}","json").replaceAll("\\{" + "store_id" + "\\}", apiInvoker.escapeString(storeId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ProvincesIfModel) ApiInvoker.deserialize(localVarResponse, "", ProvincesIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 商家所处的行政省列表
   * 商家所处的行政省列表 
   * @param storeId 商家ID
  */
  public void storeStoreIdLocatedProvincesGet (String storeId, final Response.Listener<ProvincesIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'storeId' is set
    if (storeId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling storeStoreIdLocatedProvincesGet",
         new ApiException(400, "Missing the required parameter 'storeId' when calling storeStoreIdLocatedProvincesGet"));
    }
    

    // create path and map variables
    String path = "/store/{store_id}/located_provinces".replaceAll("\\{format\\}","json").replaceAll("\\{" + "store_id" + "\\}", apiInvoker.escapeString(storeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProvincesIfModel) ApiInvoker.deserialize(localVarResponse,  "", ProvincesIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 商家代理服务器信息
  * 代理服务器信息 
   * @param storeId 商家ID
   * @return StoreProxyInfoIfModel
  */
  public StoreProxyInfoIfModel storeStoreIdProxyInfoGet (String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'storeId' is set
      if (storeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling storeStoreIdProxyInfoGet",
      new ApiException(400, "Missing the required parameter 'storeId' when calling storeStoreIdProxyInfoGet"));
      }
  

  // create path and map variables
  String path = "/store/{store_id}/proxy_info".replaceAll("\\{format\\}","json").replaceAll("\\{" + "store_id" + "\\}", apiInvoker.escapeString(storeId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (StoreProxyInfoIfModel) ApiInvoker.deserialize(localVarResponse, "", StoreProxyInfoIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 商家代理服务器信息
   * 代理服务器信息 
   * @param storeId 商家ID
  */
  public void storeStoreIdProxyInfoGet (String storeId, final Response.Listener<StoreProxyInfoIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'storeId' is set
    if (storeId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling storeStoreIdProxyInfoGet",
         new ApiException(400, "Missing the required parameter 'storeId' when calling storeStoreIdProxyInfoGet"));
    }
    

    // create path and map variables
    String path = "/store/{store_id}/proxy_info".replaceAll("\\{format\\}","json").replaceAll("\\{" + "store_id" + "\\}", apiInvoker.escapeString(storeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StoreProxyInfoIfModel) ApiInvoker.deserialize(localVarResponse,  "", StoreProxyInfoIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 商家优惠列表（分页）
  * 商家优惠列表 
   * @param storeId 商家ID
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return DealsListModel
  */
  public DealsListModel storeStoreIdStoreDealsListGet (String storeId, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'storeId' is set
      if (storeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling storeStoreIdStoreDealsListGet",
      new ApiException(400, "Missing the required parameter 'storeId' when calling storeStoreIdStoreDealsListGet"));
      }
  

  // create path and map variables
  String path = "/store/{store_id}/store_deals_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "store_id" + "\\}", apiInvoker.escapeString(storeId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (DealsListModel) ApiInvoker.deserialize(localVarResponse, "", DealsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 商家优惠列表（分页）
   * 商家优惠列表 
   * @param storeId 商家ID   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void storeStoreIdStoreDealsListGet (String storeId, String pageNum, String pageSize, final Response.Listener<DealsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'storeId' is set
    if (storeId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling storeStoreIdStoreDealsListGet",
         new ApiException(400, "Missing the required parameter 'storeId' when calling storeStoreIdStoreDealsListGet"));
    }
    

    // create path and map variables
    String path = "/store/{store_id}/store_deals_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "store_id" + "\\}", apiInvoker.escapeString(storeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DealsListModel) ApiInvoker.deserialize(localVarResponse,  "", DealsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 商家详情接口
  * 商家详情接口 
   * @param storeId 商家ID
   * @return StoreDetailIfModel
  */
  public StoreDetailIfModel storeStoreIdStoredetailGet (String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'storeId' is set
      if (storeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling storeStoreIdStoredetailGet",
      new ApiException(400, "Missing the required parameter 'storeId' when calling storeStoreIdStoredetailGet"));
      }
  

  // create path and map variables
  String path = "/store/{store_id}/storedetail".replaceAll("\\{format\\}","json").replaceAll("\\{" + "store_id" + "\\}", apiInvoker.escapeString(storeId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (StoreDetailIfModel) ApiInvoker.deserialize(localVarResponse, "", StoreDetailIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 商家详情接口
   * 商家详情接口 
   * @param storeId 商家ID
  */
  public void storeStoreIdStoredetailGet (String storeId, final Response.Listener<StoreDetailIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'storeId' is set
    if (storeId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling storeStoreIdStoredetailGet",
         new ApiException(400, "Missing the required parameter 'storeId' when calling storeStoreIdStoredetailGet"));
    }
    

    // create path and map variables
    String path = "/store/{store_id}/storedetail".replaceAll("\\{format\\}","json").replaceAll("\\{" + "store_id" + "\\}", apiInvoker.escapeString(storeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StoreDetailIfModel) ApiInvoker.deserialize(localVarResponse,  "", StoreDetailIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 商家详情帖子列表（分页）
  * 商家详情帖子列表 
   * @param storeId 商家ID
   * @param type 帖子类型 - 0：所有 1：晒单
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return TopicsListModel
  */
  public TopicsListModel storeStoreIdTopicListGet (String storeId, String type, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'storeId' is set
      if (storeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling storeStoreIdTopicListGet",
      new ApiException(400, "Missing the required parameter 'storeId' when calling storeStoreIdTopicListGet"));
      }
  

  // create path and map variables
  String path = "/store/{store_id}/topic_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "store_id" + "\\}", apiInvoker.escapeString(storeId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (TopicsListModel) ApiInvoker.deserialize(localVarResponse, "", TopicsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 商家详情帖子列表（分页）
   * 商家详情帖子列表 
   * @param storeId 商家ID   * @param type 帖子类型 - 0：所有 1：晒单   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void storeStoreIdTopicListGet (String storeId, String type, String pageNum, String pageSize, final Response.Listener<TopicsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'storeId' is set
    if (storeId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling storeStoreIdTopicListGet",
         new ApiException(400, "Missing the required parameter 'storeId' when calling storeStoreIdTopicListGet"));
    }
    

    // create path and map variables
    String path = "/store/{store_id}/topic_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "store_id" + "\\}", apiInvoker.escapeString(storeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TopicsListModel) ApiInvoker.deserialize(localVarResponse,  "", TopicsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 商家首页 - 更多商家
  * 商家首页 - 更多商家 
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @param excludedIds 排除的商家id 用,号分隔
   * @return StoresWithDealsListModel
  */
  public StoresWithDealsListModel storeStoresWithDealsListGet (String pageNum, String pageSize, String excludedIds) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/store/stores_with_deals_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "excluded_ids", excludedIds));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (StoresWithDealsListModel) ApiInvoker.deserialize(localVarResponse, "", StoresWithDealsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 商家首页 - 更多商家
   * 商家首页 - 更多商家 
   * @param pageNum 页码   * @param pageSize 每页记录数   * @param excludedIds 排除的商家id 用,号分隔
  */
  public void storeStoresWithDealsListGet (String pageNum, String pageSize, String excludedIds, final Response.Listener<StoresWithDealsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/store/stores_with_deals_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "excluded_ids", excludedIds));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StoresWithDealsListModel) ApiInvoker.deserialize(localVarResponse,  "", StoresWithDealsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 标签关联的优惠列表（分页）
  * 获取标签关联的优惠列表 
   * @param tagId 标签ID
   * @param categoryName 优惠分类名称
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return TagRelatedDealsListModel
  */
  public TagRelatedDealsListModel tagTagIdDealsListGet (String tagId, String categoryName, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'tagId' is set
      if (tagId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tagId' when calling tagTagIdDealsListGet",
      new ApiException(400, "Missing the required parameter 'tagId' when calling tagTagIdDealsListGet"));
      }
  

  // create path and map variables
  String path = "/tag/{tag_id}/deals/list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "tag_id" + "\\}", apiInvoker.escapeString(tagId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "category_name", categoryName));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (TagRelatedDealsListModel) ApiInvoker.deserialize(localVarResponse, "", TagRelatedDealsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 标签关联的优惠列表（分页）
   * 获取标签关联的优惠列表 
   * @param tagId 标签ID   * @param categoryName 优惠分类名称   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void tagTagIdDealsListGet (String tagId, String categoryName, String pageNum, String pageSize, final Response.Listener<TagRelatedDealsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'tagId' is set
    if (tagId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'tagId' when calling tagTagIdDealsListGet",
         new ApiException(400, "Missing the required parameter 'tagId' when calling tagTagIdDealsListGet"));
    }
    

    // create path and map variables
    String path = "/tag/{tag_id}/deals/list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "tag_id" + "\\}", apiInvoker.escapeString(tagId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "category_name", categoryName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TagRelatedDealsListModel) ApiInvoker.deserialize(localVarResponse,  "", TagRelatedDealsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 标签关联的帖子列表（分页）
  * 获取和标签关联的帖子列表 
   * @param tagName 标签名称
   * @param type 类型 - 1：普通帖子 2：晒单
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return TopicsListModel
  */
  public TopicsListModel tagTagNameTopicsListGet (String tagName, String type, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'tagName' is set
      if (tagName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tagName' when calling tagTagNameTopicsListGet",
      new ApiException(400, "Missing the required parameter 'tagName' when calling tagTagNameTopicsListGet"));
      }
  
      // verify the required parameter 'type' is set
      if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling tagTagNameTopicsListGet",
      new ApiException(400, "Missing the required parameter 'type' when calling tagTagNameTopicsListGet"));
      }
  

  // create path and map variables
  String path = "/tag/{tag_name}/topics/list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "tag_name" + "\\}", apiInvoker.escapeString(tagName.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (TopicsListModel) ApiInvoker.deserialize(localVarResponse, "", TopicsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 标签关联的帖子列表（分页）
   * 获取和标签关联的帖子列表 
   * @param tagName 标签名称   * @param type 类型 - 1：普通帖子 2：晒单   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void tagTagNameTopicsListGet (String tagName, String type, String pageNum, String pageSize, final Response.Listener<TopicsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'tagName' is set
    if (tagName == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'tagName' when calling tagTagNameTopicsListGet",
         new ApiException(400, "Missing the required parameter 'tagName' when calling tagTagNameTopicsListGet"));
    }
    
    // verify the required parameter 'type' is set
    if (type == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'type' when calling tagTagNameTopicsListGet",
         new ApiException(400, "Missing the required parameter 'type' when calling tagTagNameTopicsListGet"));
    }
    

    // create path and map variables
    String path = "/tag/{tag_name}/topics/list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "tag_name" + "\\}", apiInvoker.escapeString(tagName.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TopicsListModel) ApiInvoker.deserialize(localVarResponse,  "", TopicsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 获取论坛标签列表（分页）
  * 获取热门标签列表 
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return TagsListModel
  */
  public TagsListModel tagsListGet (String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/tags/list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (TagsListModel) ApiInvoker.deserialize(localVarResponse, "", TagsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 获取论坛标签列表（分页）
   * 获取热门标签列表 
   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void tagsListGet (String pageNum, String pageSize, final Response.Listener<TagsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/tags/list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TagsListModel) ApiInvoker.deserialize(localVarResponse,  "", TagsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 转运首页
  * 转运首页 
   * @param itemsPerSectionCount 每个区块显示的转运商家数目的上限
   * @return TransshipperIndexIfModel
  */
  public TransshipperIndexIfModel transshipperIndexGet (String itemsPerSectionCount) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/transshipper/index".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "items_per_section_count", itemsPerSectionCount));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (TransshipperIndexIfModel) ApiInvoker.deserialize(localVarResponse, "", TransshipperIndexIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 转运首页
   * 转运首页 
   * @param itemsPerSectionCount 每个区块显示的转运商家数目的上限
  */
  public void transshipperIndexGet (String itemsPerSectionCount, final Response.Listener<TransshipperIndexIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/transshipper/index".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "items_per_section_count", itemsPerSectionCount));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransshipperIndexIfModel) ApiInvoker.deserialize(localVarResponse,  "", TransshipperIndexIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 新增优惠评论
  * 优惠评论 
   * @param transshipperId 转运公司ID
   * @param content 评论内容
   * @param replyCommentId 回复评论的ID
   * @return SuccessModel
  */
  public SuccessModel transshipperTransshipperIdCommentPost (String transshipperId, String content, String replyCommentId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'transshipperId' is set
      if (transshipperId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transshipperId' when calling transshipperTransshipperIdCommentPost",
      new ApiException(400, "Missing the required parameter 'transshipperId' when calling transshipperTransshipperIdCommentPost"));
      }
  
      // verify the required parameter 'content' is set
      if (content == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'content' when calling transshipperTransshipperIdCommentPost",
      new ApiException(400, "Missing the required parameter 'content' when calling transshipperTransshipperIdCommentPost"));
      }
  

  // create path and map variables
  String path = "/transshipper/{transshipper_id}/comment".replaceAll("\\{format\\}","json").replaceAll("\\{" + "transshipper_id" + "\\}", apiInvoker.escapeString(transshipperId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (replyCommentId != null) {
          localVarBuilder.addTextBody("reply_comment_id", ApiInvoker.parameterToString(replyCommentId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (content != null) {
          localVarBuilder.addTextBody("content", ApiInvoker.parameterToString(content), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("reply_comment_id", ApiInvoker.parameterToString(replyCommentId));
formParams.put("content", ApiInvoker.parameterToString(content));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 新增优惠评论
   * 优惠评论 
   * @param transshipperId 转运公司ID   * @param content 评论内容   * @param replyCommentId 回复评论的ID
  */
  public void transshipperTransshipperIdCommentPost (String transshipperId, String content, String replyCommentId, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'transshipperId' is set
    if (transshipperId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'transshipperId' when calling transshipperTransshipperIdCommentPost",
         new ApiException(400, "Missing the required parameter 'transshipperId' when calling transshipperTransshipperIdCommentPost"));
    }
    
    // verify the required parameter 'content' is set
    if (content == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'content' when calling transshipperTransshipperIdCommentPost",
         new ApiException(400, "Missing the required parameter 'content' when calling transshipperTransshipperIdCommentPost"));
    }
    

    // create path and map variables
    String path = "/transshipper/{transshipper_id}/comment".replaceAll("\\{format\\}","json").replaceAll("\\{" + "transshipper_id" + "\\}", apiInvoker.escapeString(transshipperId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (replyCommentId != null) {
        localVarBuilder.addTextBody("reply_comment_id", ApiInvoker.parameterToString(replyCommentId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (content != null) {
        localVarBuilder.addTextBody("content", ApiInvoker.parameterToString(content), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("reply_comment_id", ApiInvoker.parameterToString(replyCommentId));
formParams.put("content", ApiInvoker.parameterToString(content));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 删除用户地址
  * 删除用户地址 
   * @param addressId 地址ID
   * @return SuccessModel
  */
  public SuccessModel userAccountAddressAddressIdDelete (String addressId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'addressId' is set
      if (addressId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'addressId' when calling userAccountAddressAddressIdDelete",
      new ApiException(400, "Missing the required parameter 'addressId' when calling userAccountAddressAddressIdDelete"));
      }
  

  // create path and map variables
  String path = "/user/account/address/{address_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "address_id" + "\\}", apiInvoker.escapeString(addressId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 删除用户地址
   * 删除用户地址 
   * @param addressId 地址ID
  */
  public void userAccountAddressAddressIdDelete (String addressId, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'addressId' is set
    if (addressId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'addressId' when calling userAccountAddressAddressIdDelete",
         new ApiException(400, "Missing the required parameter 'addressId' when calling userAccountAddressAddressIdDelete"));
    }
    

    // create path and map variables
    String path = "/user/account/address/{address_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "address_id" + "\\}", apiInvoker.escapeString(addressId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 修改用户地址
  * 修改用户地址 
   * @param addressId 地址ID
   * @param countryId 国家ID
   * @param postCode 邮编
   * @param provinceId 省份ID
   * @param cityId 城市ID
   * @param districtId 区ID
   * @param detailedAddress 详细地址
   * @param realname 姓名
   * @param phoneNumber 电话号码
   * @param mail 邮件地址
   * @return SuccessModel
  */
  public SuccessModel userAccountAddressAddressIdPut (String addressId, String countryId, String postCode, String provinceId, String cityId, String districtId, String detailedAddress, String realname, String phoneNumber, String mail) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'addressId' is set
      if (addressId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'addressId' when calling userAccountAddressAddressIdPut",
      new ApiException(400, "Missing the required parameter 'addressId' when calling userAccountAddressAddressIdPut"));
      }
  
      // verify the required parameter 'countryId' is set
      if (countryId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'countryId' when calling userAccountAddressAddressIdPut",
      new ApiException(400, "Missing the required parameter 'countryId' when calling userAccountAddressAddressIdPut"));
      }
  
      // verify the required parameter 'postCode' is set
      if (postCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postCode' when calling userAccountAddressAddressIdPut",
      new ApiException(400, "Missing the required parameter 'postCode' when calling userAccountAddressAddressIdPut"));
      }
  
      // verify the required parameter 'provinceId' is set
      if (provinceId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'provinceId' when calling userAccountAddressAddressIdPut",
      new ApiException(400, "Missing the required parameter 'provinceId' when calling userAccountAddressAddressIdPut"));
      }
  
      // verify the required parameter 'cityId' is set
      if (cityId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cityId' when calling userAccountAddressAddressIdPut",
      new ApiException(400, "Missing the required parameter 'cityId' when calling userAccountAddressAddressIdPut"));
      }
  
      // verify the required parameter 'districtId' is set
      if (districtId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'districtId' when calling userAccountAddressAddressIdPut",
      new ApiException(400, "Missing the required parameter 'districtId' when calling userAccountAddressAddressIdPut"));
      }
  
      // verify the required parameter 'detailedAddress' is set
      if (detailedAddress == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'detailedAddress' when calling userAccountAddressAddressIdPut",
      new ApiException(400, "Missing the required parameter 'detailedAddress' when calling userAccountAddressAddressIdPut"));
      }
  
      // verify the required parameter 'realname' is set
      if (realname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'realname' when calling userAccountAddressAddressIdPut",
      new ApiException(400, "Missing the required parameter 'realname' when calling userAccountAddressAddressIdPut"));
      }
  
      // verify the required parameter 'phoneNumber' is set
      if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling userAccountAddressAddressIdPut",
      new ApiException(400, "Missing the required parameter 'phoneNumber' when calling userAccountAddressAddressIdPut"));
      }
  
      // verify the required parameter 'mail' is set
      if (mail == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mail' when calling userAccountAddressAddressIdPut",
      new ApiException(400, "Missing the required parameter 'mail' when calling userAccountAddressAddressIdPut"));
      }
  

  // create path and map variables
  String path = "/user/account/address/{address_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "address_id" + "\\}", apiInvoker.escapeString(addressId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (countryId != null) {
          localVarBuilder.addTextBody("country_id", ApiInvoker.parameterToString(countryId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (postCode != null) {
          localVarBuilder.addTextBody("post_code", ApiInvoker.parameterToString(postCode), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (provinceId != null) {
          localVarBuilder.addTextBody("province_id", ApiInvoker.parameterToString(provinceId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (cityId != null) {
          localVarBuilder.addTextBody("city_id", ApiInvoker.parameterToString(cityId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (districtId != null) {
          localVarBuilder.addTextBody("district_id", ApiInvoker.parameterToString(districtId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (detailedAddress != null) {
          localVarBuilder.addTextBody("detailed_address", ApiInvoker.parameterToString(detailedAddress), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (realname != null) {
          localVarBuilder.addTextBody("realname", ApiInvoker.parameterToString(realname), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (phoneNumber != null) {
          localVarBuilder.addTextBody("phone_number", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (mail != null) {
          localVarBuilder.addTextBody("mail", ApiInvoker.parameterToString(mail), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("country_id", ApiInvoker.parameterToString(countryId));
formParams.put("post_code", ApiInvoker.parameterToString(postCode));
formParams.put("province_id", ApiInvoker.parameterToString(provinceId));
formParams.put("city_id", ApiInvoker.parameterToString(cityId));
formParams.put("district_id", ApiInvoker.parameterToString(districtId));
formParams.put("detailed_address", ApiInvoker.parameterToString(detailedAddress));
formParams.put("realname", ApiInvoker.parameterToString(realname));
formParams.put("phone_number", ApiInvoker.parameterToString(phoneNumber));
formParams.put("mail", ApiInvoker.parameterToString(mail));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 修改用户地址
   * 修改用户地址 
   * @param addressId 地址ID   * @param countryId 国家ID   * @param postCode 邮编   * @param provinceId 省份ID   * @param cityId 城市ID   * @param districtId 区ID   * @param detailedAddress 详细地址   * @param realname 姓名   * @param phoneNumber 电话号码   * @param mail 邮件地址
  */
  public void userAccountAddressAddressIdPut (String addressId, String countryId, String postCode, String provinceId, String cityId, String districtId, String detailedAddress, String realname, String phoneNumber, String mail, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'addressId' is set
    if (addressId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'addressId' when calling userAccountAddressAddressIdPut",
         new ApiException(400, "Missing the required parameter 'addressId' when calling userAccountAddressAddressIdPut"));
    }
    
    // verify the required parameter 'countryId' is set
    if (countryId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'countryId' when calling userAccountAddressAddressIdPut",
         new ApiException(400, "Missing the required parameter 'countryId' when calling userAccountAddressAddressIdPut"));
    }
    
    // verify the required parameter 'postCode' is set
    if (postCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'postCode' when calling userAccountAddressAddressIdPut",
         new ApiException(400, "Missing the required parameter 'postCode' when calling userAccountAddressAddressIdPut"));
    }
    
    // verify the required parameter 'provinceId' is set
    if (provinceId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'provinceId' when calling userAccountAddressAddressIdPut",
         new ApiException(400, "Missing the required parameter 'provinceId' when calling userAccountAddressAddressIdPut"));
    }
    
    // verify the required parameter 'cityId' is set
    if (cityId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'cityId' when calling userAccountAddressAddressIdPut",
         new ApiException(400, "Missing the required parameter 'cityId' when calling userAccountAddressAddressIdPut"));
    }
    
    // verify the required parameter 'districtId' is set
    if (districtId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'districtId' when calling userAccountAddressAddressIdPut",
         new ApiException(400, "Missing the required parameter 'districtId' when calling userAccountAddressAddressIdPut"));
    }
    
    // verify the required parameter 'detailedAddress' is set
    if (detailedAddress == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'detailedAddress' when calling userAccountAddressAddressIdPut",
         new ApiException(400, "Missing the required parameter 'detailedAddress' when calling userAccountAddressAddressIdPut"));
    }
    
    // verify the required parameter 'realname' is set
    if (realname == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'realname' when calling userAccountAddressAddressIdPut",
         new ApiException(400, "Missing the required parameter 'realname' when calling userAccountAddressAddressIdPut"));
    }
    
    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling userAccountAddressAddressIdPut",
         new ApiException(400, "Missing the required parameter 'phoneNumber' when calling userAccountAddressAddressIdPut"));
    }
    
    // verify the required parameter 'mail' is set
    if (mail == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'mail' when calling userAccountAddressAddressIdPut",
         new ApiException(400, "Missing the required parameter 'mail' when calling userAccountAddressAddressIdPut"));
    }
    

    // create path and map variables
    String path = "/user/account/address/{address_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "address_id" + "\\}", apiInvoker.escapeString(addressId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (countryId != null) {
        localVarBuilder.addTextBody("country_id", ApiInvoker.parameterToString(countryId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (postCode != null) {
        localVarBuilder.addTextBody("post_code", ApiInvoker.parameterToString(postCode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (provinceId != null) {
        localVarBuilder.addTextBody("province_id", ApiInvoker.parameterToString(provinceId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (cityId != null) {
        localVarBuilder.addTextBody("city_id", ApiInvoker.parameterToString(cityId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (districtId != null) {
        localVarBuilder.addTextBody("district_id", ApiInvoker.parameterToString(districtId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (detailedAddress != null) {
        localVarBuilder.addTextBody("detailed_address", ApiInvoker.parameterToString(detailedAddress), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (realname != null) {
        localVarBuilder.addTextBody("realname", ApiInvoker.parameterToString(realname), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (phoneNumber != null) {
        localVarBuilder.addTextBody("phone_number", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (mail != null) {
        localVarBuilder.addTextBody("mail", ApiInvoker.parameterToString(mail), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("country_id", ApiInvoker.parameterToString(countryId));
formParams.put("post_code", ApiInvoker.parameterToString(postCode));
formParams.put("province_id", ApiInvoker.parameterToString(provinceId));
formParams.put("city_id", ApiInvoker.parameterToString(cityId));
formParams.put("district_id", ApiInvoker.parameterToString(districtId));
formParams.put("detailed_address", ApiInvoker.parameterToString(detailedAddress));
formParams.put("realname", ApiInvoker.parameterToString(realname));
formParams.put("phone_number", ApiInvoker.parameterToString(phoneNumber));
formParams.put("mail", ApiInvoker.parameterToString(mail));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 添加用户地址
  * 添加用户地址 
   * @param countryId 国家ID
   * @param postCode 邮编
   * @param provinceId 省份ID
   * @param cityId 城市ID
   * @param districtId 区ID
   * @param detailedAddress 详细地址
   * @param realname 姓名
   * @param phoneNumber 电话号码
   * @param mail 邮件地址
   * @return SuccessModel
  */
  public SuccessModel userAccountAddressPost (String countryId, String postCode, String provinceId, String cityId, String districtId, String detailedAddress, String realname, String phoneNumber, String mail) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'countryId' is set
      if (countryId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'countryId' when calling userAccountAddressPost",
      new ApiException(400, "Missing the required parameter 'countryId' when calling userAccountAddressPost"));
      }
  
      // verify the required parameter 'postCode' is set
      if (postCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'postCode' when calling userAccountAddressPost",
      new ApiException(400, "Missing the required parameter 'postCode' when calling userAccountAddressPost"));
      }
  
      // verify the required parameter 'provinceId' is set
      if (provinceId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'provinceId' when calling userAccountAddressPost",
      new ApiException(400, "Missing the required parameter 'provinceId' when calling userAccountAddressPost"));
      }
  
      // verify the required parameter 'cityId' is set
      if (cityId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cityId' when calling userAccountAddressPost",
      new ApiException(400, "Missing the required parameter 'cityId' when calling userAccountAddressPost"));
      }
  
      // verify the required parameter 'districtId' is set
      if (districtId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'districtId' when calling userAccountAddressPost",
      new ApiException(400, "Missing the required parameter 'districtId' when calling userAccountAddressPost"));
      }
  
      // verify the required parameter 'detailedAddress' is set
      if (detailedAddress == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'detailedAddress' when calling userAccountAddressPost",
      new ApiException(400, "Missing the required parameter 'detailedAddress' when calling userAccountAddressPost"));
      }
  
      // verify the required parameter 'realname' is set
      if (realname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'realname' when calling userAccountAddressPost",
      new ApiException(400, "Missing the required parameter 'realname' when calling userAccountAddressPost"));
      }
  
      // verify the required parameter 'phoneNumber' is set
      if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling userAccountAddressPost",
      new ApiException(400, "Missing the required parameter 'phoneNumber' when calling userAccountAddressPost"));
      }
  
      // verify the required parameter 'mail' is set
      if (mail == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mail' when calling userAccountAddressPost",
      new ApiException(400, "Missing the required parameter 'mail' when calling userAccountAddressPost"));
      }
  

  // create path and map variables
  String path = "/user/account/address".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (countryId != null) {
          localVarBuilder.addTextBody("country_id", ApiInvoker.parameterToString(countryId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (postCode != null) {
          localVarBuilder.addTextBody("post_code", ApiInvoker.parameterToString(postCode), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (provinceId != null) {
          localVarBuilder.addTextBody("province_id", ApiInvoker.parameterToString(provinceId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (cityId != null) {
          localVarBuilder.addTextBody("city_id", ApiInvoker.parameterToString(cityId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (districtId != null) {
          localVarBuilder.addTextBody("district_id", ApiInvoker.parameterToString(districtId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (detailedAddress != null) {
          localVarBuilder.addTextBody("detailed_address", ApiInvoker.parameterToString(detailedAddress), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (realname != null) {
          localVarBuilder.addTextBody("realname", ApiInvoker.parameterToString(realname), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (phoneNumber != null) {
          localVarBuilder.addTextBody("phone_number", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (mail != null) {
          localVarBuilder.addTextBody("mail", ApiInvoker.parameterToString(mail), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("country_id", ApiInvoker.parameterToString(countryId));
formParams.put("post_code", ApiInvoker.parameterToString(postCode));
formParams.put("province_id", ApiInvoker.parameterToString(provinceId));
formParams.put("city_id", ApiInvoker.parameterToString(cityId));
formParams.put("district_id", ApiInvoker.parameterToString(districtId));
formParams.put("detailed_address", ApiInvoker.parameterToString(detailedAddress));
formParams.put("realname", ApiInvoker.parameterToString(realname));
formParams.put("phone_number", ApiInvoker.parameterToString(phoneNumber));
formParams.put("mail", ApiInvoker.parameterToString(mail));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 添加用户地址
   * 添加用户地址 
   * @param countryId 国家ID   * @param postCode 邮编   * @param provinceId 省份ID   * @param cityId 城市ID   * @param districtId 区ID   * @param detailedAddress 详细地址   * @param realname 姓名   * @param phoneNumber 电话号码   * @param mail 邮件地址
  */
  public void userAccountAddressPost (String countryId, String postCode, String provinceId, String cityId, String districtId, String detailedAddress, String realname, String phoneNumber, String mail, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'countryId' is set
    if (countryId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'countryId' when calling userAccountAddressPost",
         new ApiException(400, "Missing the required parameter 'countryId' when calling userAccountAddressPost"));
    }
    
    // verify the required parameter 'postCode' is set
    if (postCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'postCode' when calling userAccountAddressPost",
         new ApiException(400, "Missing the required parameter 'postCode' when calling userAccountAddressPost"));
    }
    
    // verify the required parameter 'provinceId' is set
    if (provinceId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'provinceId' when calling userAccountAddressPost",
         new ApiException(400, "Missing the required parameter 'provinceId' when calling userAccountAddressPost"));
    }
    
    // verify the required parameter 'cityId' is set
    if (cityId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'cityId' when calling userAccountAddressPost",
         new ApiException(400, "Missing the required parameter 'cityId' when calling userAccountAddressPost"));
    }
    
    // verify the required parameter 'districtId' is set
    if (districtId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'districtId' when calling userAccountAddressPost",
         new ApiException(400, "Missing the required parameter 'districtId' when calling userAccountAddressPost"));
    }
    
    // verify the required parameter 'detailedAddress' is set
    if (detailedAddress == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'detailedAddress' when calling userAccountAddressPost",
         new ApiException(400, "Missing the required parameter 'detailedAddress' when calling userAccountAddressPost"));
    }
    
    // verify the required parameter 'realname' is set
    if (realname == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'realname' when calling userAccountAddressPost",
         new ApiException(400, "Missing the required parameter 'realname' when calling userAccountAddressPost"));
    }
    
    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling userAccountAddressPost",
         new ApiException(400, "Missing the required parameter 'phoneNumber' when calling userAccountAddressPost"));
    }
    
    // verify the required parameter 'mail' is set
    if (mail == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'mail' when calling userAccountAddressPost",
         new ApiException(400, "Missing the required parameter 'mail' when calling userAccountAddressPost"));
    }
    

    // create path and map variables
    String path = "/user/account/address".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (countryId != null) {
        localVarBuilder.addTextBody("country_id", ApiInvoker.parameterToString(countryId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (postCode != null) {
        localVarBuilder.addTextBody("post_code", ApiInvoker.parameterToString(postCode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (provinceId != null) {
        localVarBuilder.addTextBody("province_id", ApiInvoker.parameterToString(provinceId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (cityId != null) {
        localVarBuilder.addTextBody("city_id", ApiInvoker.parameterToString(cityId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (districtId != null) {
        localVarBuilder.addTextBody("district_id", ApiInvoker.parameterToString(districtId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (detailedAddress != null) {
        localVarBuilder.addTextBody("detailed_address", ApiInvoker.parameterToString(detailedAddress), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (realname != null) {
        localVarBuilder.addTextBody("realname", ApiInvoker.parameterToString(realname), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (phoneNumber != null) {
        localVarBuilder.addTextBody("phone_number", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (mail != null) {
        localVarBuilder.addTextBody("mail", ApiInvoker.parameterToString(mail), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("country_id", ApiInvoker.parameterToString(countryId));
formParams.put("post_code", ApiInvoker.parameterToString(postCode));
formParams.put("province_id", ApiInvoker.parameterToString(provinceId));
formParams.put("city_id", ApiInvoker.parameterToString(cityId));
formParams.put("district_id", ApiInvoker.parameterToString(districtId));
formParams.put("detailed_address", ApiInvoker.parameterToString(detailedAddress));
formParams.put("realname", ApiInvoker.parameterToString(realname));
formParams.put("phone_number", ApiInvoker.parameterToString(phoneNumber));
formParams.put("mail", ApiInvoker.parameterToString(mail));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 银行卡删除
  * 银行卡绑定 
   * @param cardId 银行卡ID
   * @return SuccessModel
  */
  public SuccessModel userAccountBankCardDelete (String cardId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'cardId' is set
      if (cardId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cardId' when calling userAccountBankCardDelete",
      new ApiException(400, "Missing the required parameter 'cardId' when calling userAccountBankCardDelete"));
      }
  

  // create path and map variables
  String path = "/user/account/bank_card".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (cardId != null) {
          localVarBuilder.addTextBody("card_id", ApiInvoker.parameterToString(cardId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("card_id", ApiInvoker.parameterToString(cardId));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 银行卡删除
   * 银行卡绑定 
   * @param cardId 银行卡ID
  */
  public void userAccountBankCardDelete (String cardId, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'cardId' is set
    if (cardId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'cardId' when calling userAccountBankCardDelete",
         new ApiException(400, "Missing the required parameter 'cardId' when calling userAccountBankCardDelete"));
    }
    

    // create path and map variables
    String path = "/user/account/bank_card".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (cardId != null) {
        localVarBuilder.addTextBody("card_id", ApiInvoker.parameterToString(cardId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("card_id", ApiInvoker.parameterToString(cardId));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 银行卡绑定
  * 银行卡绑定 
   * @param cardNumber 银行卡号
   * @param realname 持卡人姓名
   * @param hwid 设备标识编号 Android传imei iOS传idfa
   * @return BindBankCardSuccessModel
  */
  public BindBankCardSuccessModel userAccountBankCardPost (String cardNumber, String realname, String hwid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'cardNumber' is set
      if (cardNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cardNumber' when calling userAccountBankCardPost",
      new ApiException(400, "Missing the required parameter 'cardNumber' when calling userAccountBankCardPost"));
      }
  
      // verify the required parameter 'realname' is set
      if (realname == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'realname' when calling userAccountBankCardPost",
      new ApiException(400, "Missing the required parameter 'realname' when calling userAccountBankCardPost"));
      }
  
      // verify the required parameter 'hwid' is set
      if (hwid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'hwid' when calling userAccountBankCardPost",
      new ApiException(400, "Missing the required parameter 'hwid' when calling userAccountBankCardPost"));
      }
  

  // create path and map variables
  String path = "/user/account/bank_card".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (cardNumber != null) {
          localVarBuilder.addTextBody("card_number", ApiInvoker.parameterToString(cardNumber), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (realname != null) {
          localVarBuilder.addTextBody("realname", ApiInvoker.parameterToString(realname), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (hwid != null) {
          localVarBuilder.addTextBody("hwid", ApiInvoker.parameterToString(hwid), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("card_number", ApiInvoker.parameterToString(cardNumber));
formParams.put("realname", ApiInvoker.parameterToString(realname));
formParams.put("hwid", ApiInvoker.parameterToString(hwid));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (BindBankCardSuccessModel) ApiInvoker.deserialize(localVarResponse, "", BindBankCardSuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 银行卡绑定
   * 银行卡绑定 
   * @param cardNumber 银行卡号   * @param realname 持卡人姓名   * @param hwid 设备标识编号 Android传imei iOS传idfa
  */
  public void userAccountBankCardPost (String cardNumber, String realname, String hwid, final Response.Listener<BindBankCardSuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'cardNumber' is set
    if (cardNumber == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'cardNumber' when calling userAccountBankCardPost",
         new ApiException(400, "Missing the required parameter 'cardNumber' when calling userAccountBankCardPost"));
    }
    
    // verify the required parameter 'realname' is set
    if (realname == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'realname' when calling userAccountBankCardPost",
         new ApiException(400, "Missing the required parameter 'realname' when calling userAccountBankCardPost"));
    }
    
    // verify the required parameter 'hwid' is set
    if (hwid == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'hwid' when calling userAccountBankCardPost",
         new ApiException(400, "Missing the required parameter 'hwid' when calling userAccountBankCardPost"));
    }
    

    // create path and map variables
    String path = "/user/account/bank_card".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (cardNumber != null) {
        localVarBuilder.addTextBody("card_number", ApiInvoker.parameterToString(cardNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (realname != null) {
        localVarBuilder.addTextBody("realname", ApiInvoker.parameterToString(realname), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (hwid != null) {
        localVarBuilder.addTextBody("hwid", ApiInvoker.parameterToString(hwid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("card_number", ApiInvoker.parameterToString(cardNumber));
formParams.put("realname", ApiInvoker.parameterToString(realname));
formParams.put("hwid", ApiInvoker.parameterToString(hwid));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BindBankCardSuccessModel) ApiInvoker.deserialize(localVarResponse,  "", BindBankCardSuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 扫描用户银行卡
  * 扫描用户银行卡 
   * @param cardPic 银行卡图片二进制转base64编码后的内容
   * @return SuccessWithStringModel
  */
  public SuccessWithStringModel userAccountBankCardScanningPost (String cardPic) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'cardPic' is set
      if (cardPic == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cardPic' when calling userAccountBankCardScanningPost",
      new ApiException(400, "Missing the required parameter 'cardPic' when calling userAccountBankCardScanningPost"));
      }
  

  // create path and map variables
  String path = "/user/account/bank_card/scanning".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (cardPic != null) {
          localVarBuilder.addTextBody("card_pic", ApiInvoker.parameterToString(cardPic), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("card_pic", ApiInvoker.parameterToString(cardPic));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessWithStringModel) ApiInvoker.deserialize(localVarResponse, "", SuccessWithStringModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 扫描用户银行卡
   * 扫描用户银行卡 
   * @param cardPic 银行卡图片二进制转base64编码后的内容
  */
  public void userAccountBankCardScanningPost (String cardPic, final Response.Listener<SuccessWithStringModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'cardPic' is set
    if (cardPic == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'cardPic' when calling userAccountBankCardScanningPost",
         new ApiException(400, "Missing the required parameter 'cardPic' when calling userAccountBankCardScanningPost"));
    }
    

    // create path and map variables
    String path = "/user/account/bank_card/scanning".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (cardPic != null) {
        localVarBuilder.addTextBody("card_pic", ApiInvoker.parameterToString(cardPic), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("card_pic", ApiInvoker.parameterToString(cardPic));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessWithStringModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessWithStringModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 第三方平台帐号绑定已有账号
  * 第三方平台帐号绑定已有账号 
   * @param tppId 第三方平台ID
   * @param uid openid
   * @param token token
   * @param unionId union_id
   * @param account 55帐号账户名
   * @param password 55帐号密码
   * @return LoginSuccessModel
  */
  public LoginSuccessModel userAccountBindingTppTppIdPost (String tppId, String uid, String token, String unionId, String account, String password) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'tppId' is set
      if (tppId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tppId' when calling userAccountBindingTppTppIdPost",
      new ApiException(400, "Missing the required parameter 'tppId' when calling userAccountBindingTppTppIdPost"));
      }
  

  // create path and map variables
  String path = "/user/account/binding/tpp/{tpp_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "tpp_id" + "\\}", apiInvoker.escapeString(tppId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (uid != null) {
          localVarBuilder.addTextBody("uid", ApiInvoker.parameterToString(uid), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (token != null) {
          localVarBuilder.addTextBody("token", ApiInvoker.parameterToString(token), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (unionId != null) {
          localVarBuilder.addTextBody("union_id", ApiInvoker.parameterToString(unionId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (account != null) {
          localVarBuilder.addTextBody("account", ApiInvoker.parameterToString(account), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (password != null) {
          localVarBuilder.addTextBody("password", ApiInvoker.parameterToString(password), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("uid", ApiInvoker.parameterToString(uid));
formParams.put("token", ApiInvoker.parameterToString(token));
formParams.put("union_id", ApiInvoker.parameterToString(unionId));
formParams.put("account", ApiInvoker.parameterToString(account));
formParams.put("password", ApiInvoker.parameterToString(password));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (LoginSuccessModel) ApiInvoker.deserialize(localVarResponse, "", LoginSuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 第三方平台帐号绑定已有账号
   * 第三方平台帐号绑定已有账号 
   * @param tppId 第三方平台ID   * @param uid openid   * @param token token   * @param unionId union_id   * @param account 55帐号账户名   * @param password 55帐号密码
  */
  public void userAccountBindingTppTppIdPost (String tppId, String uid, String token, String unionId, String account, String password, final Response.Listener<LoginSuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'tppId' is set
    if (tppId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'tppId' when calling userAccountBindingTppTppIdPost",
         new ApiException(400, "Missing the required parameter 'tppId' when calling userAccountBindingTppTppIdPost"));
    }
    

    // create path and map variables
    String path = "/user/account/binding/tpp/{tpp_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "tpp_id" + "\\}", apiInvoker.escapeString(tppId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (uid != null) {
        localVarBuilder.addTextBody("uid", ApiInvoker.parameterToString(uid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (token != null) {
        localVarBuilder.addTextBody("token", ApiInvoker.parameterToString(token), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (unionId != null) {
        localVarBuilder.addTextBody("union_id", ApiInvoker.parameterToString(unionId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (account != null) {
        localVarBuilder.addTextBody("account", ApiInvoker.parameterToString(account), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (password != null) {
        localVarBuilder.addTextBody("password", ApiInvoker.parameterToString(password), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("uid", ApiInvoker.parameterToString(uid));
formParams.put("token", ApiInvoker.parameterToString(token));
formParams.put("union_id", ApiInvoker.parameterToString(unionId));
formParams.put("account", ApiInvoker.parameterToString(account));
formParams.put("password", ApiInvoker.parameterToString(password));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((LoginSuccessModel) ApiInvoker.deserialize(localVarResponse,  "", LoginSuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户简要信息
  * 用户简要信息 
   * @return UserBriefInfoIfModel
  */
  public UserBriefInfoIfModel userAccountBriefInfoGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/account/brief_info".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (UserBriefInfoIfModel) ApiInvoker.deserialize(localVarResponse, "", UserBriefInfoIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户简要信息
   * 用户简要信息 

  */
  public void userAccountBriefInfoGet (final Response.Listener<UserBriefInfoIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/account/brief_info".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UserBriefInfoIfModel) ApiInvoker.deserialize(localVarResponse,  "", UserBriefInfoIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 扫描用户身份证
  * 扫描用户身份证 
   * @param cardPic 身份证图片二进制转base64编码后的内容
   * @return SuccessWithStringModel
  */
  public SuccessWithStringModel userAccountIdCardScanningPost (String cardPic) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'cardPic' is set
      if (cardPic == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'cardPic' when calling userAccountIdCardScanningPost",
      new ApiException(400, "Missing the required parameter 'cardPic' when calling userAccountIdCardScanningPost"));
      }
  

  // create path and map variables
  String path = "/user/account/id_card/scanning".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (cardPic != null) {
          localVarBuilder.addTextBody("card_pic", ApiInvoker.parameterToString(cardPic), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("card_pic", ApiInvoker.parameterToString(cardPic));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessWithStringModel) ApiInvoker.deserialize(localVarResponse, "", SuccessWithStringModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 扫描用户身份证
   * 扫描用户身份证 
   * @param cardPic 身份证图片二进制转base64编码后的内容
  */
  public void userAccountIdCardScanningPost (String cardPic, final Response.Listener<SuccessWithStringModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'cardPic' is set
    if (cardPic == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'cardPic' when calling userAccountIdCardScanningPost",
         new ApiException(400, "Missing the required parameter 'cardPic' when calling userAccountIdCardScanningPost"));
    }
    

    // create path and map variables
    String path = "/user/account/id_card/scanning".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (cardPic != null) {
        localVarBuilder.addTextBody("card_pic", ApiInvoker.parameterToString(cardPic), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("card_pic", ApiInvoker.parameterToString(cardPic));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessWithStringModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessWithStringModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户账户信息
  * 用户账户信息 
   * @return UserInfoIfModel
  */
  public UserInfoIfModel userAccountInfoGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/account/info".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (UserInfoIfModel) ApiInvoker.deserialize(localVarResponse, "", UserInfoIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户账户信息
   * 用户账户信息 

  */
  public void userAccountInfoGet (final Response.Listener<UserInfoIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/account/info".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UserInfoIfModel) ApiInvoker.deserialize(localVarResponse,  "", UserInfoIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 通过桌面快速查看的用户信息
  * 通过桌面快速查看的用户信息 
   * @return UserInfoQuickViewIfModel
  */
  public UserInfoQuickViewIfModel userAccountInfoQuickViewGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/account/info/quick_view".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (UserInfoQuickViewIfModel) ApiInvoker.deserialize(localVarResponse, "", UserInfoQuickViewIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 通过桌面快速查看的用户信息
   * 通过桌面快速查看的用户信息 

  */
  public void userAccountInfoQuickViewGet (final Response.Listener<UserInfoQuickViewIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/account/info/quick_view".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UserInfoQuickViewIfModel) ApiInvoker.deserialize(localVarResponse,  "", UserInfoQuickViewIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 修改用户信息
  * 修改用户信息 
   * @param avatar 头像（图片文件base64的内容）
   * @param sex 性别 - 0：保密 1：男 2：女
   * @param provinceName 地区 - 省名称
   * @param cityName 地区 - 市名称
   * @param districtName 地区 - 区县名称
   * @param signature 签名
   * @return SuccessModel
  */
  public SuccessModel userAccountInfoSettingPost (String avatar, String sex, String provinceName, String cityName, String districtName, String signature) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/account/info/setting".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (avatar != null) {
          localVarBuilder.addTextBody("avatar", ApiInvoker.parameterToString(avatar), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (sex != null) {
          localVarBuilder.addTextBody("sex", ApiInvoker.parameterToString(sex), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (provinceName != null) {
          localVarBuilder.addTextBody("province_name", ApiInvoker.parameterToString(provinceName), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (cityName != null) {
          localVarBuilder.addTextBody("city_name", ApiInvoker.parameterToString(cityName), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (districtName != null) {
          localVarBuilder.addTextBody("district_name", ApiInvoker.parameterToString(districtName), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (signature != null) {
          localVarBuilder.addTextBody("signature", ApiInvoker.parameterToString(signature), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("avatar", ApiInvoker.parameterToString(avatar));
formParams.put("sex", ApiInvoker.parameterToString(sex));
formParams.put("province_name", ApiInvoker.parameterToString(provinceName));
formParams.put("city_name", ApiInvoker.parameterToString(cityName));
formParams.put("district_name", ApiInvoker.parameterToString(districtName));
formParams.put("signature", ApiInvoker.parameterToString(signature));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 修改用户信息
   * 修改用户信息 
   * @param avatar 头像（图片文件base64的内容）   * @param sex 性别 - 0：保密 1：男 2：女   * @param provinceName 地区 - 省名称   * @param cityName 地区 - 市名称   * @param districtName 地区 - 区县名称   * @param signature 签名
  */
  public void userAccountInfoSettingPost (String avatar, String sex, String provinceName, String cityName, String districtName, String signature, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/account/info/setting".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (avatar != null) {
        localVarBuilder.addTextBody("avatar", ApiInvoker.parameterToString(avatar), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (sex != null) {
        localVarBuilder.addTextBody("sex", ApiInvoker.parameterToString(sex), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (provinceName != null) {
        localVarBuilder.addTextBody("province_name", ApiInvoker.parameterToString(provinceName), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (cityName != null) {
        localVarBuilder.addTextBody("city_name", ApiInvoker.parameterToString(cityName), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (districtName != null) {
        localVarBuilder.addTextBody("district_name", ApiInvoker.parameterToString(districtName), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (signature != null) {
        localVarBuilder.addTextBody("signature", ApiInvoker.parameterToString(signature), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("avatar", ApiInvoker.parameterToString(avatar));
formParams.put("sex", ApiInvoker.parameterToString(sex));
formParams.put("province_name", ApiInvoker.parameterToString(provinceName));
formParams.put("city_name", ApiInvoker.parameterToString(cityName));
formParams.put("district_name", ApiInvoker.parameterToString(districtName));
formParams.put("signature", ApiInvoker.parameterToString(signature));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 通过第三方平台登录
  * 通过第三方平台登录 
   * @param tppId 第三方平台ID
   * @param uid openid
   * @param token token
   * @param unionId union_id
   * @return LoginSuccessModel
  */
  public LoginSuccessModel userAccountLoginByTppTppIdPost (String tppId, String uid, String token, String unionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'tppId' is set
      if (tppId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tppId' when calling userAccountLoginByTppTppIdPost",
      new ApiException(400, "Missing the required parameter 'tppId' when calling userAccountLoginByTppTppIdPost"));
      }
  

  // create path and map variables
  String path = "/user/account/login/by_tpp/{tpp_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "tpp_id" + "\\}", apiInvoker.escapeString(tppId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (uid != null) {
          localVarBuilder.addTextBody("uid", ApiInvoker.parameterToString(uid), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (token != null) {
          localVarBuilder.addTextBody("token", ApiInvoker.parameterToString(token), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (unionId != null) {
          localVarBuilder.addTextBody("union_id", ApiInvoker.parameterToString(unionId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("uid", ApiInvoker.parameterToString(uid));
formParams.put("token", ApiInvoker.parameterToString(token));
formParams.put("union_id", ApiInvoker.parameterToString(unionId));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (LoginSuccessModel) ApiInvoker.deserialize(localVarResponse, "", LoginSuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 通过第三方平台登录
   * 通过第三方平台登录 
   * @param tppId 第三方平台ID   * @param uid openid   * @param token token   * @param unionId union_id
  */
  public void userAccountLoginByTppTppIdPost (String tppId, String uid, String token, String unionId, final Response.Listener<LoginSuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'tppId' is set
    if (tppId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'tppId' when calling userAccountLoginByTppTppIdPost",
         new ApiException(400, "Missing the required parameter 'tppId' when calling userAccountLoginByTppTppIdPost"));
    }
    

    // create path and map variables
    String path = "/user/account/login/by_tpp/{tpp_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "tpp_id" + "\\}", apiInvoker.escapeString(tppId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (uid != null) {
        localVarBuilder.addTextBody("uid", ApiInvoker.parameterToString(uid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (token != null) {
        localVarBuilder.addTextBody("token", ApiInvoker.parameterToString(token), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (unionId != null) {
        localVarBuilder.addTextBody("union_id", ApiInvoker.parameterToString(unionId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("uid", ApiInvoker.parameterToString(uid));
formParams.put("token", ApiInvoker.parameterToString(token));
formParams.put("union_id", ApiInvoker.parameterToString(unionId));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((LoginSuccessModel) ApiInvoker.deserialize(localVarResponse,  "", LoginSuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 登录
  * 登录接口 
   * @param account 登录账户
   * @param password 密码
   * @param tppId 第三方平台ID
   * @param geetestChallenge geetest参数
   * @param geetestValidate geetest参数
   * @param geetestSeccode geetest参数
   * @param openid openid
   * @param token token
   * @param unionId union_id
   * @return LoginSuccessModel
  */
  public LoginSuccessModel userAccountLoginPost (String account, String password, String tppId, String geetestChallenge, String geetestValidate, String geetestSeccode, String openid, String token, String unionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'account' is set
      if (account == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'account' when calling userAccountLoginPost",
      new ApiException(400, "Missing the required parameter 'account' when calling userAccountLoginPost"));
      }
  
      // verify the required parameter 'password' is set
      if (password == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'password' when calling userAccountLoginPost",
      new ApiException(400, "Missing the required parameter 'password' when calling userAccountLoginPost"));
      }
  
      // verify the required parameter 'tppId' is set
      if (tppId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tppId' when calling userAccountLoginPost",
      new ApiException(400, "Missing the required parameter 'tppId' when calling userAccountLoginPost"));
      }
  

  // create path and map variables
  String path = "/user/account/login".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (account != null) {
          localVarBuilder.addTextBody("account", ApiInvoker.parameterToString(account), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (password != null) {
          localVarBuilder.addTextBody("password", ApiInvoker.parameterToString(password), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (geetestChallenge != null) {
          localVarBuilder.addTextBody("geetest_challenge", ApiInvoker.parameterToString(geetestChallenge), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (geetestValidate != null) {
          localVarBuilder.addTextBody("geetest_validate", ApiInvoker.parameterToString(geetestValidate), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (geetestSeccode != null) {
          localVarBuilder.addTextBody("geetest_seccode", ApiInvoker.parameterToString(geetestSeccode), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (tppId != null) {
          localVarBuilder.addTextBody("tpp_id", ApiInvoker.parameterToString(tppId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (openid != null) {
          localVarBuilder.addTextBody("openid", ApiInvoker.parameterToString(openid), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (token != null) {
          localVarBuilder.addTextBody("token", ApiInvoker.parameterToString(token), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (unionId != null) {
          localVarBuilder.addTextBody("union_id", ApiInvoker.parameterToString(unionId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("account", ApiInvoker.parameterToString(account));
formParams.put("password", ApiInvoker.parameterToString(password));
formParams.put("geetest_challenge", ApiInvoker.parameterToString(geetestChallenge));
formParams.put("geetest_validate", ApiInvoker.parameterToString(geetestValidate));
formParams.put("geetest_seccode", ApiInvoker.parameterToString(geetestSeccode));
formParams.put("tpp_id", ApiInvoker.parameterToString(tppId));
formParams.put("openid", ApiInvoker.parameterToString(openid));
formParams.put("token", ApiInvoker.parameterToString(token));
formParams.put("union_id", ApiInvoker.parameterToString(unionId));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (LoginSuccessModel) ApiInvoker.deserialize(localVarResponse, "", LoginSuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 登录
   * 登录接口 
   * @param account 登录账户   * @param password 密码   * @param tppId 第三方平台ID   * @param geetestChallenge geetest参数   * @param geetestValidate geetest参数   * @param geetestSeccode geetest参数   * @param openid openid   * @param token token   * @param unionId union_id
  */
  public void userAccountLoginPost (String account, String password, String tppId, String geetestChallenge, String geetestValidate, String geetestSeccode, String openid, String token, String unionId, final Response.Listener<LoginSuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'account' is set
    if (account == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'account' when calling userAccountLoginPost",
         new ApiException(400, "Missing the required parameter 'account' when calling userAccountLoginPost"));
    }
    
    // verify the required parameter 'password' is set
    if (password == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'password' when calling userAccountLoginPost",
         new ApiException(400, "Missing the required parameter 'password' when calling userAccountLoginPost"));
    }
    
    // verify the required parameter 'tppId' is set
    if (tppId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'tppId' when calling userAccountLoginPost",
         new ApiException(400, "Missing the required parameter 'tppId' when calling userAccountLoginPost"));
    }
    

    // create path and map variables
    String path = "/user/account/login".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (account != null) {
        localVarBuilder.addTextBody("account", ApiInvoker.parameterToString(account), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (password != null) {
        localVarBuilder.addTextBody("password", ApiInvoker.parameterToString(password), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (geetestChallenge != null) {
        localVarBuilder.addTextBody("geetest_challenge", ApiInvoker.parameterToString(geetestChallenge), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (geetestValidate != null) {
        localVarBuilder.addTextBody("geetest_validate", ApiInvoker.parameterToString(geetestValidate), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (geetestSeccode != null) {
        localVarBuilder.addTextBody("geetest_seccode", ApiInvoker.parameterToString(geetestSeccode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (tppId != null) {
        localVarBuilder.addTextBody("tpp_id", ApiInvoker.parameterToString(tppId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (openid != null) {
        localVarBuilder.addTextBody("openid", ApiInvoker.parameterToString(openid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (token != null) {
        localVarBuilder.addTextBody("token", ApiInvoker.parameterToString(token), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (unionId != null) {
        localVarBuilder.addTextBody("union_id", ApiInvoker.parameterToString(unionId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("account", ApiInvoker.parameterToString(account));
formParams.put("password", ApiInvoker.parameterToString(password));
formParams.put("geetest_challenge", ApiInvoker.parameterToString(geetestChallenge));
formParams.put("geetest_validate", ApiInvoker.parameterToString(geetestValidate));
formParams.put("geetest_seccode", ApiInvoker.parameterToString(geetestSeccode));
formParams.put("tpp_id", ApiInvoker.parameterToString(tppId));
formParams.put("openid", ApiInvoker.parameterToString(openid));
formParams.put("token", ApiInvoker.parameterToString(token));
formParams.put("union_id", ApiInvoker.parameterToString(unionId));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((LoginSuccessModel) ApiInvoker.deserialize(localVarResponse,  "", LoginSuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 使用短信验证码登录
  * 使用短信验证码登录 
   * @param areaCode 国际区号
   * @param phoneNumber 手机号
   * @param captcha 验证码
   * @param invitedCode 邀请码
   * @return LoginSuccessModel
  */
  public LoginSuccessModel userAccountLoginWithSmsCaptchaPost (String areaCode, String phoneNumber, String captcha, String invitedCode) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'areaCode' is set
      if (areaCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'areaCode' when calling userAccountLoginWithSmsCaptchaPost",
      new ApiException(400, "Missing the required parameter 'areaCode' when calling userAccountLoginWithSmsCaptchaPost"));
      }
  
      // verify the required parameter 'phoneNumber' is set
      if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling userAccountLoginWithSmsCaptchaPost",
      new ApiException(400, "Missing the required parameter 'phoneNumber' when calling userAccountLoginWithSmsCaptchaPost"));
      }
  
      // verify the required parameter 'captcha' is set
      if (captcha == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'captcha' when calling userAccountLoginWithSmsCaptchaPost",
      new ApiException(400, "Missing the required parameter 'captcha' when calling userAccountLoginWithSmsCaptchaPost"));
      }
  

  // create path and map variables
  String path = "/user/account/login/with_sms_captcha".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (areaCode != null) {
          localVarBuilder.addTextBody("area_code", ApiInvoker.parameterToString(areaCode), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (phoneNumber != null) {
          localVarBuilder.addTextBody("phone_number", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (captcha != null) {
          localVarBuilder.addTextBody("captcha", ApiInvoker.parameterToString(captcha), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (invitedCode != null) {
          localVarBuilder.addTextBody("invited_code", ApiInvoker.parameterToString(invitedCode), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("area_code", ApiInvoker.parameterToString(areaCode));
formParams.put("phone_number", ApiInvoker.parameterToString(phoneNumber));
formParams.put("captcha", ApiInvoker.parameterToString(captcha));
formParams.put("invited_code", ApiInvoker.parameterToString(invitedCode));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (LoginSuccessModel) ApiInvoker.deserialize(localVarResponse, "", LoginSuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 使用短信验证码登录
   * 使用短信验证码登录 
   * @param areaCode 国际区号   * @param phoneNumber 手机号   * @param captcha 验证码   * @param invitedCode 邀请码
  */
  public void userAccountLoginWithSmsCaptchaPost (String areaCode, String phoneNumber, String captcha, String invitedCode, final Response.Listener<LoginSuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'areaCode' is set
    if (areaCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'areaCode' when calling userAccountLoginWithSmsCaptchaPost",
         new ApiException(400, "Missing the required parameter 'areaCode' when calling userAccountLoginWithSmsCaptchaPost"));
    }
    
    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling userAccountLoginWithSmsCaptchaPost",
         new ApiException(400, "Missing the required parameter 'phoneNumber' when calling userAccountLoginWithSmsCaptchaPost"));
    }
    
    // verify the required parameter 'captcha' is set
    if (captcha == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'captcha' when calling userAccountLoginWithSmsCaptchaPost",
         new ApiException(400, "Missing the required parameter 'captcha' when calling userAccountLoginWithSmsCaptchaPost"));
    }
    

    // create path and map variables
    String path = "/user/account/login/with_sms_captcha".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (areaCode != null) {
        localVarBuilder.addTextBody("area_code", ApiInvoker.parameterToString(areaCode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (phoneNumber != null) {
        localVarBuilder.addTextBody("phone_number", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (captcha != null) {
        localVarBuilder.addTextBody("captcha", ApiInvoker.parameterToString(captcha), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (invitedCode != null) {
        localVarBuilder.addTextBody("invited_code", ApiInvoker.parameterToString(invitedCode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("area_code", ApiInvoker.parameterToString(areaCode));
formParams.put("phone_number", ApiInvoker.parameterToString(phoneNumber));
formParams.put("captcha", ApiInvoker.parameterToString(captcha));
formParams.put("invited_code", ApiInvoker.parameterToString(invitedCode));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((LoginSuccessModel) ApiInvoker.deserialize(localVarResponse,  "", LoginSuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 重设密码
  * 重设密码 
   * @param currentpassword 当前密码
   * @param newpassword1 输入新密码第一遍
   * @param newpassword2 输入新密码第二遍
   * @return SuccessModel
  */
  public SuccessModel userAccountPasswordResettingPost (String currentpassword, String newpassword1, String newpassword2) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'currentpassword' is set
      if (currentpassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'currentpassword' when calling userAccountPasswordResettingPost",
      new ApiException(400, "Missing the required parameter 'currentpassword' when calling userAccountPasswordResettingPost"));
      }
  
      // verify the required parameter 'newpassword1' is set
      if (newpassword1 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'newpassword1' when calling userAccountPasswordResettingPost",
      new ApiException(400, "Missing the required parameter 'newpassword1' when calling userAccountPasswordResettingPost"));
      }
  
      // verify the required parameter 'newpassword2' is set
      if (newpassword2 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'newpassword2' when calling userAccountPasswordResettingPost",
      new ApiException(400, "Missing the required parameter 'newpassword2' when calling userAccountPasswordResettingPost"));
      }
  

  // create path and map variables
  String path = "/user/account/password/resetting".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (currentpassword != null) {
          localVarBuilder.addTextBody("currentpassword", ApiInvoker.parameterToString(currentpassword), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (newpassword1 != null) {
          localVarBuilder.addTextBody("newpassword1", ApiInvoker.parameterToString(newpassword1), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (newpassword2 != null) {
          localVarBuilder.addTextBody("newpassword2", ApiInvoker.parameterToString(newpassword2), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("currentpassword", ApiInvoker.parameterToString(currentpassword));
formParams.put("newpassword1", ApiInvoker.parameterToString(newpassword1));
formParams.put("newpassword2", ApiInvoker.parameterToString(newpassword2));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 重设密码
   * 重设密码 
   * @param currentpassword 当前密码   * @param newpassword1 输入新密码第一遍   * @param newpassword2 输入新密码第二遍
  */
  public void userAccountPasswordResettingPost (String currentpassword, String newpassword1, String newpassword2, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'currentpassword' is set
    if (currentpassword == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'currentpassword' when calling userAccountPasswordResettingPost",
         new ApiException(400, "Missing the required parameter 'currentpassword' when calling userAccountPasswordResettingPost"));
    }
    
    // verify the required parameter 'newpassword1' is set
    if (newpassword1 == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'newpassword1' when calling userAccountPasswordResettingPost",
         new ApiException(400, "Missing the required parameter 'newpassword1' when calling userAccountPasswordResettingPost"));
    }
    
    // verify the required parameter 'newpassword2' is set
    if (newpassword2 == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'newpassword2' when calling userAccountPasswordResettingPost",
         new ApiException(400, "Missing the required parameter 'newpassword2' when calling userAccountPasswordResettingPost"));
    }
    

    // create path and map variables
    String path = "/user/account/password/resetting".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (currentpassword != null) {
        localVarBuilder.addTextBody("currentpassword", ApiInvoker.parameterToString(currentpassword), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (newpassword1 != null) {
        localVarBuilder.addTextBody("newpassword1", ApiInvoker.parameterToString(newpassword1), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (newpassword2 != null) {
        localVarBuilder.addTextBody("newpassword2", ApiInvoker.parameterToString(newpassword2), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("currentpassword", ApiInvoker.parameterToString(currentpassword));
formParams.put("newpassword1", ApiInvoker.parameterToString(newpassword1));
formParams.put("newpassword2", ApiInvoker.parameterToString(newpassword2));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 使用短信验证码重设密码
  * 使用短信验证码重设密码 
   * @param areaCode 国家/地区代码
   * @param phoneNumber 手机号码
   * @param captcha 短信验证码
   * @param newPassword 新密码
   * @return SuccessModel
  */
  public SuccessModel userAccountPasswordResettingWithSmsCaptchaPost (String areaCode, String phoneNumber, String captcha, String newPassword) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'areaCode' is set
      if (areaCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'areaCode' when calling userAccountPasswordResettingWithSmsCaptchaPost",
      new ApiException(400, "Missing the required parameter 'areaCode' when calling userAccountPasswordResettingWithSmsCaptchaPost"));
      }
  
      // verify the required parameter 'phoneNumber' is set
      if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling userAccountPasswordResettingWithSmsCaptchaPost",
      new ApiException(400, "Missing the required parameter 'phoneNumber' when calling userAccountPasswordResettingWithSmsCaptchaPost"));
      }
  
      // verify the required parameter 'captcha' is set
      if (captcha == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'captcha' when calling userAccountPasswordResettingWithSmsCaptchaPost",
      new ApiException(400, "Missing the required parameter 'captcha' when calling userAccountPasswordResettingWithSmsCaptchaPost"));
      }
  
      // verify the required parameter 'newPassword' is set
      if (newPassword == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'newPassword' when calling userAccountPasswordResettingWithSmsCaptchaPost",
      new ApiException(400, "Missing the required parameter 'newPassword' when calling userAccountPasswordResettingWithSmsCaptchaPost"));
      }
  

  // create path and map variables
  String path = "/user/account/password/resetting/with_sms_captcha".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (areaCode != null) {
          localVarBuilder.addTextBody("area_code", ApiInvoker.parameterToString(areaCode), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (phoneNumber != null) {
          localVarBuilder.addTextBody("phone_number", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (captcha != null) {
          localVarBuilder.addTextBody("captcha", ApiInvoker.parameterToString(captcha), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (newPassword != null) {
          localVarBuilder.addTextBody("new_password", ApiInvoker.parameterToString(newPassword), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("area_code", ApiInvoker.parameterToString(areaCode));
formParams.put("phone_number", ApiInvoker.parameterToString(phoneNumber));
formParams.put("captcha", ApiInvoker.parameterToString(captcha));
formParams.put("new_password", ApiInvoker.parameterToString(newPassword));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 使用短信验证码重设密码
   * 使用短信验证码重设密码 
   * @param areaCode 国家/地区代码   * @param phoneNumber 手机号码   * @param captcha 短信验证码   * @param newPassword 新密码
  */
  public void userAccountPasswordResettingWithSmsCaptchaPost (String areaCode, String phoneNumber, String captcha, String newPassword, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'areaCode' is set
    if (areaCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'areaCode' when calling userAccountPasswordResettingWithSmsCaptchaPost",
         new ApiException(400, "Missing the required parameter 'areaCode' when calling userAccountPasswordResettingWithSmsCaptchaPost"));
    }
    
    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling userAccountPasswordResettingWithSmsCaptchaPost",
         new ApiException(400, "Missing the required parameter 'phoneNumber' when calling userAccountPasswordResettingWithSmsCaptchaPost"));
    }
    
    // verify the required parameter 'captcha' is set
    if (captcha == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'captcha' when calling userAccountPasswordResettingWithSmsCaptchaPost",
         new ApiException(400, "Missing the required parameter 'captcha' when calling userAccountPasswordResettingWithSmsCaptchaPost"));
    }
    
    // verify the required parameter 'newPassword' is set
    if (newPassword == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'newPassword' when calling userAccountPasswordResettingWithSmsCaptchaPost",
         new ApiException(400, "Missing the required parameter 'newPassword' when calling userAccountPasswordResettingWithSmsCaptchaPost"));
    }
    

    // create path and map variables
    String path = "/user/account/password/resetting/with_sms_captcha".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (areaCode != null) {
        localVarBuilder.addTextBody("area_code", ApiInvoker.parameterToString(areaCode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (phoneNumber != null) {
        localVarBuilder.addTextBody("phone_number", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (captcha != null) {
        localVarBuilder.addTextBody("captcha", ApiInvoker.parameterToString(captcha), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (newPassword != null) {
        localVarBuilder.addTextBody("new_password", ApiInvoker.parameterToString(newPassword), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("area_code", ApiInvoker.parameterToString(areaCode));
formParams.put("phone_number", ApiInvoker.parameterToString(phoneNumber));
formParams.put("captcha", ApiInvoker.parameterToString(captcha));
formParams.put("new_password", ApiInvoker.parameterToString(newPassword));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 注册
  * 注册 
   * @param account 登录账户
   * @param password 密码
   * @param tppId 第三方平台ID
   * @param invitedCode 邀请码
   * @param sex 性别 - 0：保密 1：男 2：女
   * @param avatar 头像base64编码内容
   * @param hasAgreedTerms 是否已同意注册条款 0：否 1：是
   * @param areaCode 国际区号
   * @param phoneNumber 手机号码
   * @param actionToken 如果是直接注册，该参数留空；如果通过某一步骤进行注册并且该步骤返回了actionToken，则提交actionToken以验证原子性
   * @param openid openid
   * @param token token
   * @param unionId union_id
   * @return LoginSuccessModel
  */
  public LoginSuccessModel userAccountRegisterPost (String account, String password, String tppId, String invitedCode, String sex, String avatar, String hasAgreedTerms, String areaCode, String phoneNumber, String actionToken, String openid, String token, String unionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'account' is set
      if (account == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'account' when calling userAccountRegisterPost",
      new ApiException(400, "Missing the required parameter 'account' when calling userAccountRegisterPost"));
      }
  
      // verify the required parameter 'password' is set
      if (password == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'password' when calling userAccountRegisterPost",
      new ApiException(400, "Missing the required parameter 'password' when calling userAccountRegisterPost"));
      }
  
      // verify the required parameter 'tppId' is set
      if (tppId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tppId' when calling userAccountRegisterPost",
      new ApiException(400, "Missing the required parameter 'tppId' when calling userAccountRegisterPost"));
      }
  

  // create path and map variables
  String path = "/user/account/register".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (account != null) {
          localVarBuilder.addTextBody("account", ApiInvoker.parameterToString(account), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (password != null) {
          localVarBuilder.addTextBody("password", ApiInvoker.parameterToString(password), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (invitedCode != null) {
          localVarBuilder.addTextBody("invited_code", ApiInvoker.parameterToString(invitedCode), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (sex != null) {
          localVarBuilder.addTextBody("sex", ApiInvoker.parameterToString(sex), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (avatar != null) {
          localVarBuilder.addTextBody("avatar", ApiInvoker.parameterToString(avatar), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (hasAgreedTerms != null) {
          localVarBuilder.addTextBody("has_agreed_terms", ApiInvoker.parameterToString(hasAgreedTerms), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (areaCode != null) {
          localVarBuilder.addTextBody("area_code", ApiInvoker.parameterToString(areaCode), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (phoneNumber != null) {
          localVarBuilder.addTextBody("phone_number", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (actionToken != null) {
          localVarBuilder.addTextBody("action_token", ApiInvoker.parameterToString(actionToken), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (tppId != null) {
          localVarBuilder.addTextBody("tpp_id", ApiInvoker.parameterToString(tppId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (openid != null) {
          localVarBuilder.addTextBody("openid", ApiInvoker.parameterToString(openid), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (token != null) {
          localVarBuilder.addTextBody("token", ApiInvoker.parameterToString(token), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (unionId != null) {
          localVarBuilder.addTextBody("union_id", ApiInvoker.parameterToString(unionId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("account", ApiInvoker.parameterToString(account));
formParams.put("password", ApiInvoker.parameterToString(password));
formParams.put("invited_code", ApiInvoker.parameterToString(invitedCode));
formParams.put("sex", ApiInvoker.parameterToString(sex));
formParams.put("avatar", ApiInvoker.parameterToString(avatar));
formParams.put("has_agreed_terms", ApiInvoker.parameterToString(hasAgreedTerms));
formParams.put("area_code", ApiInvoker.parameterToString(areaCode));
formParams.put("phone_number", ApiInvoker.parameterToString(phoneNumber));
formParams.put("action_token", ApiInvoker.parameterToString(actionToken));
formParams.put("tpp_id", ApiInvoker.parameterToString(tppId));
formParams.put("openid", ApiInvoker.parameterToString(openid));
formParams.put("token", ApiInvoker.parameterToString(token));
formParams.put("union_id", ApiInvoker.parameterToString(unionId));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (LoginSuccessModel) ApiInvoker.deserialize(localVarResponse, "", LoginSuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 注册
   * 注册 
   * @param account 登录账户   * @param password 密码   * @param tppId 第三方平台ID   * @param invitedCode 邀请码   * @param sex 性别 - 0：保密 1：男 2：女   * @param avatar 头像base64编码内容   * @param hasAgreedTerms 是否已同意注册条款 0：否 1：是   * @param areaCode 国际区号   * @param phoneNumber 手机号码   * @param actionToken 如果是直接注册，该参数留空；如果通过某一步骤进行注册并且该步骤返回了actionToken，则提交actionToken以验证原子性   * @param openid openid   * @param token token   * @param unionId union_id
  */
  public void userAccountRegisterPost (String account, String password, String tppId, String invitedCode, String sex, String avatar, String hasAgreedTerms, String areaCode, String phoneNumber, String actionToken, String openid, String token, String unionId, final Response.Listener<LoginSuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'account' is set
    if (account == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'account' when calling userAccountRegisterPost",
         new ApiException(400, "Missing the required parameter 'account' when calling userAccountRegisterPost"));
    }
    
    // verify the required parameter 'password' is set
    if (password == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'password' when calling userAccountRegisterPost",
         new ApiException(400, "Missing the required parameter 'password' when calling userAccountRegisterPost"));
    }
    
    // verify the required parameter 'tppId' is set
    if (tppId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'tppId' when calling userAccountRegisterPost",
         new ApiException(400, "Missing the required parameter 'tppId' when calling userAccountRegisterPost"));
    }
    

    // create path and map variables
    String path = "/user/account/register".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (account != null) {
        localVarBuilder.addTextBody("account", ApiInvoker.parameterToString(account), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (password != null) {
        localVarBuilder.addTextBody("password", ApiInvoker.parameterToString(password), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (invitedCode != null) {
        localVarBuilder.addTextBody("invited_code", ApiInvoker.parameterToString(invitedCode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (sex != null) {
        localVarBuilder.addTextBody("sex", ApiInvoker.parameterToString(sex), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (avatar != null) {
        localVarBuilder.addTextBody("avatar", ApiInvoker.parameterToString(avatar), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (hasAgreedTerms != null) {
        localVarBuilder.addTextBody("has_agreed_terms", ApiInvoker.parameterToString(hasAgreedTerms), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (areaCode != null) {
        localVarBuilder.addTextBody("area_code", ApiInvoker.parameterToString(areaCode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (phoneNumber != null) {
        localVarBuilder.addTextBody("phone_number", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (actionToken != null) {
        localVarBuilder.addTextBody("action_token", ApiInvoker.parameterToString(actionToken), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (tppId != null) {
        localVarBuilder.addTextBody("tpp_id", ApiInvoker.parameterToString(tppId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (openid != null) {
        localVarBuilder.addTextBody("openid", ApiInvoker.parameterToString(openid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (token != null) {
        localVarBuilder.addTextBody("token", ApiInvoker.parameterToString(token), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (unionId != null) {
        localVarBuilder.addTextBody("union_id", ApiInvoker.parameterToString(unionId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("account", ApiInvoker.parameterToString(account));
formParams.put("password", ApiInvoker.parameterToString(password));
formParams.put("invited_code", ApiInvoker.parameterToString(invitedCode));
formParams.put("sex", ApiInvoker.parameterToString(sex));
formParams.put("avatar", ApiInvoker.parameterToString(avatar));
formParams.put("has_agreed_terms", ApiInvoker.parameterToString(hasAgreedTerms));
formParams.put("area_code", ApiInvoker.parameterToString(areaCode));
formParams.put("phone_number", ApiInvoker.parameterToString(phoneNumber));
formParams.put("action_token", ApiInvoker.parameterToString(actionToken));
formParams.put("tpp_id", ApiInvoker.parameterToString(tppId));
formParams.put("openid", ApiInvoker.parameterToString(openid));
formParams.put("token", ApiInvoker.parameterToString(token));
formParams.put("union_id", ApiInvoker.parameterToString(unionId));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((LoginSuccessModel) ApiInvoker.deserialize(localVarResponse,  "", LoginSuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 使用短信验证码注册
  * 使用短信验证码注册 
   * @param areaCode 国际区号
   * @param phoneNumber 手机号
   * @param captcha 验证码
   * @return ErrorWithActionTokenModel
  */
  public ErrorWithActionTokenModel userAccountRegisterWithSmsCaptchaPost (String areaCode, String phoneNumber, String captcha) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'areaCode' is set
      if (areaCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'areaCode' when calling userAccountRegisterWithSmsCaptchaPost",
      new ApiException(400, "Missing the required parameter 'areaCode' when calling userAccountRegisterWithSmsCaptchaPost"));
      }
  
      // verify the required parameter 'phoneNumber' is set
      if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling userAccountRegisterWithSmsCaptchaPost",
      new ApiException(400, "Missing the required parameter 'phoneNumber' when calling userAccountRegisterWithSmsCaptchaPost"));
      }
  
      // verify the required parameter 'captcha' is set
      if (captcha == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'captcha' when calling userAccountRegisterWithSmsCaptchaPost",
      new ApiException(400, "Missing the required parameter 'captcha' when calling userAccountRegisterWithSmsCaptchaPost"));
      }
  

  // create path and map variables
  String path = "/user/account/register/with_sms_captcha".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (areaCode != null) {
          localVarBuilder.addTextBody("area_code", ApiInvoker.parameterToString(areaCode), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (phoneNumber != null) {
          localVarBuilder.addTextBody("phone_number", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (captcha != null) {
          localVarBuilder.addTextBody("captcha", ApiInvoker.parameterToString(captcha), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("area_code", ApiInvoker.parameterToString(areaCode));
formParams.put("phone_number", ApiInvoker.parameterToString(phoneNumber));
formParams.put("captcha", ApiInvoker.parameterToString(captcha));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ErrorWithActionTokenModel) ApiInvoker.deserialize(localVarResponse, "", ErrorWithActionTokenModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 使用短信验证码注册
   * 使用短信验证码注册 
   * @param areaCode 国际区号   * @param phoneNumber 手机号   * @param captcha 验证码
  */
  public void userAccountRegisterWithSmsCaptchaPost (String areaCode, String phoneNumber, String captcha, final Response.Listener<ErrorWithActionTokenModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'areaCode' is set
    if (areaCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'areaCode' when calling userAccountRegisterWithSmsCaptchaPost",
         new ApiException(400, "Missing the required parameter 'areaCode' when calling userAccountRegisterWithSmsCaptchaPost"));
    }
    
    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling userAccountRegisterWithSmsCaptchaPost",
         new ApiException(400, "Missing the required parameter 'phoneNumber' when calling userAccountRegisterWithSmsCaptchaPost"));
    }
    
    // verify the required parameter 'captcha' is set
    if (captcha == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'captcha' when calling userAccountRegisterWithSmsCaptchaPost",
         new ApiException(400, "Missing the required parameter 'captcha' when calling userAccountRegisterWithSmsCaptchaPost"));
    }
    

    // create path and map variables
    String path = "/user/account/register/with_sms_captcha".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (areaCode != null) {
        localVarBuilder.addTextBody("area_code", ApiInvoker.parameterToString(areaCode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (phoneNumber != null) {
        localVarBuilder.addTextBody("phone_number", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (captcha != null) {
        localVarBuilder.addTextBody("captcha", ApiInvoker.parameterToString(captcha), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("area_code", ApiInvoker.parameterToString(areaCode));
formParams.put("phone_number", ApiInvoker.parameterToString(phoneNumber));
formParams.put("captcha", ApiInvoker.parameterToString(captcha));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ErrorWithActionTokenModel) ApiInvoker.deserialize(localVarResponse,  "", ErrorWithActionTokenModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户签到信息
  * 用户签到信息 
   * @return SingedInInfoModel
  */
  public SingedInInfoModel userAccountSignedInInfoGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/account/signed_in_info".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SingedInInfoModel) ApiInvoker.deserialize(localVarResponse, "", SingedInInfoModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户签到信息
   * 用户签到信息 

  */
  public void userAccountSignedInInfoGet (final Response.Listener<SingedInInfoModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/account/signed_in_info".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SingedInInfoModel) ApiInvoker.deserialize(localVarResponse,  "", SingedInInfoModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户签到
  * 用户签到 
   * @return SigningInSuccessModel
  */
  public SigningInSuccessModel userAccountSigningInPost () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/account/signing_in".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SigningInSuccessModel) ApiInvoker.deserialize(localVarResponse, "", SigningInSuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户签到
   * 用户签到 

  */
  public void userAccountSigningInPost (final Response.Listener<SigningInSuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/account/signing_in".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SigningInSuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SigningInSuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 第三方平台解绑（已登录状态）
  * 第三方平台解绑（已登录状态） 
   * @param tppId 第三方平台ID
   * @return SuccessModel
  */
  public SuccessModel userAccountThirdPartyPlatformTppIdDelete (String tppId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'tppId' is set
      if (tppId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tppId' when calling userAccountThirdPartyPlatformTppIdDelete",
      new ApiException(400, "Missing the required parameter 'tppId' when calling userAccountThirdPartyPlatformTppIdDelete"));
      }
  

  // create path and map variables
  String path = "/user/account/third_party/platform/{tpp_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "tpp_id" + "\\}", apiInvoker.escapeString(tppId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 第三方平台解绑（已登录状态）
   * 第三方平台解绑（已登录状态） 
   * @param tppId 第三方平台ID
  */
  public void userAccountThirdPartyPlatformTppIdDelete (String tppId, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'tppId' is set
    if (tppId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'tppId' when calling userAccountThirdPartyPlatformTppIdDelete",
         new ApiException(400, "Missing the required parameter 'tppId' when calling userAccountThirdPartyPlatformTppIdDelete"));
    }
    

    // create path and map variables
    String path = "/user/account/third_party/platform/{tpp_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "tpp_id" + "\\}", apiInvoker.escapeString(tppId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 第三方平台账号绑定（已登录状态）
  * 第三方平台账号绑定（已登录状态） 
   * @param tppId 第三方平台ID
   * @param uid openid
   * @param token token
   * @param unionId union_id
   * @return SuccessModel
  */
  public SuccessModel userAccountThirdPartyPlatformTppIdPost (String tppId, String uid, String token, String unionId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'tppId' is set
      if (tppId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tppId' when calling userAccountThirdPartyPlatformTppIdPost",
      new ApiException(400, "Missing the required parameter 'tppId' when calling userAccountThirdPartyPlatformTppIdPost"));
      }
  

  // create path and map variables
  String path = "/user/account/third_party/platform/{tpp_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "tpp_id" + "\\}", apiInvoker.escapeString(tppId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (uid != null) {
          localVarBuilder.addTextBody("uid", ApiInvoker.parameterToString(uid), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (token != null) {
          localVarBuilder.addTextBody("token", ApiInvoker.parameterToString(token), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (unionId != null) {
          localVarBuilder.addTextBody("union_id", ApiInvoker.parameterToString(unionId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("uid", ApiInvoker.parameterToString(uid));
formParams.put("token", ApiInvoker.parameterToString(token));
formParams.put("union_id", ApiInvoker.parameterToString(unionId));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 第三方平台账号绑定（已登录状态）
   * 第三方平台账号绑定（已登录状态） 
   * @param tppId 第三方平台ID   * @param uid openid   * @param token token   * @param unionId union_id
  */
  public void userAccountThirdPartyPlatformTppIdPost (String tppId, String uid, String token, String unionId, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'tppId' is set
    if (tppId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'tppId' when calling userAccountThirdPartyPlatformTppIdPost",
         new ApiException(400, "Missing the required parameter 'tppId' when calling userAccountThirdPartyPlatformTppIdPost"));
    }
    

    // create path and map variables
    String path = "/user/account/third_party/platform/{tpp_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "tpp_id" + "\\}", apiInvoker.escapeString(tppId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (uid != null) {
        localVarBuilder.addTextBody("uid", ApiInvoker.parameterToString(uid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (token != null) {
        localVarBuilder.addTextBody("token", ApiInvoker.parameterToString(token), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (unionId != null) {
        localVarBuilder.addTextBody("union_id", ApiInvoker.parameterToString(unionId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("uid", ApiInvoker.parameterToString(uid));
formParams.put("token", ApiInvoker.parameterToString(token));
formParams.put("union_id", ApiInvoker.parameterToString(unionId));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 第三方平台列表
  * 第三方平台列表 
   * @return ThirdPartyPlatformsModel
  */
  public ThirdPartyPlatformsModel userAccountThirdPartyPlatformsGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/account/third_party/platforms".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ThirdPartyPlatformsModel) ApiInvoker.deserialize(localVarResponse, "", ThirdPartyPlatformsModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 第三方平台列表
   * 第三方平台列表 

  */
  public void userAccountThirdPartyPlatformsGet (final Response.Listener<ThirdPartyPlatformsModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/account/third_party/platforms".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ThirdPartyPlatformsModel) ApiInvoker.deserialize(localVarResponse,  "", ThirdPartyPlatformsModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 删除提现账号
  * 删除提现账号 
   * @param accountId 提现账号ID
   * @return SuccessModel
  */
  public SuccessModel userAccountWithdrawingAccountAccountIdDelete (String accountId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'accountId' is set
      if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling userAccountWithdrawingAccountAccountIdDelete",
      new ApiException(400, "Missing the required parameter 'accountId' when calling userAccountWithdrawingAccountAccountIdDelete"));
      }
  

  // create path and map variables
  String path = "/user/account/withdrawing/account/{account_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "account_id" + "\\}", apiInvoker.escapeString(accountId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 删除提现账号
   * 删除提现账号 
   * @param accountId 提现账号ID
  */
  public void userAccountWithdrawingAccountAccountIdDelete (String accountId, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling userAccountWithdrawingAccountAccountIdDelete",
         new ApiException(400, "Missing the required parameter 'accountId' when calling userAccountWithdrawingAccountAccountIdDelete"));
    }
    

    // create path and map variables
    String path = "/user/account/withdrawing/account/{account_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "account_id" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户提现首页
  * 用户提现首页 
   * @return UserWithdrawingIndexIfModel
  */
  public UserWithdrawingIndexIfModel userAccountWithdrawingIndexGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/account/withdrawing/index".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (UserWithdrawingIndexIfModel) ApiInvoker.deserialize(localVarResponse, "", UserWithdrawingIndexIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户提现首页
   * 用户提现首页 

  */
  public void userAccountWithdrawingIndexGet (final Response.Listener<UserWithdrawingIndexIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/account/withdrawing/index".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UserWithdrawingIndexIfModel) ApiInvoker.deserialize(localVarResponse,  "", UserWithdrawingIndexIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 增加提现账号
  * 增加提现账号 
   * @param modeId 提现方式ID
   * @param account1 输入提现账号第一遍
   * @param account2 输入提现账号第二遍
   * @param orderNumber 订单号
   * @param bankId 银行ID 仅在提现方式为借记卡（mode_id &#x3D; 4）的时候提交
   * @param realname 认证姓名
   * @param idNumber 身份证号码 仅账户类型为借记卡时需要
   * @param expirationDate 信用卡的过期时间
   * @param orderPic1 订单截图的base64编码
   * @param orderPic2 订单截图的base64编码
   * @param orderPic3 订单截图的base64编码
   * @return SuccessModel
  */
  public SuccessModel userAccountWithdrawingModeIdAccountPost (String modeId, String account1, String account2, String orderNumber, String bankId, String realname, String idNumber, String expirationDate, String orderPic1, String orderPic2, String orderPic3) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'modeId' is set
      if (modeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'modeId' when calling userAccountWithdrawingModeIdAccountPost",
      new ApiException(400, "Missing the required parameter 'modeId' when calling userAccountWithdrawingModeIdAccountPost"));
      }
  
      // verify the required parameter 'account1' is set
      if (account1 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'account1' when calling userAccountWithdrawingModeIdAccountPost",
      new ApiException(400, "Missing the required parameter 'account1' when calling userAccountWithdrawingModeIdAccountPost"));
      }
  
      // verify the required parameter 'account2' is set
      if (account2 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'account2' when calling userAccountWithdrawingModeIdAccountPost",
      new ApiException(400, "Missing the required parameter 'account2' when calling userAccountWithdrawingModeIdAccountPost"));
      }
  
      // verify the required parameter 'orderNumber' is set
      if (orderNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderNumber' when calling userAccountWithdrawingModeIdAccountPost",
      new ApiException(400, "Missing the required parameter 'orderNumber' when calling userAccountWithdrawingModeIdAccountPost"));
      }
  

  // create path and map variables
  String path = "/user/account/withdrawing/{mode_id}/account".replaceAll("\\{format\\}","json").replaceAll("\\{" + "mode_id" + "\\}", apiInvoker.escapeString(modeId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (bankId != null) {
          localVarBuilder.addTextBody("bank_id", ApiInvoker.parameterToString(bankId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (account1 != null) {
          localVarBuilder.addTextBody("account1", ApiInvoker.parameterToString(account1), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (account2 != null) {
          localVarBuilder.addTextBody("account2", ApiInvoker.parameterToString(account2), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (realname != null) {
          localVarBuilder.addTextBody("realname", ApiInvoker.parameterToString(realname), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (idNumber != null) {
          localVarBuilder.addTextBody("id_number", ApiInvoker.parameterToString(idNumber), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (expirationDate != null) {
          localVarBuilder.addTextBody("expiration_date", ApiInvoker.parameterToString(expirationDate), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (orderNumber != null) {
          localVarBuilder.addTextBody("order_number", ApiInvoker.parameterToString(orderNumber), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (orderPic1 != null) {
          localVarBuilder.addTextBody("order_pic1", ApiInvoker.parameterToString(orderPic1), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (orderPic2 != null) {
          localVarBuilder.addTextBody("order_pic2", ApiInvoker.parameterToString(orderPic2), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (orderPic3 != null) {
          localVarBuilder.addTextBody("order_pic3", ApiInvoker.parameterToString(orderPic3), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("bank_id", ApiInvoker.parameterToString(bankId));
formParams.put("account1", ApiInvoker.parameterToString(account1));
formParams.put("account2", ApiInvoker.parameterToString(account2));
formParams.put("realname", ApiInvoker.parameterToString(realname));
formParams.put("id_number", ApiInvoker.parameterToString(idNumber));
formParams.put("expiration_date", ApiInvoker.parameterToString(expirationDate));
formParams.put("order_number", ApiInvoker.parameterToString(orderNumber));
formParams.put("order_pic1", ApiInvoker.parameterToString(orderPic1));
formParams.put("order_pic2", ApiInvoker.parameterToString(orderPic2));
formParams.put("order_pic3", ApiInvoker.parameterToString(orderPic3));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 增加提现账号
   * 增加提现账号 
   * @param modeId 提现方式ID   * @param account1 输入提现账号第一遍   * @param account2 输入提现账号第二遍   * @param orderNumber 订单号   * @param bankId 银行ID 仅在提现方式为借记卡（mode_id &#x3D; 4）的时候提交   * @param realname 认证姓名   * @param idNumber 身份证号码 仅账户类型为借记卡时需要   * @param expirationDate 信用卡的过期时间   * @param orderPic1 订单截图的base64编码   * @param orderPic2 订单截图的base64编码   * @param orderPic3 订单截图的base64编码
  */
  public void userAccountWithdrawingModeIdAccountPost (String modeId, String account1, String account2, String orderNumber, String bankId, String realname, String idNumber, String expirationDate, String orderPic1, String orderPic2, String orderPic3, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'modeId' is set
    if (modeId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'modeId' when calling userAccountWithdrawingModeIdAccountPost",
         new ApiException(400, "Missing the required parameter 'modeId' when calling userAccountWithdrawingModeIdAccountPost"));
    }
    
    // verify the required parameter 'account1' is set
    if (account1 == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'account1' when calling userAccountWithdrawingModeIdAccountPost",
         new ApiException(400, "Missing the required parameter 'account1' when calling userAccountWithdrawingModeIdAccountPost"));
    }
    
    // verify the required parameter 'account2' is set
    if (account2 == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'account2' when calling userAccountWithdrawingModeIdAccountPost",
         new ApiException(400, "Missing the required parameter 'account2' when calling userAccountWithdrawingModeIdAccountPost"));
    }
    
    // verify the required parameter 'orderNumber' is set
    if (orderNumber == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'orderNumber' when calling userAccountWithdrawingModeIdAccountPost",
         new ApiException(400, "Missing the required parameter 'orderNumber' when calling userAccountWithdrawingModeIdAccountPost"));
    }
    

    // create path and map variables
    String path = "/user/account/withdrawing/{mode_id}/account".replaceAll("\\{format\\}","json").replaceAll("\\{" + "mode_id" + "\\}", apiInvoker.escapeString(modeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (bankId != null) {
        localVarBuilder.addTextBody("bank_id", ApiInvoker.parameterToString(bankId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (account1 != null) {
        localVarBuilder.addTextBody("account1", ApiInvoker.parameterToString(account1), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (account2 != null) {
        localVarBuilder.addTextBody("account2", ApiInvoker.parameterToString(account2), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (realname != null) {
        localVarBuilder.addTextBody("realname", ApiInvoker.parameterToString(realname), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (idNumber != null) {
        localVarBuilder.addTextBody("id_number", ApiInvoker.parameterToString(idNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (expirationDate != null) {
        localVarBuilder.addTextBody("expiration_date", ApiInvoker.parameterToString(expirationDate), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (orderNumber != null) {
        localVarBuilder.addTextBody("order_number", ApiInvoker.parameterToString(orderNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (orderPic1 != null) {
        localVarBuilder.addTextBody("order_pic1", ApiInvoker.parameterToString(orderPic1), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (orderPic2 != null) {
        localVarBuilder.addTextBody("order_pic2", ApiInvoker.parameterToString(orderPic2), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (orderPic3 != null) {
        localVarBuilder.addTextBody("order_pic3", ApiInvoker.parameterToString(orderPic3), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("bank_id", ApiInvoker.parameterToString(bankId));
formParams.put("account1", ApiInvoker.parameterToString(account1));
formParams.put("account2", ApiInvoker.parameterToString(account2));
formParams.put("realname", ApiInvoker.parameterToString(realname));
formParams.put("id_number", ApiInvoker.parameterToString(idNumber));
formParams.put("expiration_date", ApiInvoker.parameterToString(expirationDate));
formParams.put("order_number", ApiInvoker.parameterToString(orderNumber));
formParams.put("order_pic1", ApiInvoker.parameterToString(orderPic1));
formParams.put("order_pic2", ApiInvoker.parameterToString(orderPic2));
formParams.put("order_pic3", ApiInvoker.parameterToString(orderPic3));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户提现方式列表
  * 用户提现方式列表 
   * @return UserWithdrawingModesModel
  */
  public UserWithdrawingModesModel userAccountWithdrawingModesGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/account/withdrawing/modes".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (UserWithdrawingModesModel) ApiInvoker.deserialize(localVarResponse, "", UserWithdrawingModesModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户提现方式列表
   * 用户提现方式列表 

  */
  public void userAccountWithdrawingModesGet (final Response.Listener<UserWithdrawingModesModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/account/withdrawing/modes".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UserWithdrawingModesModel) ApiInvoker.deserialize(localVarResponse,  "", UserWithdrawingModesModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 重设提现密码
  * 重设提现密码 
   * @param captcha 验证码
   * @param newpassword1 输入新密码第一遍
   * @param newpassword2 输入新密码第二遍
   * @return SuccessModel
  */
  public SuccessModel userAccountWithdrawingPasswordResettingPost (String captcha, String newpassword1, String newpassword2) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'captcha' is set
      if (captcha == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'captcha' when calling userAccountWithdrawingPasswordResettingPost",
      new ApiException(400, "Missing the required parameter 'captcha' when calling userAccountWithdrawingPasswordResettingPost"));
      }
  
      // verify the required parameter 'newpassword1' is set
      if (newpassword1 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'newpassword1' when calling userAccountWithdrawingPasswordResettingPost",
      new ApiException(400, "Missing the required parameter 'newpassword1' when calling userAccountWithdrawingPasswordResettingPost"));
      }
  
      // verify the required parameter 'newpassword2' is set
      if (newpassword2 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'newpassword2' when calling userAccountWithdrawingPasswordResettingPost",
      new ApiException(400, "Missing the required parameter 'newpassword2' when calling userAccountWithdrawingPasswordResettingPost"));
      }
  

  // create path and map variables
  String path = "/user/account/withdrawing_password/resetting".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (captcha != null) {
          localVarBuilder.addTextBody("captcha", ApiInvoker.parameterToString(captcha), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (newpassword1 != null) {
          localVarBuilder.addTextBody("newpassword1", ApiInvoker.parameterToString(newpassword1), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (newpassword2 != null) {
          localVarBuilder.addTextBody("newpassword2", ApiInvoker.parameterToString(newpassword2), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("captcha", ApiInvoker.parameterToString(captcha));
formParams.put("newpassword1", ApiInvoker.parameterToString(newpassword1));
formParams.put("newpassword2", ApiInvoker.parameterToString(newpassword2));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 重设提现密码
   * 重设提现密码 
   * @param captcha 验证码   * @param newpassword1 输入新密码第一遍   * @param newpassword2 输入新密码第二遍
  */
  public void userAccountWithdrawingPasswordResettingPost (String captcha, String newpassword1, String newpassword2, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'captcha' is set
    if (captcha == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'captcha' when calling userAccountWithdrawingPasswordResettingPost",
         new ApiException(400, "Missing the required parameter 'captcha' when calling userAccountWithdrawingPasswordResettingPost"));
    }
    
    // verify the required parameter 'newpassword1' is set
    if (newpassword1 == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'newpassword1' when calling userAccountWithdrawingPasswordResettingPost",
         new ApiException(400, "Missing the required parameter 'newpassword1' when calling userAccountWithdrawingPasswordResettingPost"));
    }
    
    // verify the required parameter 'newpassword2' is set
    if (newpassword2 == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'newpassword2' when calling userAccountWithdrawingPasswordResettingPost",
         new ApiException(400, "Missing the required parameter 'newpassword2' when calling userAccountWithdrawingPasswordResettingPost"));
    }
    

    // create path and map variables
    String path = "/user/account/withdrawing_password/resetting".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (captcha != null) {
        localVarBuilder.addTextBody("captcha", ApiInvoker.parameterToString(captcha), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (newpassword1 != null) {
        localVarBuilder.addTextBody("newpassword1", ApiInvoker.parameterToString(newpassword1), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (newpassword2 != null) {
        localVarBuilder.addTextBody("newpassword2", ApiInvoker.parameterToString(newpassword2), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("captcha", ApiInvoker.parameterToString(captcha));
formParams.put("newpassword1", ApiInvoker.parameterToString(newpassword1));
formParams.put("newpassword2", ApiInvoker.parameterToString(newpassword2));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 我的银行卡
  * 我的银行卡 
   * @return BankCardsIfModel
  */
  public BankCardsIfModel userBankCardsGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/bank_cards".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (BankCardsIfModel) ApiInvoker.deserialize(localVarResponse, "", BankCardsIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 我的银行卡
   * 我的银行卡 

  */
  public void userBankCardsGet (final Response.Listener<BankCardsIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/bank_cards".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((BankCardsIfModel) ApiInvoker.deserialize(localVarResponse,  "", BankCardsIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户收藏的优惠
  * 用户收藏的优惠 
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return DealsListModel
  */
  public DealsListModel userCollectionDealsListGet (String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/collection/deals_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (DealsListModel) ApiInvoker.deserialize(localVarResponse, "", DealsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户收藏的优惠
   * 用户收藏的优惠 
   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userCollectionDealsListGet (String pageNum, String pageSize, final Response.Listener<DealsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/collection/deals_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DealsListModel) ApiInvoker.deserialize(localVarResponse,  "", DealsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 取消收藏内容动作
  * 用户取消收藏动作 
   * @param type 收藏类型 - 1：收藏优惠 2：收藏转运 3：收藏商家 4：收藏论坛版块 5：收藏帖子
   * @param dataId 收藏的数据的ID
   * @return SuccessModel
  */
  public SuccessModel userCollectionDelete (String type, String dataId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'type' is set
      if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling userCollectionDelete",
      new ApiException(400, "Missing the required parameter 'type' when calling userCollectionDelete"));
      }
  
      // verify the required parameter 'dataId' is set
      if (dataId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataId' when calling userCollectionDelete",
      new ApiException(400, "Missing the required parameter 'dataId' when calling userCollectionDelete"));
      }
  

  // create path and map variables
  String path = "/user/collection".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "data_id", dataId));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 取消收藏内容动作
   * 用户取消收藏动作 
   * @param type 收藏类型 - 1：收藏优惠 2：收藏转运 3：收藏商家 4：收藏论坛版块 5：收藏帖子   * @param dataId 收藏的数据的ID
  */
  public void userCollectionDelete (String type, String dataId, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'type' is set
    if (type == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'type' when calling userCollectionDelete",
         new ApiException(400, "Missing the required parameter 'type' when calling userCollectionDelete"));
    }
    
    // verify the required parameter 'dataId' is set
    if (dataId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'dataId' when calling userCollectionDelete",
         new ApiException(400, "Missing the required parameter 'dataId' when calling userCollectionDelete"));
    }
    

    // create path and map variables
    String path = "/user/collection".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "data_id", dataId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户收藏的论坛版块
  * 用户收藏的论坛版块 
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return UserCollectionForumBoardsListModel
  */
  public UserCollectionForumBoardsListModel userCollectionForumBoardsListGet (String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/collection/forum_boards_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (UserCollectionForumBoardsListModel) ApiInvoker.deserialize(localVarResponse, "", UserCollectionForumBoardsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户收藏的论坛版块
   * 用户收藏的论坛版块 
   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userCollectionForumBoardsListGet (String pageNum, String pageSize, final Response.Listener<UserCollectionForumBoardsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/collection/forum_boards_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UserCollectionForumBoardsListModel) ApiInvoker.deserialize(localVarResponse,  "", UserCollectionForumBoardsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户收藏的帖子
  * 用户收藏的帖子 
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return UserCollectionForumTopicsListModel
  */
  public UserCollectionForumTopicsListModel userCollectionForumTopicsListGet (String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/collection/forum_topics_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (UserCollectionForumTopicsListModel) ApiInvoker.deserialize(localVarResponse, "", UserCollectionForumTopicsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户收藏的帖子
   * 用户收藏的帖子 
   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userCollectionForumTopicsListGet (String pageNum, String pageSize, final Response.Listener<UserCollectionForumTopicsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/collection/forum_topics_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((UserCollectionForumTopicsListModel) ApiInvoker.deserialize(localVarResponse,  "", UserCollectionForumTopicsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 收藏内容动作
  * 用户收藏动作 
   * @param type 收藏类型 - 1：收藏优惠 2：收藏转运 3：收藏商家 4：收藏论坛版块 5：收藏帖子
   * @param dataId 收藏的数据的ID
   * @param description 收藏理由 收藏帖子的时候选填的内容
   * @return SuccessModel
  */
  public SuccessModel userCollectionPost (String type, String dataId, String description) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'type' is set
      if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling userCollectionPost",
      new ApiException(400, "Missing the required parameter 'type' when calling userCollectionPost"));
      }
  
      // verify the required parameter 'dataId' is set
      if (dataId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataId' when calling userCollectionPost",
      new ApiException(400, "Missing the required parameter 'dataId' when calling userCollectionPost"));
      }
  

  // create path and map variables
  String path = "/user/collection".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "data_id", dataId));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "description", description));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 收藏内容动作
   * 用户收藏动作 
   * @param type 收藏类型 - 1：收藏优惠 2：收藏转运 3：收藏商家 4：收藏论坛版块 5：收藏帖子   * @param dataId 收藏的数据的ID   * @param description 收藏理由 收藏帖子的时候选填的内容
  */
  public void userCollectionPost (String type, String dataId, String description, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'type' is set
    if (type == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'type' when calling userCollectionPost",
         new ApiException(400, "Missing the required parameter 'type' when calling userCollectionPost"));
    }
    
    // verify the required parameter 'dataId' is set
    if (dataId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'dataId' when calling userCollectionPost",
         new ApiException(400, "Missing the required parameter 'dataId' when calling userCollectionPost"));
    }
    

    // create path and map variables
    String path = "/user/collection".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "data_id", dataId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "description", description));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户收藏的商家
  * 用户收藏的商家 
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return CollectionStoresListModel
  */
  public CollectionStoresListModel userCollectionStoresListGet (String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/collection/stores_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (CollectionStoresListModel) ApiInvoker.deserialize(localVarResponse, "", CollectionStoresListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户收藏的商家
   * 用户收藏的商家 
   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userCollectionStoresListGet (String pageNum, String pageSize, final Response.Listener<CollectionStoresListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/collection/stores_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CollectionStoresListModel) ApiInvoker.deserialize(localVarResponse,  "", CollectionStoresListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户收藏的转运
  * 用户收藏的转运 
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return TransshippersListModel
  */
  public TransshippersListModel userCollectionTransshippersListGet (String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/collection/transshippers_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (TransshippersListModel) ApiInvoker.deserialize(localVarResponse, "", TransshippersListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户收藏的转运
   * 用户收藏的转运 
   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userCollectionTransshippersListGet (String pageNum, String pageSize, final Response.Listener<TransshippersListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/collection/transshippers_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TransshippersListModel) ApiInvoker.deserialize(localVarResponse,  "", TransshippersListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 验证当前的手机号码
  * 验证当前的手机号码 
   * @param captcha 验证码
   * @return ActionTokenIfModel
  */
  public ActionTokenIfModel userCurrentPhoneNumberCheckingPost (String captcha) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'captcha' is set
      if (captcha == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'captcha' when calling userCurrentPhoneNumberCheckingPost",
      new ApiException(400, "Missing the required parameter 'captcha' when calling userCurrentPhoneNumberCheckingPost"));
      }
  

  // create path and map variables
  String path = "/user/current_phone_number/checking".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (captcha != null) {
          localVarBuilder.addTextBody("captcha", ApiInvoker.parameterToString(captcha), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("captcha", ApiInvoker.parameterToString(captcha));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ActionTokenIfModel) ApiInvoker.deserialize(localVarResponse, "", ActionTokenIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 验证当前的手机号码
   * 验证当前的手机号码 
   * @param captcha 验证码
  */
  public void userCurrentPhoneNumberCheckingPost (String captcha, final Response.Listener<ActionTokenIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'captcha' is set
    if (captcha == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'captcha' when calling userCurrentPhoneNumberCheckingPost",
         new ApiException(400, "Missing the required parameter 'captcha' when calling userCurrentPhoneNumberCheckingPost"));
    }
    

    // create path and map variables
    String path = "/user/current_phone_number/checking".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (captcha != null) {
        localVarBuilder.addTextBody("captcha", ApiInvoker.parameterToString(captcha), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("captcha", ApiInvoker.parameterToString(captcha));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ActionTokenIfModel) ApiInvoker.deserialize(localVarResponse,  "", ActionTokenIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户反馈
  * 用户反馈 
   * @param content 用户反馈内容
   * @return SuccessModel
  */
  public SuccessModel userFeedbackPost (String content) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'content' is set
      if (content == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'content' when calling userFeedbackPost",
      new ApiException(400, "Missing the required parameter 'content' when calling userFeedbackPost"));
      }
  

  // create path and map variables
  String path = "/user/feedback".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (content != null) {
          localVarBuilder.addTextBody("content", ApiInvoker.parameterToString(content), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("content", ApiInvoker.parameterToString(content));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户反馈
   * 用户反馈 
   * @param content 用户反馈内容
  */
  public void userFeedbackPost (String content, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'content' is set
    if (content == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'content' when calling userFeedbackPost",
         new ApiException(400, "Missing the required parameter 'content' when calling userFeedbackPost"));
    }
    

    // create path and map variables
    String path = "/user/feedback".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (content != null) {
        localVarBuilder.addTextBody("content", ApiInvoker.parameterToString(content), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("content", ApiInvoker.parameterToString(content));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 获取降价提醒优惠的信息
  * 获取降价提醒优惠的信息 
   * @param dealOriginalUrl 优惠原始链接；
   * @return SpiderDealIfModel
  */
  public SpiderDealIfModel userFocusingOnPriceDealGet (String dealOriginalUrl) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'dealOriginalUrl' is set
      if (dealOriginalUrl == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dealOriginalUrl' when calling userFocusingOnPriceDealGet",
      new ApiException(400, "Missing the required parameter 'dealOriginalUrl' when calling userFocusingOnPriceDealGet"));
      }
  

  // create path and map variables
  String path = "/user/focusing_on_price_deal".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "deal_original_url", dealOriginalUrl));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SpiderDealIfModel) ApiInvoker.deserialize(localVarResponse, "", SpiderDealIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 获取降价提醒优惠的信息
   * 获取降价提醒优惠的信息 
   * @param dealOriginalUrl 优惠原始链接；
  */
  public void userFocusingOnPriceDealGet (String dealOriginalUrl, final Response.Listener<SpiderDealIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'dealOriginalUrl' is set
    if (dealOriginalUrl == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'dealOriginalUrl' when calling userFocusingOnPriceDealGet",
         new ApiException(400, "Missing the required parameter 'dealOriginalUrl' when calling userFocusingOnPriceDealGet"));
    }
    

    // create path and map variables
    String path = "/user/focusing_on_price_deal".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "deal_original_url", dealOriginalUrl));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SpiderDealIfModel) ApiInvoker.deserialize(localVarResponse,  "", SpiderDealIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 依据TASKID获取降价提醒优惠的信息
  * 依据TASKID获取降价提醒优惠的信息 
   * @param id 优惠提醒taskid
   * @return SpiderDealIfModel
  */
  public SpiderDealIfModel userFocusingOnPriceDealIdGet (String id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'id' is set
      if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling userFocusingOnPriceDealIdGet",
      new ApiException(400, "Missing the required parameter 'id' when calling userFocusingOnPriceDealIdGet"));
      }
  

  // create path and map variables
  String path = "/user/focusing_on_price_deal/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SpiderDealIfModel) ApiInvoker.deserialize(localVarResponse, "", SpiderDealIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 依据TASKID获取降价提醒优惠的信息
   * 依据TASKID获取降价提醒优惠的信息 
   * @param id 优惠提醒taskid
  */
  public void userFocusingOnPriceDealIdGet (String id, final Response.Listener<SpiderDealIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling userFocusingOnPriceDealIdGet",
         new ApiException(400, "Missing the required parameter 'id' when calling userFocusingOnPriceDealIdGet"));
    }
    

    // create path and map variables
    String path = "/user/focusing_on_price_deal/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SpiderDealIfModel) ApiInvoker.deserialize(localVarResponse,  "", SpiderDealIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 新增降价提醒的优惠
  * 新增降价提醒的优惠 
   * @param id 优惠提醒项ID
   * @param acceptPrice 降价至多少以下提醒
   * @param emailChecked 是否邮箱提醒 - 0：未勾选 1：已勾选
   * @param mobileChecked 是否通过邮件提醒 - 0：未勾选 1：已勾选
   * @param docId 优惠ID
   * @param skuId skuId
   * @return SuccessModel
  */
  public SuccessModel userFocusingOnPriceDealPost (String id, String acceptPrice, String emailChecked, String mobileChecked, String docId, String skuId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'id' is set
      if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling userFocusingOnPriceDealPost",
      new ApiException(400, "Missing the required parameter 'id' when calling userFocusingOnPriceDealPost"));
      }
  
      // verify the required parameter 'acceptPrice' is set
      if (acceptPrice == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'acceptPrice' when calling userFocusingOnPriceDealPost",
      new ApiException(400, "Missing the required parameter 'acceptPrice' when calling userFocusingOnPriceDealPost"));
      }
  
      // verify the required parameter 'emailChecked' is set
      if (emailChecked == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'emailChecked' when calling userFocusingOnPriceDealPost",
      new ApiException(400, "Missing the required parameter 'emailChecked' when calling userFocusingOnPriceDealPost"));
      }
  
      // verify the required parameter 'mobileChecked' is set
      if (mobileChecked == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'mobileChecked' when calling userFocusingOnPriceDealPost",
      new ApiException(400, "Missing the required parameter 'mobileChecked' when calling userFocusingOnPriceDealPost"));
      }
  
      // verify the required parameter 'docId' is set
      if (docId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling userFocusingOnPriceDealPost",
      new ApiException(400, "Missing the required parameter 'docId' when calling userFocusingOnPriceDealPost"));
      }
  
      // verify the required parameter 'skuId' is set
      if (skuId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'skuId' when calling userFocusingOnPriceDealPost",
      new ApiException(400, "Missing the required parameter 'skuId' when calling userFocusingOnPriceDealPost"));
      }
  

  // create path and map variables
  String path = "/user/focusing_on_price_deal".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (id != null) {
          localVarBuilder.addTextBody("id", ApiInvoker.parameterToString(id), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (acceptPrice != null) {
          localVarBuilder.addTextBody("accept_price", ApiInvoker.parameterToString(acceptPrice), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (emailChecked != null) {
          localVarBuilder.addTextBody("email_checked", ApiInvoker.parameterToString(emailChecked), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (mobileChecked != null) {
          localVarBuilder.addTextBody("mobile_checked", ApiInvoker.parameterToString(mobileChecked), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (docId != null) {
          localVarBuilder.addTextBody("docId", ApiInvoker.parameterToString(docId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (skuId != null) {
          localVarBuilder.addTextBody("skuId", ApiInvoker.parameterToString(skuId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("id", ApiInvoker.parameterToString(id));
formParams.put("accept_price", ApiInvoker.parameterToString(acceptPrice));
formParams.put("email_checked", ApiInvoker.parameterToString(emailChecked));
formParams.put("mobile_checked", ApiInvoker.parameterToString(mobileChecked));
formParams.put("docId", ApiInvoker.parameterToString(docId));
formParams.put("skuId", ApiInvoker.parameterToString(skuId));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 新增降价提醒的优惠
   * 新增降价提醒的优惠 
   * @param id 优惠提醒项ID   * @param acceptPrice 降价至多少以下提醒   * @param emailChecked 是否邮箱提醒 - 0：未勾选 1：已勾选   * @param mobileChecked 是否通过邮件提醒 - 0：未勾选 1：已勾选   * @param docId 优惠ID   * @param skuId skuId
  */
  public void userFocusingOnPriceDealPost (String id, String acceptPrice, String emailChecked, String mobileChecked, String docId, String skuId, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling userFocusingOnPriceDealPost",
         new ApiException(400, "Missing the required parameter 'id' when calling userFocusingOnPriceDealPost"));
    }
    
    // verify the required parameter 'acceptPrice' is set
    if (acceptPrice == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'acceptPrice' when calling userFocusingOnPriceDealPost",
         new ApiException(400, "Missing the required parameter 'acceptPrice' when calling userFocusingOnPriceDealPost"));
    }
    
    // verify the required parameter 'emailChecked' is set
    if (emailChecked == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'emailChecked' when calling userFocusingOnPriceDealPost",
         new ApiException(400, "Missing the required parameter 'emailChecked' when calling userFocusingOnPriceDealPost"));
    }
    
    // verify the required parameter 'mobileChecked' is set
    if (mobileChecked == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'mobileChecked' when calling userFocusingOnPriceDealPost",
         new ApiException(400, "Missing the required parameter 'mobileChecked' when calling userFocusingOnPriceDealPost"));
    }
    
    // verify the required parameter 'docId' is set
    if (docId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'docId' when calling userFocusingOnPriceDealPost",
         new ApiException(400, "Missing the required parameter 'docId' when calling userFocusingOnPriceDealPost"));
    }
    
    // verify the required parameter 'skuId' is set
    if (skuId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'skuId' when calling userFocusingOnPriceDealPost",
         new ApiException(400, "Missing the required parameter 'skuId' when calling userFocusingOnPriceDealPost"));
    }
    

    // create path and map variables
    String path = "/user/focusing_on_price_deal".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (id != null) {
        localVarBuilder.addTextBody("id", ApiInvoker.parameterToString(id), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (acceptPrice != null) {
        localVarBuilder.addTextBody("accept_price", ApiInvoker.parameterToString(acceptPrice), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (emailChecked != null) {
        localVarBuilder.addTextBody("email_checked", ApiInvoker.parameterToString(emailChecked), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (mobileChecked != null) {
        localVarBuilder.addTextBody("mobile_checked", ApiInvoker.parameterToString(mobileChecked), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (docId != null) {
        localVarBuilder.addTextBody("docId", ApiInvoker.parameterToString(docId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (skuId != null) {
        localVarBuilder.addTextBody("skuId", ApiInvoker.parameterToString(skuId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("id", ApiInvoker.parameterToString(id));
formParams.put("accept_price", ApiInvoker.parameterToString(acceptPrice));
formParams.put("email_checked", ApiInvoker.parameterToString(emailChecked));
formParams.put("mobile_checked", ApiInvoker.parameterToString(mobileChecked));
formParams.put("docId", ApiInvoker.parameterToString(docId));
formParams.put("skuId", ApiInvoker.parameterToString(skuId));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 删除提醒的优惠
  * 删除提醒的优惠 
   * @param type 提醒类型 - 1：降价提醒
   * @param id 参数说明 - 降价提醒：传入task_id
   * @return SuccessModel
  */
  public SuccessModel userFollowingDealDelete (String type, String id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'type' is set
      if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling userFollowingDealDelete",
      new ApiException(400, "Missing the required parameter 'type' when calling userFollowingDealDelete"));
      }
  
      // verify the required parameter 'id' is set
      if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling userFollowingDealDelete",
      new ApiException(400, "Missing the required parameter 'id' when calling userFollowingDealDelete"));
      }
  

  // create path and map variables
  String path = "/user/following_deal".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 删除提醒的优惠
   * 删除提醒的优惠 
   * @param type 提醒类型 - 1：降价提醒   * @param id 参数说明 - 降价提醒：传入task_id
  */
  public void userFollowingDealDelete (String type, String id, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'type' is set
    if (type == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'type' when calling userFollowingDealDelete",
         new ApiException(400, "Missing the required parameter 'type' when calling userFollowingDealDelete"));
    }
    
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling userFollowingDealDelete",
         new ApiException(400, "Missing the required parameter 'id' when calling userFollowingDealDelete"));
    }
    

    // create path and map variables
    String path = "/user/following_deal".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 提醒的优惠列表
  * 提醒的优惠列表 
   * @param type 提醒类型 - 1：降价提醒
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return FollowingDealsListModel
  */
  public FollowingDealsListModel userFollowingDealsListGet (String type, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'type' is set
      if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling userFollowingDealsListGet",
      new ApiException(400, "Missing the required parameter 'type' when calling userFollowingDealsListGet"));
      }
  

  // create path and map variables
  String path = "/user/following_deals_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (FollowingDealsListModel) ApiInvoker.deserialize(localVarResponse, "", FollowingDealsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 提醒的优惠列表
   * 提醒的优惠列表 
   * @param type 提醒类型 - 1：降价提醒   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userFollowingDealsListGet (String type, String pageNum, String pageSize, final Response.Listener<FollowingDealsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'type' is set
    if (type == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'type' when calling userFollowingDealsListGet",
         new ApiException(400, "Missing the required parameter 'type' when calling userFollowingDealsListGet"));
    }
    

    // create path and map variables
    String path = "/user/following_deals_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((FollowingDealsListModel) ApiInvoker.deserialize(localVarResponse,  "", FollowingDealsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 删除好友
  * 删除好友 
   * @param friendUid 好友ID
   * @return SuccessModel
  */
  public SuccessModel userFriendFriendUidDelete (String friendUid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'friendUid' is set
      if (friendUid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'friendUid' when calling userFriendFriendUidDelete",
      new ApiException(400, "Missing the required parameter 'friendUid' when calling userFriendFriendUidDelete"));
      }
  

  // create path and map variables
  String path = "/user/friend/{friend_uid}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "friend_uid" + "\\}", apiInvoker.escapeString(friendUid.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 删除好友
   * 删除好友 
   * @param friendUid 好友ID
  */
  public void userFriendFriendUidDelete (String friendUid, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'friendUid' is set
    if (friendUid == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'friendUid' when calling userFriendFriendUidDelete",
         new ApiException(400, "Missing the required parameter 'friendUid' when calling userFriendFriendUidDelete"));
    }
    

    // create path and map variables
    String path = "/user/friend/{friend_uid}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "friend_uid" + "\\}", apiInvoker.escapeString(friendUid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 添加好友
  * 用户点赞动作 
   * @param friendUid 好友ID
   * @return SuccessModel
  */
  public SuccessModel userFriendFriendUidPost (String friendUid) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'friendUid' is set
      if (friendUid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'friendUid' when calling userFriendFriendUidPost",
      new ApiException(400, "Missing the required parameter 'friendUid' when calling userFriendFriendUidPost"));
      }
  

  // create path and map variables
  String path = "/user/friend/{friend_uid}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "friend_uid" + "\\}", apiInvoker.escapeString(friendUid.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 添加好友
   * 用户点赞动作 
   * @param friendUid 好友ID
  */
  public void userFriendFriendUidPost (String friendUid, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'friendUid' is set
    if (friendUid == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'friendUid' when calling userFriendFriendUidPost",
         new ApiException(400, "Missing the required parameter 'friendUid' when calling userFriendFriendUidPost"));
    }
    

    // create path and map variables
    String path = "/user/friend/{friend_uid}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "friend_uid" + "\\}", apiInvoker.escapeString(friendUid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 对好友添加请求的操作
  * 对好友添加请求的操作 
   * @param friendUid 好友ID
   * @param option 操作 - 1：通过请求 2：拒绝请求
   * @return SuccessModel
  */
  public SuccessModel userFriendFriendUidRequestingPut (String friendUid, String option) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'friendUid' is set
      if (friendUid == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'friendUid' when calling userFriendFriendUidRequestingPut",
      new ApiException(400, "Missing the required parameter 'friendUid' when calling userFriendFriendUidRequestingPut"));
      }
  
      // verify the required parameter 'option' is set
      if (option == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'option' when calling userFriendFriendUidRequestingPut",
      new ApiException(400, "Missing the required parameter 'option' when calling userFriendFriendUidRequestingPut"));
      }
  

  // create path and map variables
  String path = "/user/friend/{friend_uid}/requesting".replaceAll("\\{format\\}","json").replaceAll("\\{" + "friend_uid" + "\\}", apiInvoker.escapeString(friendUid.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "option", option));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 对好友添加请求的操作
   * 对好友添加请求的操作 
   * @param friendUid 好友ID   * @param option 操作 - 1：通过请求 2：拒绝请求
  */
  public void userFriendFriendUidRequestingPut (String friendUid, String option, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'friendUid' is set
    if (friendUid == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'friendUid' when calling userFriendFriendUidRequestingPut",
         new ApiException(400, "Missing the required parameter 'friendUid' when calling userFriendFriendUidRequestingPut"));
    }
    
    // verify the required parameter 'option' is set
    if (option == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'option' when calling userFriendFriendUidRequestingPut",
         new ApiException(400, "Missing the required parameter 'option' when calling userFriendFriendUidRequestingPut"));
    }
    

    // create path and map variables
    String path = "/user/friend/{friend_uid}/requesting".replaceAll("\\{format\\}","json").replaceAll("\\{" + "friend_uid" + "\\}", apiInvoker.escapeString(friendUid.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "option", option));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 好友列表
  * 好友列表 
   * @return FriendsSectionsModel
  */
  public FriendsSectionsModel userFriendsListGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/friends_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (FriendsSectionsModel) ApiInvoker.deserialize(localVarResponse, "", FriendsSectionsModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 好友列表
   * 好友列表 

  */
  public void userFriendsListGet (final Response.Listener<FriendsSectionsModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/friends_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((FriendsSectionsModel) ApiInvoker.deserialize(localVarResponse,  "", FriendsSectionsModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户聊天消息列表
  * 用户聊天消息列表 
   * @param userId 用户ID
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return ChatMsgsListModel
  */
  public ChatMsgsListModel userInteractionUserIdMsgsListGet (String userId, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'userId' is set
      if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling userInteractionUserIdMsgsListGet",
      new ApiException(400, "Missing the required parameter 'userId' when calling userInteractionUserIdMsgsListGet"));
      }
  

  // create path and map variables
  String path = "/user/interaction/{user_id}/msgs_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ChatMsgsListModel) ApiInvoker.deserialize(localVarResponse, "", ChatMsgsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户聊天消息列表
   * 用户聊天消息列表 
   * @param userId 用户ID   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userInteractionUserIdMsgsListGet (String userId, String pageNum, String pageSize, final Response.Listener<ChatMsgsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'userId' is set
    if (userId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling userInteractionUserIdMsgsListGet",
         new ApiException(400, "Missing the required parameter 'userId' when calling userInteractionUserIdMsgsListGet"));
    }
    

    // create path and map variables
    String path = "/user/interaction/{user_id}/msgs_list".replaceAll("\\{format\\}","json").replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ChatMsgsListModel) ApiInvoker.deserialize(localVarResponse,  "", ChatMsgsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 邀请好友主页
  * 邀请好友主页 
   * @return InviteIfModel
  */
  public InviteIfModel userInviteIndexGet () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/invite_index".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InviteIfModel) ApiInvoker.deserialize(localVarResponse, "", InviteIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 邀请好友主页
   * 邀请好友主页 

  */
  public void userInviteIndexGet (final Response.Listener<InviteIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/invite_index".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InviteIfModel) ApiInvoker.deserialize(localVarResponse,  "", InviteIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 邀请好友列表
  * 邀请好友列表 
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return InvitedFriendsListModel
  */
  public InvitedFriendsListModel userInvitedFriendsListGet (String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/invited_friends_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InvitedFriendsListModel) ApiInvoker.deserialize(localVarResponse, "", InvitedFriendsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 邀请好友列表
   * 邀请好友列表 
   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userInvitedFriendsListGet (String pageNum, String pageSize, final Response.Listener<InvitedFriendsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/invited_friends_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InvitedFriendsListModel) ApiInvoker.deserialize(localVarResponse,  "", InvitedFriendsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户邀请人排行榜
  * 用户邀请人排行榜 
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return InvitersListModel
  */
  public InvitersListModel userInvitersListGet (String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/inviters_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (InvitersListModel) ApiInvoker.deserialize(localVarResponse, "", InvitersListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户邀请人排行榜
   * 用户邀请人排行榜 
   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userInvitersListGet (String pageNum, String pageSize, final Response.Listener<InvitersListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/inviters_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((InvitersListModel) ApiInvoker.deserialize(localVarResponse,  "", InvitersListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 丢单反馈详情
  * 丢单反馈详情 
   * @param orderId 手工订单ID
   * @return RebateMissedOrderDetailIfModel
  */
  public RebateMissedOrderDetailIfModel userMissedOrderOrderIdDetailGet (String orderId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'orderId' is set
      if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling userMissedOrderOrderIdDetailGet",
      new ApiException(400, "Missing the required parameter 'orderId' when calling userMissedOrderOrderIdDetailGet"));
      }
  

  // create path and map variables
  String path = "/user/missed_order/{order_id}/detail".replaceAll("\\{format\\}","json").replaceAll("\\{" + "order_id" + "\\}", apiInvoker.escapeString(orderId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (RebateMissedOrderDetailIfModel) ApiInvoker.deserialize(localVarResponse, "", RebateMissedOrderDetailIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 丢单反馈详情
   * 丢单反馈详情 
   * @param orderId 手工订单ID
  */
  public void userMissedOrderOrderIdDetailGet (String orderId, final Response.Listener<RebateMissedOrderDetailIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling userMissedOrderOrderIdDetailGet",
         new ApiException(400, "Missing the required parameter 'orderId' when calling userMissedOrderOrderIdDetailGet"));
    }
    

    // create path and map variables
    String path = "/user/missed_order/{order_id}/detail".replaceAll("\\{format\\}","json").replaceAll("\\{" + "order_id" + "\\}", apiInvoker.escapeString(orderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RebateMissedOrderDetailIfModel) ApiInvoker.deserialize(localVarResponse,  "", RebateMissedOrderDetailIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 消息首页
  * 消息首页 
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return MsgNoticesListModel
  */
  public MsgNoticesListModel userMsgsIndexGet (String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/msgs/index".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (MsgNoticesListModel) ApiInvoker.deserialize(localVarResponse, "", MsgNoticesListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 消息首页
   * 消息首页 
   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userMsgsIndexGet (String pageNum, String pageSize, final Response.Listener<MsgNoticesListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/msgs/index".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MsgNoticesListModel) ApiInvoker.deserialize(localVarResponse,  "", MsgNoticesListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 消息列表
  * 消息列表 
   * @param category 消息类别 - 1：系统消息 2：推荐优惠
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return MsgsListModel
  */
  public MsgsListModel userMsgsListGet (String category, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'category' is set
      if (category == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'category' when calling userMsgsListGet",
      new ApiException(400, "Missing the required parameter 'category' when calling userMsgsListGet"));
      }
  

  // create path and map variables
  String path = "/user/msgs/list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "category", category));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (MsgsListModel) ApiInvoker.deserialize(localVarResponse, "", MsgsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 消息列表
   * 消息列表 
   * @param category 消息类别 - 1：系统消息 2：推荐优惠   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userMsgsListGet (String category, String pageNum, String pageSize, final Response.Listener<MsgsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'category' is set
    if (category == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'category' when calling userMsgsListGet",
         new ApiException(400, "Missing the required parameter 'category' when calling userMsgsListGet"));
    }
    

    // create path and map variables
    String path = "/user/msgs/list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "category", category));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MsgsListModel) ApiInvoker.deserialize(localVarResponse,  "", MsgsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 消息 - 帖子动态列表
  * 消息 - 帖子动态列表 
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return PostDynamicsMsgsListModel
  */
  public PostDynamicsMsgsListModel userMsgsPostDynamicsListGet (String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/msgs/post_dynamics/list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (PostDynamicsMsgsListModel) ApiInvoker.deserialize(localVarResponse, "", PostDynamicsMsgsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 消息 - 帖子动态列表
   * 消息 - 帖子动态列表 
   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userMsgsPostDynamicsListGet (String pageNum, String pageSize, final Response.Listener<PostDynamicsMsgsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/msgs/post_dynamics/list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((PostDynamicsMsgsListModel) ApiInvoker.deserialize(localVarResponse,  "", PostDynamicsMsgsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 消息列表 - 推荐优惠
  * 消息列表 - 推荐优惠 
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return DealsListModel
  */
  public DealsListModel userMsgsRecommendedDealsListGet (String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/msgs/recommended_deals_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (DealsListModel) ApiInvoker.deserialize(localVarResponse, "", DealsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 消息列表 - 推荐优惠
   * 消息列表 - 推荐优惠 
   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userMsgsRecommendedDealsListGet (String pageNum, String pageSize, final Response.Listener<DealsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/msgs/recommended_deals_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DealsListModel) ApiInvoker.deserialize(localVarResponse,  "", DealsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 好友请求列表
  * 好友请求列表 
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return FriendsRequestionsListModel
  */
  public FriendsRequestionsListModel userMsgsRequestionsBeFriendsListGet (String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/msgs/requestions/be_friends/list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (FriendsRequestionsListModel) ApiInvoker.deserialize(localVarResponse, "", FriendsRequestionsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 好友请求列表
   * 好友请求列表 
   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userMsgsRequestionsBeFriendsListGet (String pageNum, String pageSize, final Response.Listener<FriendsRequestionsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/msgs/requestions/be_friends/list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((FriendsRequestionsListModel) ApiInvoker.deserialize(localVarResponse,  "", FriendsRequestionsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 所有消息设为已读
  * 所有消息设为已读 
   * @return SuccessModel
  */
  public SuccessModel userMsgsSettingAllReadedPost () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/msgs/setting_all_readed".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 所有消息设为已读
   * 所有消息设为已读 

  */
  public void userMsgsSettingAllReadedPost (final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/msgs/setting_all_readed".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 第三方平台帐号绑定新账号
  * 第三方平台帐号绑定新账号 
   * @param tppId 第三方平台ID
   * @param uid openid
   * @param token token
   * @param unionId union_id
   * @param account 55帐号账户名
   * @param password 55帐号密码
   * @param sex 性别 - 0：保密 1：男 2：女
   * @param inviteCode 邀请码
   * @param avatar 头像base64加密后的内容
   * @param hasAgreedTerms 是否同意注册协议，在用户勾选条款后传1，防止用户绕过协议注册
   * @return LoginSuccessModel
  */
  public LoginSuccessModel userNewAccountBindingTppTppIdPost (String tppId, String uid, String token, String unionId, String account, String password, String sex, String inviteCode, String avatar, String hasAgreedTerms) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'tppId' is set
      if (tppId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'tppId' when calling userNewAccountBindingTppTppIdPost",
      new ApiException(400, "Missing the required parameter 'tppId' when calling userNewAccountBindingTppTppIdPost"));
      }
  

  // create path and map variables
  String path = "/user/new_account/binding/tpp/{tpp_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "tpp_id" + "\\}", apiInvoker.escapeString(tppId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (uid != null) {
          localVarBuilder.addTextBody("uid", ApiInvoker.parameterToString(uid), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (token != null) {
          localVarBuilder.addTextBody("token", ApiInvoker.parameterToString(token), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (unionId != null) {
          localVarBuilder.addTextBody("union_id", ApiInvoker.parameterToString(unionId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (account != null) {
          localVarBuilder.addTextBody("account", ApiInvoker.parameterToString(account), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (password != null) {
          localVarBuilder.addTextBody("password", ApiInvoker.parameterToString(password), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (sex != null) {
          localVarBuilder.addTextBody("sex", ApiInvoker.parameterToString(sex), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (inviteCode != null) {
          localVarBuilder.addTextBody("invite_code", ApiInvoker.parameterToString(inviteCode), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (avatar != null) {
          localVarBuilder.addTextBody("avatar", ApiInvoker.parameterToString(avatar), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (hasAgreedTerms != null) {
          localVarBuilder.addTextBody("has_agreed_terms", ApiInvoker.parameterToString(hasAgreedTerms), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("uid", ApiInvoker.parameterToString(uid));
formParams.put("token", ApiInvoker.parameterToString(token));
formParams.put("union_id", ApiInvoker.parameterToString(unionId));
formParams.put("account", ApiInvoker.parameterToString(account));
formParams.put("password", ApiInvoker.parameterToString(password));
formParams.put("sex", ApiInvoker.parameterToString(sex));
formParams.put("invite_code", ApiInvoker.parameterToString(inviteCode));
formParams.put("avatar", ApiInvoker.parameterToString(avatar));
formParams.put("has_agreed_terms", ApiInvoker.parameterToString(hasAgreedTerms));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (LoginSuccessModel) ApiInvoker.deserialize(localVarResponse, "", LoginSuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 第三方平台帐号绑定新账号
   * 第三方平台帐号绑定新账号 
   * @param tppId 第三方平台ID   * @param uid openid   * @param token token   * @param unionId union_id   * @param account 55帐号账户名   * @param password 55帐号密码   * @param sex 性别 - 0：保密 1：男 2：女   * @param inviteCode 邀请码   * @param avatar 头像base64加密后的内容   * @param hasAgreedTerms 是否同意注册协议，在用户勾选条款后传1，防止用户绕过协议注册
  */
  public void userNewAccountBindingTppTppIdPost (String tppId, String uid, String token, String unionId, String account, String password, String sex, String inviteCode, String avatar, String hasAgreedTerms, final Response.Listener<LoginSuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'tppId' is set
    if (tppId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'tppId' when calling userNewAccountBindingTppTppIdPost",
         new ApiException(400, "Missing the required parameter 'tppId' when calling userNewAccountBindingTppTppIdPost"));
    }
    

    // create path and map variables
    String path = "/user/new_account/binding/tpp/{tpp_id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "tpp_id" + "\\}", apiInvoker.escapeString(tppId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (uid != null) {
        localVarBuilder.addTextBody("uid", ApiInvoker.parameterToString(uid), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (token != null) {
        localVarBuilder.addTextBody("token", ApiInvoker.parameterToString(token), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (unionId != null) {
        localVarBuilder.addTextBody("union_id", ApiInvoker.parameterToString(unionId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (account != null) {
        localVarBuilder.addTextBody("account", ApiInvoker.parameterToString(account), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (password != null) {
        localVarBuilder.addTextBody("password", ApiInvoker.parameterToString(password), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (sex != null) {
        localVarBuilder.addTextBody("sex", ApiInvoker.parameterToString(sex), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (inviteCode != null) {
        localVarBuilder.addTextBody("invite_code", ApiInvoker.parameterToString(inviteCode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (avatar != null) {
        localVarBuilder.addTextBody("avatar", ApiInvoker.parameterToString(avatar), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (hasAgreedTerms != null) {
        localVarBuilder.addTextBody("has_agreed_terms", ApiInvoker.parameterToString(hasAgreedTerms), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("uid", ApiInvoker.parameterToString(uid));
formParams.put("token", ApiInvoker.parameterToString(token));
formParams.put("union_id", ApiInvoker.parameterToString(unionId));
formParams.put("account", ApiInvoker.parameterToString(account));
formParams.put("password", ApiInvoker.parameterToString(password));
formParams.put("sex", ApiInvoker.parameterToString(sex));
formParams.put("invite_code", ApiInvoker.parameterToString(inviteCode));
formParams.put("avatar", ApiInvoker.parameterToString(avatar));
formParams.put("has_agreed_terms", ApiInvoker.parameterToString(hasAgreedTerms));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((LoginSuccessModel) ApiInvoker.deserialize(localVarResponse,  "", LoginSuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 绑定新的手机号码
  * 绑定新的手机号码 
   * @param areaCode 国际区号
   * @param phoneNumber 手机号码
   * @param captcha 短信验证码
   * @param actionToken 上一步操作返回的action token（可选）
   * @return SuccessModel
  */
  public SuccessModel userNewPhoneNumberBindingPost (String areaCode, String phoneNumber, String captcha, String actionToken) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'areaCode' is set
      if (areaCode == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'areaCode' when calling userNewPhoneNumberBindingPost",
      new ApiException(400, "Missing the required parameter 'areaCode' when calling userNewPhoneNumberBindingPost"));
      }
  
      // verify the required parameter 'phoneNumber' is set
      if (phoneNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling userNewPhoneNumberBindingPost",
      new ApiException(400, "Missing the required parameter 'phoneNumber' when calling userNewPhoneNumberBindingPost"));
      }
  

  // create path and map variables
  String path = "/user/new_phone_number/binding".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (areaCode != null) {
          localVarBuilder.addTextBody("area_code", ApiInvoker.parameterToString(areaCode), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (phoneNumber != null) {
          localVarBuilder.addTextBody("phone_number", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (captcha != null) {
          localVarBuilder.addTextBody("captcha", ApiInvoker.parameterToString(captcha), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (actionToken != null) {
          localVarBuilder.addTextBody("action_token", ApiInvoker.parameterToString(actionToken), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("area_code", ApiInvoker.parameterToString(areaCode));
formParams.put("phone_number", ApiInvoker.parameterToString(phoneNumber));
formParams.put("captcha", ApiInvoker.parameterToString(captcha));
formParams.put("action_token", ApiInvoker.parameterToString(actionToken));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 绑定新的手机号码
   * 绑定新的手机号码 
   * @param areaCode 国际区号   * @param phoneNumber 手机号码   * @param captcha 短信验证码   * @param actionToken 上一步操作返回的action token（可选）
  */
  public void userNewPhoneNumberBindingPost (String areaCode, String phoneNumber, String captcha, String actionToken, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'areaCode' is set
    if (areaCode == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'areaCode' when calling userNewPhoneNumberBindingPost",
         new ApiException(400, "Missing the required parameter 'areaCode' when calling userNewPhoneNumberBindingPost"));
    }
    
    // verify the required parameter 'phoneNumber' is set
    if (phoneNumber == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'phoneNumber' when calling userNewPhoneNumberBindingPost",
         new ApiException(400, "Missing the required parameter 'phoneNumber' when calling userNewPhoneNumberBindingPost"));
    }
    

    // create path and map variables
    String path = "/user/new_phone_number/binding".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (areaCode != null) {
        localVarBuilder.addTextBody("area_code", ApiInvoker.parameterToString(areaCode), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (phoneNumber != null) {
        localVarBuilder.addTextBody("phone_number", ApiInvoker.parameterToString(phoneNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (captcha != null) {
        localVarBuilder.addTextBody("captcha", ApiInvoker.parameterToString(captcha), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (actionToken != null) {
        localVarBuilder.addTextBody("action_token", ApiInvoker.parameterToString(actionToken), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("area_code", ApiInvoker.parameterToString(areaCode));
formParams.put("phone_number", ApiInvoker.parameterToString(phoneNumber));
formParams.put("captcha", ApiInvoker.parameterToString(captcha));
formParams.put("action_token", ApiInvoker.parameterToString(actionToken));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户订单详情
  * 用户订单详情 
   * @param orderId 订单ID
   * @return OrderDetailIfModel
  */
  public OrderDetailIfModel userOrderOrderIdDetailGet (String orderId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'orderId' is set
      if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling userOrderOrderIdDetailGet",
      new ApiException(400, "Missing the required parameter 'orderId' when calling userOrderOrderIdDetailGet"));
      }
  

  // create path and map variables
  String path = "/user/order/{order_id}/detail".replaceAll("\\{format\\}","json").replaceAll("\\{" + "order_id" + "\\}", apiInvoker.escapeString(orderId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (OrderDetailIfModel) ApiInvoker.deserialize(localVarResponse, "", OrderDetailIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户订单详情
   * 用户订单详情 
   * @param orderId 订单ID
  */
  public void userOrderOrderIdDetailGet (String orderId, final Response.Listener<OrderDetailIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling userOrderOrderIdDetailGet",
         new ApiException(400, "Missing the required parameter 'orderId' when calling userOrderOrderIdDetailGet"));
    }
    

    // create path and map variables
    String path = "/user/order/{order_id}/detail".replaceAll("\\{format\\}","json").replaceAll("\\{" + "order_id" + "\\}", apiInvoker.escapeString(orderId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OrderDetailIfModel) ApiInvoker.deserialize(localVarResponse,  "", OrderDetailIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户订单简要信息(分页)（已完成）
  * 用户订单简要信息(分页) 
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return OrdersBriefsListModel
  */
  public OrdersBriefsListModel userOrdersBriefsListGet (String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/orders/briefs/list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (OrdersBriefsListModel) ApiInvoker.deserialize(localVarResponse, "", OrdersBriefsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户订单简要信息(分页)（已完成）
   * 用户订单简要信息(分页) 
   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userOrdersBriefsListGet (String pageNum, String pageSize, final Response.Listener<OrdersBriefsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/orders/briefs/list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OrdersBriefsListModel) ApiInvoker.deserialize(localVarResponse,  "", OrdersBriefsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户订单记录列表
  * 用户订单记录列表 
   * @param status 筛选 - 订单状态 1：已生效 2:待生效 3：无效订单
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return OrdersListModel
  */
  public OrdersListModel userOrdersListGet (String status, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/orders/list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (OrdersListModel) ApiInvoker.deserialize(localVarResponse, "", OrdersListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户订单记录列表
   * 用户订单记录列表 
   * @param status 筛选 - 订单状态 1：已生效 2:待生效 3：无效订单   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userOrdersListGet (String status, String pageNum, String pageSize, final Response.Listener<OrdersListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/orders/list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OrdersListModel) ApiInvoker.deserialize(localVarResponse,  "", OrdersListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 取消点赞
  * 取消点赞 
   * @param type 取消点赞类型 - 1:取消优惠点赞 2：取消评论点赞 3：取消帖子回复点赞 4：取消帖子点赞
   * @param dataId 取消点赞的数据的ID
   * @return SuccessModel
  */
  public SuccessModel userPraisingDelete (String type, String dataId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'type' is set
      if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling userPraisingDelete",
      new ApiException(400, "Missing the required parameter 'type' when calling userPraisingDelete"));
      }
  
      // verify the required parameter 'dataId' is set
      if (dataId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataId' when calling userPraisingDelete",
      new ApiException(400, "Missing the required parameter 'dataId' when calling userPraisingDelete"));
      }
  

  // create path and map variables
  String path = "/user/praising".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "data_id", dataId));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 取消点赞
   * 取消点赞 
   * @param type 取消点赞类型 - 1:取消优惠点赞 2：取消评论点赞 3：取消帖子回复点赞 4：取消帖子点赞   * @param dataId 取消点赞的数据的ID
  */
  public void userPraisingDelete (String type, String dataId, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'type' is set
    if (type == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'type' when calling userPraisingDelete",
         new ApiException(400, "Missing the required parameter 'type' when calling userPraisingDelete"));
    }
    
    // verify the required parameter 'dataId' is set
    if (dataId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'dataId' when calling userPraisingDelete",
         new ApiException(400, "Missing the required parameter 'dataId' when calling userPraisingDelete"));
    }
    

    // create path and map variables
    String path = "/user/praising".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "data_id", dataId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 点赞
  * 用户点赞动作 
   * @param type 点赞类型 - 1:优惠点赞 2：评论点赞 3：帖子回复点赞 4：帖子点赞 5:转运评论点赞
   * @param dataId 点赞的数据的ID
   * @return SuccessModel
  */
  public SuccessModel userPraisingPost (String type, String dataId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'type' is set
      if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling userPraisingPost",
      new ApiException(400, "Missing the required parameter 'type' when calling userPraisingPost"));
      }
  
      // verify the required parameter 'dataId' is set
      if (dataId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataId' when calling userPraisingPost",
      new ApiException(400, "Missing the required parameter 'dataId' when calling userPraisingPost"));
      }
  

  // create path and map variables
  String path = "/user/praising".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "data_id", dataId));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 点赞
   * 用户点赞动作 
   * @param type 点赞类型 - 1:优惠点赞 2：评论点赞 3：帖子回复点赞 4：帖子点赞 5:转运评论点赞   * @param dataId 点赞的数据的ID
  */
  public void userPraisingPost (String type, String dataId, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'type' is set
    if (type == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'type' when calling userPraisingPost",
         new ApiException(400, "Missing the required parameter 'type' when calling userPraisingPost"));
    }
    
    // verify the required parameter 'dataId' is set
    if (dataId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'dataId' when calling userPraisingPost",
         new ApiException(400, "Missing the required parameter 'dataId' when calling userPraisingPost"));
    }
    

    // create path and map variables
    String path = "/user/praising".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "data_id", dataId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 返利明细
  * 分类优惠列表 
   * @param id 返利记录ID
   * @return RebateDetailIfModel
  */
  public RebateDetailIfModel userRebateIdDetailGet (String id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'id' is set
      if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling userRebateIdDetailGet",
      new ApiException(400, "Missing the required parameter 'id' when calling userRebateIdDetailGet"));
      }
  

  // create path and map variables
  String path = "/user/rebate/{id}/detail".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (RebateDetailIfModel) ApiInvoker.deserialize(localVarResponse, "", RebateDetailIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 返利明细
   * 分类优惠列表 
   * @param id 返利记录ID
  */
  public void userRebateIdDetailGet (String id, final Response.Listener<RebateDetailIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling userRebateIdDetailGet",
         new ApiException(400, "Missing the required parameter 'id' when calling userRebateIdDetailGet"));
    }
    

    // create path and map variables
    String path = "/user/rebate/{id}/detail".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RebateDetailIfModel) ApiInvoker.deserialize(localVarResponse,  "", RebateDetailIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 丢单反馈
  * 反馈列表 
   * @param storeId 商家ID
   * @param orderNumber 订单号
   * @param costAmount 消费金额(币种：人民币；值类型：数值)
   * @param orderTime 下单时间
   * @param mail 用户邮箱
   * @param pic1 订单图片
   * @param pic2 订单图片
   * @param pic3 订单图片
   * @return SuccessModel
  */
  public SuccessModel userRebateMissedOrderPost (String storeId, String orderNumber, String costAmount, String orderTime, String mail, String pic1, String pic2, String pic3) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'storeId' is set
      if (storeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling userRebateMissedOrderPost",
      new ApiException(400, "Missing the required parameter 'storeId' when calling userRebateMissedOrderPost"));
      }
  
      // verify the required parameter 'orderNumber' is set
      if (orderNumber == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderNumber' when calling userRebateMissedOrderPost",
      new ApiException(400, "Missing the required parameter 'orderNumber' when calling userRebateMissedOrderPost"));
      }
  
      // verify the required parameter 'costAmount' is set
      if (costAmount == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'costAmount' when calling userRebateMissedOrderPost",
      new ApiException(400, "Missing the required parameter 'costAmount' when calling userRebateMissedOrderPost"));
      }
  
      // verify the required parameter 'orderTime' is set
      if (orderTime == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderTime' when calling userRebateMissedOrderPost",
      new ApiException(400, "Missing the required parameter 'orderTime' when calling userRebateMissedOrderPost"));
      }
  

  // create path and map variables
  String path = "/user/rebate_missed_order".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (storeId != null) {
          localVarBuilder.addTextBody("store_id", ApiInvoker.parameterToString(storeId), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (orderNumber != null) {
          localVarBuilder.addTextBody("order_number", ApiInvoker.parameterToString(orderNumber), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (costAmount != null) {
          localVarBuilder.addTextBody("cost_amount", ApiInvoker.parameterToString(costAmount), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (orderTime != null) {
          localVarBuilder.addTextBody("order_time", ApiInvoker.parameterToString(orderTime), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (mail != null) {
          localVarBuilder.addTextBody("mail", ApiInvoker.parameterToString(mail), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (pic1 != null) {
          localVarBuilder.addTextBody("pic1", ApiInvoker.parameterToString(pic1), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (pic2 != null) {
          localVarBuilder.addTextBody("pic2", ApiInvoker.parameterToString(pic2), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (pic3 != null) {
          localVarBuilder.addTextBody("pic3", ApiInvoker.parameterToString(pic3), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("store_id", ApiInvoker.parameterToString(storeId));
formParams.put("order_number", ApiInvoker.parameterToString(orderNumber));
formParams.put("cost_amount", ApiInvoker.parameterToString(costAmount));
formParams.put("order_time", ApiInvoker.parameterToString(orderTime));
formParams.put("mail", ApiInvoker.parameterToString(mail));
formParams.put("pic1", ApiInvoker.parameterToString(pic1));
formParams.put("pic2", ApiInvoker.parameterToString(pic2));
formParams.put("pic3", ApiInvoker.parameterToString(pic3));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SuccessModel) ApiInvoker.deserialize(localVarResponse, "", SuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 丢单反馈
   * 反馈列表 
   * @param storeId 商家ID   * @param orderNumber 订单号   * @param costAmount 消费金额(币种：人民币；值类型：数值)   * @param orderTime 下单时间   * @param mail 用户邮箱   * @param pic1 订单图片   * @param pic2 订单图片   * @param pic3 订单图片
  */
  public void userRebateMissedOrderPost (String storeId, String orderNumber, String costAmount, String orderTime, String mail, String pic1, String pic2, String pic3, final Response.Listener<SuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'storeId' is set
    if (storeId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling userRebateMissedOrderPost",
         new ApiException(400, "Missing the required parameter 'storeId' when calling userRebateMissedOrderPost"));
    }
    
    // verify the required parameter 'orderNumber' is set
    if (orderNumber == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'orderNumber' when calling userRebateMissedOrderPost",
         new ApiException(400, "Missing the required parameter 'orderNumber' when calling userRebateMissedOrderPost"));
    }
    
    // verify the required parameter 'costAmount' is set
    if (costAmount == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'costAmount' when calling userRebateMissedOrderPost",
         new ApiException(400, "Missing the required parameter 'costAmount' when calling userRebateMissedOrderPost"));
    }
    
    // verify the required parameter 'orderTime' is set
    if (orderTime == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'orderTime' when calling userRebateMissedOrderPost",
         new ApiException(400, "Missing the required parameter 'orderTime' when calling userRebateMissedOrderPost"));
    }
    

    // create path and map variables
    String path = "/user/rebate_missed_order".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (storeId != null) {
        localVarBuilder.addTextBody("store_id", ApiInvoker.parameterToString(storeId), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (orderNumber != null) {
        localVarBuilder.addTextBody("order_number", ApiInvoker.parameterToString(orderNumber), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (costAmount != null) {
        localVarBuilder.addTextBody("cost_amount", ApiInvoker.parameterToString(costAmount), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (orderTime != null) {
        localVarBuilder.addTextBody("order_time", ApiInvoker.parameterToString(orderTime), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (mail != null) {
        localVarBuilder.addTextBody("mail", ApiInvoker.parameterToString(mail), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pic1 != null) {
        localVarBuilder.addTextBody("pic1", ApiInvoker.parameterToString(pic1), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pic2 != null) {
        localVarBuilder.addTextBody("pic2", ApiInvoker.parameterToString(pic2), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (pic3 != null) {
        localVarBuilder.addTextBody("pic3", ApiInvoker.parameterToString(pic3), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("store_id", ApiInvoker.parameterToString(storeId));
formParams.put("order_number", ApiInvoker.parameterToString(orderNumber));
formParams.put("cost_amount", ApiInvoker.parameterToString(costAmount));
formParams.put("order_time", ApiInvoker.parameterToString(orderTime));
formParams.put("mail", ApiInvoker.parameterToString(mail));
formParams.put("pic1", ApiInvoker.parameterToString(pic1));
formParams.put("pic2", ApiInvoker.parameterToString(pic2));
formParams.put("pic3", ApiInvoker.parameterToString(pic3));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 丢单反馈列表
  * 丢单反馈列表 
   * @param status 丢单反馈状态 - 1：处理中 2：待商家确认 3：无效丢单
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return RebateMissedOrdersListModel
  */
  public RebateMissedOrdersListModel userRebateMissedOrdersListGet (String status, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/rebate_missed_orders/list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (RebateMissedOrdersListModel) ApiInvoker.deserialize(localVarResponse, "", RebateMissedOrdersListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 丢单反馈列表
   * 丢单反馈列表 
   * @param status 丢单反馈状态 - 1：处理中 2：待商家确认 3：无效丢单   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userRebateMissedOrdersListGet (String status, String pageNum, String pageSize, final Response.Listener<RebateMissedOrdersListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/rebate_missed_orders/list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RebateMissedOrdersListModel) ApiInvoker.deserialize(localVarResponse,  "", RebateMissedOrdersListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 返利记录列表
  * 返利记录列表 
   * @param typeId 返利类型标识 - 1：返利 2：下级返利 3：推广奖励 4：活动奖励 5：其它
   * @param status 状态 - 0：已生效 1：待生效
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return RebatesListModel
  */
  public RebatesListModel userRebatesListGet (String typeId, String status, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/rebates/list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "type_id", typeId));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (RebatesListModel) ApiInvoker.deserialize(localVarResponse, "", RebatesListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 返利记录列表
   * 返利记录列表 
   * @param typeId 返利类型标识 - 1：返利 2：下级返利 3：推广奖励 4：活动奖励 5：其它   * @param status 状态 - 0：已生效 1：待生效   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userRebatesListGet (String typeId, String status, String pageNum, String pageSize, final Response.Listener<RebatesListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/rebates/list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "type_id", typeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((RebatesListModel) ApiInvoker.deserialize(localVarResponse,  "", RebatesListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户发表过的帖子
  * 用户发表过的帖子 
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return TopicsListModel
  */
  public TopicsListModel userTopicsListGet (String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/topics_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (TopicsListModel) ApiInvoker.deserialize(localVarResponse, "", TopicsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户发表过的帖子
   * 用户发表过的帖子 
   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userTopicsListGet (String pageNum, String pageSize, final Response.Listener<TopicsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/topics_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TopicsListModel) ApiInvoker.deserialize(localVarResponse,  "", TopicsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户发表过的回帖
  * 用户发表过的回帖 
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return MyRepliesListModel
  */
  public MyRepliesListModel userTopicsRepliesListGet (String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/topics_replies_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (MyRepliesListModel) ApiInvoker.deserialize(localVarResponse, "", MyRepliesListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户发表过的回帖
   * 用户发表过的回帖 
   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userTopicsRepliesListGet (String pageNum, String pageSize, final Response.Listener<MyRepliesListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/topics_replies_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((MyRepliesListModel) ApiInvoker.deserialize(localVarResponse,  "", MyRepliesListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户转运订单列表
  * 用户转运订单列表 
   * @param transshipperId 转运公司ID
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return OrdersListModel
  */
  public OrdersListModel userTransshipperOrdersListPost (String transshipperId, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'transshipperId' is set
      if (transshipperId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'transshipperId' when calling userTransshipperOrdersListPost",
      new ApiException(400, "Missing the required parameter 'transshipperId' when calling userTransshipperOrdersListPost"));
      }
  

  // create path and map variables
  String path = "/user/transshipper_orders_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "transshipper_id", transshipperId));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (OrdersListModel) ApiInvoker.deserialize(localVarResponse, "", OrdersListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户转运订单列表
   * 用户转运订单列表 
   * @param transshipperId 转运公司ID   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userTransshipperOrdersListPost (String transshipperId, String pageNum, String pageSize, final Response.Listener<OrdersListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'transshipperId' is set
    if (transshipperId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'transshipperId' when calling userTransshipperOrdersListPost",
         new ApiException(400, "Missing the required parameter 'transshipperId' when calling userTransshipperOrdersListPost"));
    }
    

    // create path and map variables
    String path = "/user/transshipper_orders_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "transshipper_id", transshipperId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OrdersListModel) ApiInvoker.deserialize(localVarResponse,  "", OrdersListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户的试用申请列表
  * 用户的试用申请列表 
   * @param status 申请状态 - 0：申请成功 1：申请中 2：申请失败
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return ApplicationsForTrialListModel
  */
  public ApplicationsForTrialListModel userTrialApplicationsListGet (String status, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/trial/applications_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (ApplicationsForTrialListModel) ApiInvoker.deserialize(localVarResponse, "", ApplicationsForTrialListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户的试用申请列表
   * 用户的试用申请列表 
   * @param status 申请状态 - 0：申请成功 1：申请中 2：申请失败   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userTrialApplicationsListGet (String status, String pageNum, String pageSize, final Response.Listener<ApplicationsForTrialListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/trial/applications_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ApplicationsForTrialListModel) ApiInvoker.deserialize(localVarResponse,  "", ApplicationsForTrialListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户的试用报告列表
  * 用户的试用报告列表 
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return TopicsListModel
  */
  public TopicsListModel userTrialReportsListGet (String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/trial/reports_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (TopicsListModel) ApiInvoker.deserialize(localVarResponse, "", TopicsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户的试用报告列表
   * 用户的试用报告列表 
   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userTrialReportsListGet (String pageNum, String pageSize, final Response.Listener<TopicsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/trial/reports_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((TopicsListModel) ApiInvoker.deserialize(localVarResponse,  "", TopicsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 发送消息
  * 发送消息 
   * @param userId 用户ID
   * @param msg 消息
   * @return SendMsgSuccessModel
  */
  public SendMsgSuccessModel userUserIdMessageSendingPost (String userId, String msg) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'userId' is set
      if (userId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling userUserIdMessageSendingPost",
      new ApiException(400, "Missing the required parameter 'userId' when calling userUserIdMessageSendingPost"));
      }
  
      // verify the required parameter 'msg' is set
      if (msg == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'msg' when calling userUserIdMessageSendingPost",
      new ApiException(400, "Missing the required parameter 'msg' when calling userUserIdMessageSendingPost"));
      }
  

  // create path and map variables
  String path = "/user/{user_id}/message/sending".replaceAll("\\{format\\}","json").replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (msg != null) {
          localVarBuilder.addTextBody("msg", ApiInvoker.parameterToString(msg), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("msg", ApiInvoker.parameterToString(msg));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (SendMsgSuccessModel) ApiInvoker.deserialize(localVarResponse, "", SendMsgSuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 发送消息
   * 发送消息 
   * @param userId 用户ID   * @param msg 消息
  */
  public void userUserIdMessageSendingPost (String userId, String msg, final Response.Listener<SendMsgSuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'userId' is set
    if (userId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'userId' when calling userUserIdMessageSendingPost",
         new ApiException(400, "Missing the required parameter 'userId' when calling userUserIdMessageSendingPost"));
    }
    
    // verify the required parameter 'msg' is set
    if (msg == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'msg' when calling userUserIdMessageSendingPost",
         new ApiException(400, "Missing the required parameter 'msg' when calling userUserIdMessageSendingPost"));
    }
    

    // create path and map variables
    String path = "/user/{user_id}/message/sending".replaceAll("\\{format\\}","json").replaceAll("\\{" + "user_id" + "\\}", apiInvoker.escapeString(userId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (msg != null) {
        localVarBuilder.addTextBody("msg", ApiInvoker.parameterToString(msg), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("msg", ApiInvoker.parameterToString(msg));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((SendMsgSuccessModel) ApiInvoker.deserialize(localVarResponse,  "", SendMsgSuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * VIP返利商家
  * VIP返利商家 
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return VipRebateStoresListModel
  */
  public VipRebateStoresListModel userVipRebateStoresListPost (String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/vip_rebate_stores_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (VipRebateStoresListModel) ApiInvoker.deserialize(localVarResponse, "", VipRebateStoresListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * VIP返利商家
   * VIP返利商家 
   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userVipRebateStoresListPost (String pageNum, String pageSize, final Response.Listener<VipRebateStoresListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/vip_rebate_stores_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((VipRebateStoresListModel) ApiInvoker.deserialize(localVarResponse,  "", VipRebateStoresListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 浏览过的商家列表
  * 浏览过的商家列表 
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return StoresRecordsSectionsListModel
  */
  public StoresRecordsSectionsListModel userVisitedStoresListGet (String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/visited_stores_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (StoresRecordsSectionsListModel) ApiInvoker.deserialize(localVarResponse, "", StoresRecordsSectionsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 浏览过的商家列表
   * 浏览过的商家列表 
   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userVisitedStoresListGet (String pageNum, String pageSize, final Response.Listener<StoresRecordsSectionsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/visited_stores_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((StoresRecordsSectionsListModel) ApiInvoker.deserialize(localVarResponse,  "", StoresRecordsSectionsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户提现
  * 用户提现 
   * @param accountId 提现账户ID
   * @param amount 提现金额
   * @param password 提现密码
   * @return WithdrawingSuccessModel
  */
  public WithdrawingSuccessModel userWithdrawingAccountAccountIdActingPost (String accountId, String amount, String password) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'accountId' is set
      if (accountId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling userWithdrawingAccountAccountIdActingPost",
      new ApiException(400, "Missing the required parameter 'accountId' when calling userWithdrawingAccountAccountIdActingPost"));
      }
  
      // verify the required parameter 'amount' is set
      if (amount == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'amount' when calling userWithdrawingAccountAccountIdActingPost",
      new ApiException(400, "Missing the required parameter 'amount' when calling userWithdrawingAccountAccountIdActingPost"));
      }
  
      // verify the required parameter 'password' is set
      if (password == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'password' when calling userWithdrawingAccountAccountIdActingPost",
      new ApiException(400, "Missing the required parameter 'password' when calling userWithdrawingAccountAccountIdActingPost"));
      }
  

  // create path and map variables
  String path = "/user/withdrawing/account/{account_id}/acting".replaceAll("\\{format\\}","json").replaceAll("\\{" + "account_id" + "\\}", apiInvoker.escapeString(accountId.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  "multipart/form-data"
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  
          if (amount != null) {
          localVarBuilder.addTextBody("amount", ApiInvoker.parameterToString(amount), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  
          if (password != null) {
          localVarBuilder.addTextBody("password", ApiInvoker.parameterToString(password), ApiInvoker.TEXT_PLAIN_UTF8);
          }
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
  formParams.put("amount", ApiInvoker.parameterToString(amount));
formParams.put("password", ApiInvoker.parameterToString(password));
      }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (WithdrawingSuccessModel) ApiInvoker.deserialize(localVarResponse, "", WithdrawingSuccessModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户提现
   * 用户提现 
   * @param accountId 提现账户ID   * @param amount 提现金额   * @param password 提现密码
  */
  public void userWithdrawingAccountAccountIdActingPost (String accountId, String amount, String password, final Response.Listener<WithdrawingSuccessModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'accountId' is set
    if (accountId == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'accountId' when calling userWithdrawingAccountAccountIdActingPost",
         new ApiException(400, "Missing the required parameter 'accountId' when calling userWithdrawingAccountAccountIdActingPost"));
    }
    
    // verify the required parameter 'amount' is set
    if (amount == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'amount' when calling userWithdrawingAccountAccountIdActingPost",
         new ApiException(400, "Missing the required parameter 'amount' when calling userWithdrawingAccountAccountIdActingPost"));
    }
    
    // verify the required parameter 'password' is set
    if (password == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'password' when calling userWithdrawingAccountAccountIdActingPost",
         new ApiException(400, "Missing the required parameter 'password' when calling userWithdrawingAccountAccountIdActingPost"));
    }
    

    // create path and map variables
    String path = "/user/withdrawing/account/{account_id}/acting".replaceAll("\\{format\\}","json").replaceAll("\\{" + "account_id" + "\\}", apiInvoker.escapeString(accountId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "multipart/form-data"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      
      if (amount != null) {
        localVarBuilder.addTextBody("amount", ApiInvoker.parameterToString(amount), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      
      if (password != null) {
        localVarBuilder.addTextBody("password", ApiInvoker.parameterToString(password), ApiInvoker.TEXT_PLAIN_UTF8);
      }
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
      formParams.put("amount", ApiInvoker.parameterToString(amount));
formParams.put("password", ApiInvoker.parameterToString(password));
    }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((WithdrawingSuccessModel) ApiInvoker.deserialize(localVarResponse,  "", WithdrawingSuccessModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户提现记录详情
  * 用户提现记录详情 
   * @param id 提现记录ID
   * @return WithdrawingRecordDetailIfModel
  */
  public WithdrawingRecordDetailIfModel userWithdrawingRecordIdGet (String id) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  
      // verify the required parameter 'id' is set
      if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling userWithdrawingRecordIdGet",
      new ApiException(400, "Missing the required parameter 'id' when calling userWithdrawingRecordIdGet"));
      }
  

  // create path and map variables
  String path = "/user/withdrawing_record/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();



      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (WithdrawingRecordDetailIfModel) ApiInvoker.deserialize(localVarResponse, "", WithdrawingRecordDetailIfModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户提现记录详情
   * 用户提现记录详情 
   * @param id 提现记录ID
  */
  public void userWithdrawingRecordIdGet (String id, final Response.Listener<WithdrawingRecordDetailIfModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  
    // verify the required parameter 'id' is set
    if (id == null) {
       VolleyError error = new VolleyError("Missing the required parameter 'id' when calling userWithdrawingRecordIdGet",
         new ApiException(400, "Missing the required parameter 'id' when calling userWithdrawingRecordIdGet"));
    }
    

    // create path and map variables
    String path = "/user/withdrawing_record/{id}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "id" + "\\}", apiInvoker.escapeString(id.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((WithdrawingRecordDetailIfModel) ApiInvoker.deserialize(localVarResponse,  "", WithdrawingRecordDetailIfModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * 用户提现记录列表
  * 用户提现记录列表 
   * @param status 状态 - 1:审核中 2:待付款 3:提现成功 4:审核未通过 5:提现被驳回 6:提现失败
   * @param modeId 支付方式ID
   * @param pageNum 页码
   * @param pageSize 每页记录数
   * @return WithDrawingRecordsListModel
  */
  public WithDrawingRecordsListModel userWithdrawingRecordsListGet (String status, String modeId, String pageNum, String pageSize) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
     Object postBody = null;
  

  // create path and map variables
  String path = "/user/withdrawing_records_list".replaceAll("\\{format\\}","json");

  // query params
  List<Pair> queryParams = new ArrayList<Pair>();
      // header params
      Map<String, String> headerParams = new HashMap<String, String>();
      // form params
      Map<String, String> formParams = new HashMap<String, String>();

          queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "mode_id", modeId));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
          queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


      String[] contentTypes = {
  
      };
      String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

      if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
  

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
      } else {
      // normal form params
        }

      String[] authNames = new String[] {  };

      try {
        String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
        if(localVarResponse != null){
           return (WithDrawingRecordsListModel) ApiInvoker.deserialize(localVarResponse, "", WithDrawingRecordsListModel.class);
        } else {
           return null;
        }
      } catch (ApiException ex) {
         throw ex;
      } catch (InterruptedException ex) {
         throw ex;
      } catch (ExecutionException ex) {
         if(ex.getCause() instanceof VolleyError) {
	    VolleyError volleyError = (VolleyError)ex.getCause();
	    if (volleyError.networkResponse != null) {
	       throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
	    }
         }
         throw ex;
      } catch (TimeoutException ex) {
         throw ex;
      }
  }

      /**
   * 用户提现记录列表
   * 用户提现记录列表 
   * @param status 状态 - 1:审核中 2:待付款 3:提现成功 4:审核未通过 5:提现被驳回 6:提现失败   * @param modeId 支付方式ID   * @param pageNum 页码   * @param pageSize 每页记录数
  */
  public void userWithdrawingRecordsListGet (String status, String modeId, String pageNum, String pageSize, final Response.Listener<WithDrawingRecordsListModel> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

  

    // create path and map variables
    String path = "/user/withdrawing_records_list".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mode_id", modeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_num", pageNum));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_size", pageSize));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

      String[] authNames = new String[] {  };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((WithDrawingRecordsListModel) ApiInvoker.deserialize(localVarResponse,  "", WithDrawingRecordsListModel.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
